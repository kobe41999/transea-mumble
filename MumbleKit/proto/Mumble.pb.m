// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Mumble.pb.h"

@implementation MPMumbleRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MPMumbleRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MPVersion ()
@property uint32_t version;
@property (retain) NSString* release;
@property (retain) NSString* os;
@property (retain) NSString* osVersion;
@end

@implementation MPVersion

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value {
  hasVersion_ = !!value;
}
@synthesize version;
- (BOOL) hasRelease {
  return !!hasRelease_;
}
- (void) setHasRelease:(BOOL) value {
  hasRelease_ = !!value;
}
@synthesize release;
- (BOOL) hasOs {
  return !!hasOs_;
}
- (void) setHasOs:(BOOL) value {
  hasOs_ = !!value;
}
@synthesize os;
- (BOOL) hasOsVersion {
  return !!hasOsVersion_;
}
- (void) setHasOsVersion:(BOOL) value {
  hasOsVersion_ = !!value;
}
@synthesize osVersion;
- (void) dealloc {
  self.release = nil;
  self.os = nil;
  self.osVersion = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.version = 0;
    self.release = @"";
    self.os = @"";
    self.osVersion = @"";
  }
  return self;
}
static MPVersion* defaultMPVersionInstance = nil;
+ (void) initialize {
  if (self == [MPVersion class]) {
    defaultMPVersionInstance = [[MPVersion alloc] init];
  }
}
+ (MPVersion*) defaultInstance {
  return defaultMPVersionInstance;
}
- (MPVersion*) defaultInstance {
  return defaultMPVersionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeUInt32:1 value:self.version];
  }
  if (self.hasRelease) {
    [output writeString:2 value:self.release];
  }
  if (self.hasOs) {
    [output writeString:3 value:self.os];
  }
  if (self.hasOsVersion) {
    [output writeString:4 value:self.osVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasVersion) {
    size += computeUInt32Size(1, self.version);
  }
  if (self.hasRelease) {
    size += computeStringSize(2, self.release);
  }
  if (self.hasOs) {
    size += computeStringSize(3, self.os);
  }
  if (self.hasOsVersion) {
    size += computeStringSize(4, self.osVersion);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPVersion*) parseFromData:(NSData*) data {
  return (MPVersion*)[[[MPVersion builder] mergeFromData:data] build];
}
+ (MPVersion*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVersion*)[[[MPVersion builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPVersion*) parseFromInputStream:(NSInputStream*) input {
  return (MPVersion*)[[[MPVersion builder] mergeFromInputStream:input] build];
}
+ (MPVersion*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVersion*)[[[MPVersion builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPVersion*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPVersion*)[[[MPVersion builder] mergeFromCodedInputStream:input] build];
}
+ (MPVersion*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVersion*)[[[MPVersion builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPVersion_Builder*) builder {
  return [[[MPVersion_Builder alloc] init] autorelease];
}
+ (MPVersion_Builder*) builderWithPrototype:(MPVersion*) prototype {
  return [[MPVersion builder] mergeFrom:prototype];
}
- (MPVersion_Builder*) builder {
  return [MPVersion builder];
}
- (MPVersion_Builder*) toBuilder {
  return [MPVersion builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInt:self.version]];
  }
  if (self.hasRelease) {
    [output appendFormat:@"%@%@: %@\n", indent, @"release", self.release];
  }
  if (self.hasOs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"os", self.os];
  }
  if (self.hasOsVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"osVersion", self.osVersion];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPVersion class]]) {
    return NO;
  }
  MPVersion *otherMessage = other;
  return
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      self.hasRelease == otherMessage.hasRelease &&
      (!self.hasRelease || [self.release isEqual:otherMessage.release]) &&
      self.hasOs == otherMessage.hasOs &&
      (!self.hasOs || [self.os isEqual:otherMessage.os]) &&
      self.hasOsVersion == otherMessage.hasOsVersion &&
      (!self.hasOsVersion || [self.osVersion isEqual:otherMessage.osVersion]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.version] hash];
  }
  if (self.hasRelease) {
    hashCode = hashCode * 31 + [self.release hash];
  }
  if (self.hasOs) {
    hashCode = hashCode * 31 + [self.os hash];
  }
  if (self.hasOsVersion) {
    hashCode = hashCode * 31 + [self.osVersion hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPVersion_Builder()
@property (retain) MPVersion* result;
@end

@implementation MPVersion_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPVersion alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPVersion_Builder*) clear {
  self.result = [[[MPVersion alloc] init] autorelease];
  return self;
}
- (MPVersion_Builder*) clone {
  return [MPVersion builderWithPrototype:result];
}
- (MPVersion*) defaultInstance {
  return [MPVersion defaultInstance];
}
- (MPVersion*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPVersion*) buildPartial {
  MPVersion* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPVersion_Builder*) mergeFrom:(MPVersion*) other {
  if (other == [MPVersion defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasRelease) {
    [self setRelease:other.release];
  }
  if (other.hasOs) {
    [self setOs:other.os];
  }
  if (other.hasOsVersion) {
    [self setOsVersion:other.osVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPVersion_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPVersion_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setVersion:[input readUInt32]];
        break;
      }
      case 18: {
        [self setRelease:[input readString]];
        break;
      }
      case 26: {
        [self setOs:[input readString]];
        break;
      }
      case 34: {
        [self setOsVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (uint32_t) version {
  return result.version;
}
- (MPVersion_Builder*) setVersion:(uint32_t) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (MPVersion_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = 0;
  return self;
}
- (BOOL) hasRelease {
  return result.hasRelease;
}
- (NSString*) release {
  return result.release;
}
- (MPVersion_Builder*) setRelease:(NSString*) value {
  result.hasRelease = YES;
  result.release = value;
  return self;
}
- (MPVersion_Builder*) clearRelease {
  result.hasRelease = NO;
  result.release = @"";
  return self;
}
- (BOOL) hasOs {
  return result.hasOs;
}
- (NSString*) os {
  return result.os;
}
- (MPVersion_Builder*) setOs:(NSString*) value {
  result.hasOs = YES;
  result.os = value;
  return self;
}
- (MPVersion_Builder*) clearOs {
  result.hasOs = NO;
  result.os = @"";
  return self;
}
- (BOOL) hasOsVersion {
  return result.hasOsVersion;
}
- (NSString*) osVersion {
  return result.osVersion;
}
- (MPVersion_Builder*) setOsVersion:(NSString*) value {
  result.hasOsVersion = YES;
  result.osVersion = value;
  return self;
}
- (MPVersion_Builder*) clearOsVersion {
  result.hasOsVersion = NO;
  result.osVersion = @"";
  return self;
}
@end

@interface MPUDPTunnel ()
@property (retain) NSData* packet;
@end

@implementation MPUDPTunnel

- (BOOL) hasPacket {
  return !!hasPacket_;
}
- (void) setHasPacket:(BOOL) value {
  hasPacket_ = !!value;
}
@synthesize packet;
- (void) dealloc {
  self.packet = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.packet = [NSData data];
  }
  return self;
}
static MPUDPTunnel* defaultMPUDPTunnelInstance = nil;
+ (void) initialize {
  if (self == [MPUDPTunnel class]) {
    defaultMPUDPTunnelInstance = [[MPUDPTunnel alloc] init];
  }
}
+ (MPUDPTunnel*) defaultInstance {
  return defaultMPUDPTunnelInstance;
}
- (MPUDPTunnel*) defaultInstance {
  return defaultMPUDPTunnelInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPacket) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPacket) {
    [output writeData:1 value:self.packet];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPacket) {
    size += computeDataSize(1, self.packet);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPUDPTunnel*) parseFromData:(NSData*) data {
  return (MPUDPTunnel*)[[[MPUDPTunnel builder] mergeFromData:data] build];
}
+ (MPUDPTunnel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUDPTunnel*)[[[MPUDPTunnel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUDPTunnel*) parseFromInputStream:(NSInputStream*) input {
  return (MPUDPTunnel*)[[[MPUDPTunnel builder] mergeFromInputStream:input] build];
}
+ (MPUDPTunnel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUDPTunnel*)[[[MPUDPTunnel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUDPTunnel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUDPTunnel*)[[[MPUDPTunnel builder] mergeFromCodedInputStream:input] build];
}
+ (MPUDPTunnel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUDPTunnel*)[[[MPUDPTunnel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUDPTunnel_Builder*) builder {
  return [[[MPUDPTunnel_Builder alloc] init] autorelease];
}
+ (MPUDPTunnel_Builder*) builderWithPrototype:(MPUDPTunnel*) prototype {
  return [[MPUDPTunnel builder] mergeFrom:prototype];
}
- (MPUDPTunnel_Builder*) builder {
  return [MPUDPTunnel builder];
}
- (MPUDPTunnel_Builder*) toBuilder {
  return [MPUDPTunnel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPacket) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packet", self.packet];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUDPTunnel class]]) {
    return NO;
  }
  MPUDPTunnel *otherMessage = other;
  return
      self.hasPacket == otherMessage.hasPacket &&
      (!self.hasPacket || [self.packet isEqual:otherMessage.packet]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPacket) {
    hashCode = hashCode * 31 + [self.packet hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUDPTunnel_Builder()
@property (retain) MPUDPTunnel* result;
@end

@implementation MPUDPTunnel_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPUDPTunnel alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPUDPTunnel_Builder*) clear {
  self.result = [[[MPUDPTunnel alloc] init] autorelease];
  return self;
}
- (MPUDPTunnel_Builder*) clone {
  return [MPUDPTunnel builderWithPrototype:result];
}
- (MPUDPTunnel*) defaultInstance {
  return [MPUDPTunnel defaultInstance];
}
- (MPUDPTunnel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUDPTunnel*) buildPartial {
  MPUDPTunnel* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPUDPTunnel_Builder*) mergeFrom:(MPUDPTunnel*) other {
  if (other == [MPUDPTunnel defaultInstance]) {
    return self;
  }
  if (other.hasPacket) {
    [self setPacket:other.packet];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUDPTunnel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUDPTunnel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPacket:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasPacket {
  return result.hasPacket;
}
- (NSData*) packet {
  return result.packet;
}
- (MPUDPTunnel_Builder*) setPacket:(NSData*) value {
  result.hasPacket = YES;
  result.packet = value;
  return self;
}
- (MPUDPTunnel_Builder*) clearPacket {
  result.hasPacket = NO;
  result.packet = [NSData data];
  return self;
}
@end

@interface MPAuthenticate ()
@property (retain) NSString* username;
@property (retain) NSString* password;
@property (retain) PBAppendableArray * tokensArray;
@property (retain) PBAppendableArray * celtVersionsArray;
@property BOOL opus;
@end

@implementation MPAuthenticate

- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) value {
  hasUsername_ = !!value;
}
@synthesize username;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
@synthesize tokensArray;
@dynamic tokens;
@synthesize celtVersionsArray;
@dynamic celtVersions;
- (BOOL) hasOpus {
  return !!hasOpus_;
}
- (void) setHasOpus:(BOOL) value {
  hasOpus_ = !!value;
}
- (BOOL) opus {
  return !!opus_;
}
- (void) setOpus:(BOOL) value {
  opus_ = !!value;
}
- (void) dealloc {
  self.username = nil;
  self.password = nil;
  self.tokensArray = nil;
  self.celtVersionsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.username = @"";
    self.password = @"";
    self.opus = NO;
  }
  return self;
}
static MPAuthenticate* defaultMPAuthenticateInstance = nil;
+ (void) initialize {
  if (self == [MPAuthenticate class]) {
    defaultMPAuthenticateInstance = [[MPAuthenticate alloc] init];
  }
}
+ (MPAuthenticate*) defaultInstance {
  return defaultMPAuthenticateInstance;
}
- (MPAuthenticate*) defaultInstance {
  return defaultMPAuthenticateInstance;
}
- (PBArray *)tokens {
  return tokensArray;
}
- (NSString*)tokensAtIndex:(NSUInteger)index {
  return [tokensArray objectAtIndex:index];
}
- (PBArray *)celtVersions {
  return celtVersionsArray;
}
- (int32_t)celtVersionsAtIndex:(NSUInteger)index {
  return [celtVersionsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUsername) {
    [output writeString:1 value:self.username];
  }
  if (self.hasPassword) {
    [output writeString:2 value:self.password];
  }
  const NSUInteger tokensArrayCount = self.tokensArray.count;
  if (tokensArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.tokensArray.data;
    for (NSUInteger i = 0; i < tokensArrayCount; ++i) {
      [output writeString:3 value:values[i]];
    }
  }
  const NSUInteger celtVersionsArrayCount = self.celtVersionsArray.count;
  if (celtVersionsArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.celtVersionsArray.data;
    for (NSUInteger i = 0; i < celtVersionsArrayCount; ++i) {
      [output writeInt32:4 value:values[i]];
    }
  }
  if (self.hasOpus) {
    [output writeBool:5 value:self.opus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUsername) {
    size += computeStringSize(1, self.username);
  }
  if (self.hasPassword) {
    size += computeStringSize(2, self.password);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.tokensArray.count;
    const NSString* *values = (const NSString* *)self.tokensArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.celtVersionsArray.count;
    const int32_t *values = (const int32_t *)self.celtVersionsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  if (self.hasOpus) {
    size += computeBoolSize(5, self.opus);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPAuthenticate*) parseFromData:(NSData*) data {
  return (MPAuthenticate*)[[[MPAuthenticate builder] mergeFromData:data] build];
}
+ (MPAuthenticate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPAuthenticate*)[[[MPAuthenticate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPAuthenticate*) parseFromInputStream:(NSInputStream*) input {
  return (MPAuthenticate*)[[[MPAuthenticate builder] mergeFromInputStream:input] build];
}
+ (MPAuthenticate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPAuthenticate*)[[[MPAuthenticate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPAuthenticate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPAuthenticate*)[[[MPAuthenticate builder] mergeFromCodedInputStream:input] build];
}
+ (MPAuthenticate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPAuthenticate*)[[[MPAuthenticate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPAuthenticate_Builder*) builder {
  return [[[MPAuthenticate_Builder alloc] init] autorelease];
}
+ (MPAuthenticate_Builder*) builderWithPrototype:(MPAuthenticate*) prototype {
  return [[MPAuthenticate builder] mergeFrom:prototype];
}
- (MPAuthenticate_Builder*) builder {
  return [MPAuthenticate builder];
}
- (MPAuthenticate_Builder*) toBuilder {
  return [MPAuthenticate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUsername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"username", self.username];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  for (NSString* element in self.tokensArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tokens", element];
  }
  for (NSNumber* value in self.celtVersionsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"celtVersions", value];
  }
  if (self.hasOpus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opus", [NSNumber numberWithBool:self.opus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPAuthenticate class]]) {
    return NO;
  }
  MPAuthenticate *otherMessage = other;
  return
      self.hasUsername == otherMessage.hasUsername &&
      (!self.hasUsername || [self.username isEqual:otherMessage.username]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      [self.tokensArray isEqualToArray:otherMessage.tokensArray] &&
      [self.celtVersionsArray isEqualToArray:otherMessage.celtVersionsArray] &&
      self.hasOpus == otherMessage.hasOpus &&
      (!self.hasOpus || self.opus == otherMessage.opus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasUsername) {
    hashCode = hashCode * 31 + [self.username hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  for (NSString* element in self.tokensArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSNumber* value in self.celtVersionsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasOpus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.opus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPAuthenticate_Builder()
@property (retain) MPAuthenticate* result;
@end

@implementation MPAuthenticate_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPAuthenticate alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPAuthenticate_Builder*) clear {
  self.result = [[[MPAuthenticate alloc] init] autorelease];
  return self;
}
- (MPAuthenticate_Builder*) clone {
  return [MPAuthenticate builderWithPrototype:result];
}
- (MPAuthenticate*) defaultInstance {
  return [MPAuthenticate defaultInstance];
}
- (MPAuthenticate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPAuthenticate*) buildPartial {
  MPAuthenticate* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPAuthenticate_Builder*) mergeFrom:(MPAuthenticate*) other {
  if (other == [MPAuthenticate defaultInstance]) {
    return self;
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.tokensArray.count > 0) {
    if (result.tokensArray == nil) {
      result.tokensArray = [[other.tokensArray copyWithZone:[other.tokensArray zone]] autorelease];
    } else {
      [result.tokensArray appendArray:other.tokensArray];
    }
  }
  if (other.celtVersionsArray.count > 0) {
    if (result.celtVersionsArray == nil) {
      result.celtVersionsArray = [[other.celtVersionsArray copyWithZone:[other.celtVersionsArray zone]] autorelease];
    } else {
      [result.celtVersionsArray appendArray:other.celtVersionsArray];
    }
  }
  if (other.hasOpus) {
    [self setOpus:other.opus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPAuthenticate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPAuthenticate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUsername:[input readString]];
        break;
      }
      case 18: {
        [self setPassword:[input readString]];
        break;
      }
      case 26: {
        [self addTokens:[input readString]];
        break;
      }
      case 32: {
        [self addCeltVersions:[input readInt32]];
        break;
      }
      case 40: {
        [self setOpus:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasUsername {
  return result.hasUsername;
}
- (NSString*) username {
  return result.username;
}
- (MPAuthenticate_Builder*) setUsername:(NSString*) value {
  result.hasUsername = YES;
  result.username = value;
  return self;
}
- (MPAuthenticate_Builder*) clearUsername {
  result.hasUsername = NO;
  result.username = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (MPAuthenticate_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (MPAuthenticate_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (PBAppendableArray *)tokens {
  return result.tokensArray;
}
- (NSString*)tokensAtIndex:(NSUInteger)index {
  return [result tokensAtIndex:index];
}
- (MPAuthenticate_Builder *)addTokens:(NSString*)value {
  if (result.tokensArray == nil) {
    result.tokensArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.tokensArray addObject:value];
  return self;
}
- (MPAuthenticate_Builder *)setTokensArray:(NSArray *)array {
  result.tokensArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MPAuthenticate_Builder *)setTokensValues:(const NSString* *)values count:(NSUInteger)count {
  result.tokensArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MPAuthenticate_Builder *)clearTokens {
  result.tokensArray = nil;
  return self;
}
- (PBAppendableArray *)celtVersions {
  return result.celtVersionsArray;
}
- (int32_t)celtVersionsAtIndex:(NSUInteger)index {
  return [result celtVersionsAtIndex:index];
}
- (MPAuthenticate_Builder *)addCeltVersions:(int32_t)value {
  if (result.celtVersionsArray == nil) {
    result.celtVersionsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [result.celtVersionsArray addInt32:value];
  return self;
}
- (MPAuthenticate_Builder *)setCeltVersionsArray:(NSArray *)array {
  result.celtVersionsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (MPAuthenticate_Builder *)setCeltVersionsValues:(const int32_t *)values count:(NSUInteger)count {
  result.celtVersionsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (MPAuthenticate_Builder *)clearCeltVersions {
  result.celtVersionsArray = nil;
  return self;
}
- (BOOL) hasOpus {
  return result.hasOpus;
}
- (BOOL) opus {
  return result.opus;
}
- (MPAuthenticate_Builder*) setOpus:(BOOL) value {
  result.hasOpus = YES;
  result.opus = value;
  return self;
}
- (MPAuthenticate_Builder*) clearOpus {
  result.hasOpus = NO;
  result.opus = NO;
  return self;
}
@end

@interface MPPing ()
@property uint64_t timestamp;
@property uint32_t good;
@property uint32_t late;
@property uint32_t lost;
@property uint32_t resync;
@property uint32_t udpPackets;
@property uint32_t tcpPackets;
@property Float32 udpPingAvg;
@property Float32 udpPingVar;
@property Float32 tcpPingAvg;
@property Float32 tcpPingVar;
@end

@implementation MPPing

- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) value {
  hasTimestamp_ = !!value;
}
@synthesize timestamp;
- (BOOL) hasGood {
  return !!hasGood_;
}
- (void) setHasGood:(BOOL) value {
  hasGood_ = !!value;
}
@synthesize good;
- (BOOL) hasLate {
  return !!hasLate_;
}
- (void) setHasLate:(BOOL) value {
  hasLate_ = !!value;
}
@synthesize late;
- (BOOL) hasLost {
  return !!hasLost_;
}
- (void) setHasLost:(BOOL) value {
  hasLost_ = !!value;
}
@synthesize lost;
- (BOOL) hasResync {
  return !!hasResync_;
}
- (void) setHasResync:(BOOL) value {
  hasResync_ = !!value;
}
@synthesize resync;
- (BOOL) hasUdpPackets {
  return !!hasUdpPackets_;
}
- (void) setHasUdpPackets:(BOOL) value {
  hasUdpPackets_ = !!value;
}
@synthesize udpPackets;
- (BOOL) hasTcpPackets {
  return !!hasTcpPackets_;
}
- (void) setHasTcpPackets:(BOOL) value {
  hasTcpPackets_ = !!value;
}
@synthesize tcpPackets;
- (BOOL) hasUdpPingAvg {
  return !!hasUdpPingAvg_;
}
- (void) setHasUdpPingAvg:(BOOL) value {
  hasUdpPingAvg_ = !!value;
}
@synthesize udpPingAvg;
- (BOOL) hasUdpPingVar {
  return !!hasUdpPingVar_;
}
- (void) setHasUdpPingVar:(BOOL) value {
  hasUdpPingVar_ = !!value;
}
@synthesize udpPingVar;
- (BOOL) hasTcpPingAvg {
  return !!hasTcpPingAvg_;
}
- (void) setHasTcpPingAvg:(BOOL) value {
  hasTcpPingAvg_ = !!value;
}
@synthesize tcpPingAvg;
- (BOOL) hasTcpPingVar {
  return !!hasTcpPingVar_;
}
- (void) setHasTcpPingVar:(BOOL) value {
  hasTcpPingVar_ = !!value;
}
@synthesize tcpPingVar;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.timestamp = 0L;
    self.good = 0;
    self.late = 0;
    self.lost = 0;
    self.resync = 0;
    self.udpPackets = 0;
    self.tcpPackets = 0;
    self.udpPingAvg = 0;
    self.udpPingVar = 0;
    self.tcpPingAvg = 0;
    self.tcpPingVar = 0;
  }
  return self;
}
static MPPing* defaultMPPingInstance = nil;
+ (void) initialize {
  if (self == [MPPing class]) {
    defaultMPPingInstance = [[MPPing alloc] init];
  }
}
+ (MPPing*) defaultInstance {
  return defaultMPPingInstance;
}
- (MPPing*) defaultInstance {
  return defaultMPPingInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTimestamp) {
    [output writeUInt64:1 value:self.timestamp];
  }
  if (self.hasGood) {
    [output writeUInt32:2 value:self.good];
  }
  if (self.hasLate) {
    [output writeUInt32:3 value:self.late];
  }
  if (self.hasLost) {
    [output writeUInt32:4 value:self.lost];
  }
  if (self.hasResync) {
    [output writeUInt32:5 value:self.resync];
  }
  if (self.hasUdpPackets) {
    [output writeUInt32:6 value:self.udpPackets];
  }
  if (self.hasTcpPackets) {
    [output writeUInt32:7 value:self.tcpPackets];
  }
  if (self.hasUdpPingAvg) {
    [output writeFloat:8 value:self.udpPingAvg];
  }
  if (self.hasUdpPingVar) {
    [output writeFloat:9 value:self.udpPingVar];
  }
  if (self.hasTcpPingAvg) {
    [output writeFloat:10 value:self.tcpPingAvg];
  }
  if (self.hasTcpPingVar) {
    [output writeFloat:11 value:self.tcpPingVar];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTimestamp) {
    size += computeUInt64Size(1, self.timestamp);
  }
  if (self.hasGood) {
    size += computeUInt32Size(2, self.good);
  }
  if (self.hasLate) {
    size += computeUInt32Size(3, self.late);
  }
  if (self.hasLost) {
    size += computeUInt32Size(4, self.lost);
  }
  if (self.hasResync) {
    size += computeUInt32Size(5, self.resync);
  }
  if (self.hasUdpPackets) {
    size += computeUInt32Size(6, self.udpPackets);
  }
  if (self.hasTcpPackets) {
    size += computeUInt32Size(7, self.tcpPackets);
  }
  if (self.hasUdpPingAvg) {
    size += computeFloatSize(8, self.udpPingAvg);
  }
  if (self.hasUdpPingVar) {
    size += computeFloatSize(9, self.udpPingVar);
  }
  if (self.hasTcpPingAvg) {
    size += computeFloatSize(10, self.tcpPingAvg);
  }
  if (self.hasTcpPingVar) {
    size += computeFloatSize(11, self.tcpPingVar);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPPing*) parseFromData:(NSData*) data {
  return (MPPing*)[[[MPPing builder] mergeFromData:data] build];
}
+ (MPPing*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPing*)[[[MPPing builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPPing*) parseFromInputStream:(NSInputStream*) input {
  return (MPPing*)[[[MPPing builder] mergeFromInputStream:input] build];
}
+ (MPPing*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPing*)[[[MPPing builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPing*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPPing*)[[[MPPing builder] mergeFromCodedInputStream:input] build];
}
+ (MPPing*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPing*)[[[MPPing builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPing_Builder*) builder {
  return [[[MPPing_Builder alloc] init] autorelease];
}
+ (MPPing_Builder*) builderWithPrototype:(MPPing*) prototype {
  return [[MPPing builder] mergeFrom:prototype];
}
- (MPPing_Builder*) builder {
  return [MPPing builder];
}
- (MPPing_Builder*) toBuilder {
  return [MPPing builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasGood) {
    [output appendFormat:@"%@%@: %@\n", indent, @"good", [NSNumber numberWithInt:self.good]];
  }
  if (self.hasLate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"late", [NSNumber numberWithInt:self.late]];
  }
  if (self.hasLost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lost", [NSNumber numberWithInt:self.lost]];
  }
  if (self.hasResync) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resync", [NSNumber numberWithInt:self.resync]];
  }
  if (self.hasUdpPackets) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udpPackets", [NSNumber numberWithInt:self.udpPackets]];
  }
  if (self.hasTcpPackets) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcpPackets", [NSNumber numberWithInt:self.tcpPackets]];
  }
  if (self.hasUdpPingAvg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udpPingAvg", [NSNumber numberWithFloat:self.udpPingAvg]];
  }
  if (self.hasUdpPingVar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udpPingVar", [NSNumber numberWithFloat:self.udpPingVar]];
  }
  if (self.hasTcpPingAvg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcpPingAvg", [NSNumber numberWithFloat:self.tcpPingAvg]];
  }
  if (self.hasTcpPingVar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcpPingVar", [NSNumber numberWithFloat:self.tcpPingVar]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPPing class]]) {
    return NO;
  }
  MPPing *otherMessage = other;
  return
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasGood == otherMessage.hasGood &&
      (!self.hasGood || self.good == otherMessage.good) &&
      self.hasLate == otherMessage.hasLate &&
      (!self.hasLate || self.late == otherMessage.late) &&
      self.hasLost == otherMessage.hasLost &&
      (!self.hasLost || self.lost == otherMessage.lost) &&
      self.hasResync == otherMessage.hasResync &&
      (!self.hasResync || self.resync == otherMessage.resync) &&
      self.hasUdpPackets == otherMessage.hasUdpPackets &&
      (!self.hasUdpPackets || self.udpPackets == otherMessage.udpPackets) &&
      self.hasTcpPackets == otherMessage.hasTcpPackets &&
      (!self.hasTcpPackets || self.tcpPackets == otherMessage.tcpPackets) &&
      self.hasUdpPingAvg == otherMessage.hasUdpPingAvg &&
      (!self.hasUdpPingAvg || self.udpPingAvg == otherMessage.udpPingAvg) &&
      self.hasUdpPingVar == otherMessage.hasUdpPingVar &&
      (!self.hasUdpPingVar || self.udpPingVar == otherMessage.udpPingVar) &&
      self.hasTcpPingAvg == otherMessage.hasTcpPingAvg &&
      (!self.hasTcpPingAvg || self.tcpPingAvg == otherMessage.tcpPingAvg) &&
      self.hasTcpPingVar == otherMessage.hasTcpPingVar &&
      (!self.hasTcpPingVar || self.tcpPingVar == otherMessage.tcpPingVar) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasGood) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.good] hash];
  }
  if (self.hasLate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.late] hash];
  }
  if (self.hasLost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lost] hash];
  }
  if (self.hasResync) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.resync] hash];
  }
  if (self.hasUdpPackets) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.udpPackets] hash];
  }
  if (self.hasTcpPackets) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tcpPackets] hash];
  }
  if (self.hasUdpPingAvg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.udpPingAvg] hash];
  }
  if (self.hasUdpPingVar) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.udpPingVar] hash];
  }
  if (self.hasTcpPingAvg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.tcpPingAvg] hash];
  }
  if (self.hasTcpPingVar) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.tcpPingVar] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPPing_Builder()
@property (retain) MPPing* result;
@end

@implementation MPPing_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPPing alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPPing_Builder*) clear {
  self.result = [[[MPPing alloc] init] autorelease];
  return self;
}
- (MPPing_Builder*) clone {
  return [MPPing builderWithPrototype:result];
}
- (MPPing*) defaultInstance {
  return [MPPing defaultInstance];
}
- (MPPing*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPPing*) buildPartial {
  MPPing* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPPing_Builder*) mergeFrom:(MPPing*) other {
  if (other == [MPPing defaultInstance]) {
    return self;
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasGood) {
    [self setGood:other.good];
  }
  if (other.hasLate) {
    [self setLate:other.late];
  }
  if (other.hasLost) {
    [self setLost:other.lost];
  }
  if (other.hasResync) {
    [self setResync:other.resync];
  }
  if (other.hasUdpPackets) {
    [self setUdpPackets:other.udpPackets];
  }
  if (other.hasTcpPackets) {
    [self setTcpPackets:other.tcpPackets];
  }
  if (other.hasUdpPingAvg) {
    [self setUdpPingAvg:other.udpPingAvg];
  }
  if (other.hasUdpPingVar) {
    [self setUdpPingVar:other.udpPingVar];
  }
  if (other.hasTcpPingAvg) {
    [self setTcpPingAvg:other.tcpPingAvg];
  }
  if (other.hasTcpPingVar) {
    [self setTcpPingVar:other.tcpPingVar];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPPing_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPPing_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTimestamp:[input readUInt64]];
        break;
      }
      case 16: {
        [self setGood:[input readUInt32]];
        break;
      }
      case 24: {
        [self setLate:[input readUInt32]];
        break;
      }
      case 32: {
        [self setLost:[input readUInt32]];
        break;
      }
      case 40: {
        [self setResync:[input readUInt32]];
        break;
      }
      case 48: {
        [self setUdpPackets:[input readUInt32]];
        break;
      }
      case 56: {
        [self setTcpPackets:[input readUInt32]];
        break;
      }
      case 69: {
        [self setUdpPingAvg:[input readFloat]];
        break;
      }
      case 77: {
        [self setUdpPingVar:[input readFloat]];
        break;
      }
      case 85: {
        [self setTcpPingAvg:[input readFloat]];
        break;
      }
      case 93: {
        [self setTcpPingVar:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasTimestamp {
  return result.hasTimestamp;
}
- (uint64_t) timestamp {
  return result.timestamp;
}
- (MPPing_Builder*) setTimestamp:(uint64_t) value {
  result.hasTimestamp = YES;
  result.timestamp = value;
  return self;
}
- (MPPing_Builder*) clearTimestamp {
  result.hasTimestamp = NO;
  result.timestamp = 0L;
  return self;
}
- (BOOL) hasGood {
  return result.hasGood;
}
- (uint32_t) good {
  return result.good;
}
- (MPPing_Builder*) setGood:(uint32_t) value {
  result.hasGood = YES;
  result.good = value;
  return self;
}
- (MPPing_Builder*) clearGood {
  result.hasGood = NO;
  result.good = 0;
  return self;
}
- (BOOL) hasLate {
  return result.hasLate;
}
- (uint32_t) late {
  return result.late;
}
- (MPPing_Builder*) setLate:(uint32_t) value {
  result.hasLate = YES;
  result.late = value;
  return self;
}
- (MPPing_Builder*) clearLate {
  result.hasLate = NO;
  result.late = 0;
  return self;
}
- (BOOL) hasLost {
  return result.hasLost;
}
- (uint32_t) lost {
  return result.lost;
}
- (MPPing_Builder*) setLost:(uint32_t) value {
  result.hasLost = YES;
  result.lost = value;
  return self;
}
- (MPPing_Builder*) clearLost {
  result.hasLost = NO;
  result.lost = 0;
  return self;
}
- (BOOL) hasResync {
  return result.hasResync;
}
- (uint32_t) resync {
  return result.resync;
}
- (MPPing_Builder*) setResync:(uint32_t) value {
  result.hasResync = YES;
  result.resync = value;
  return self;
}
- (MPPing_Builder*) clearResync {
  result.hasResync = NO;
  result.resync = 0;
  return self;
}
- (BOOL) hasUdpPackets {
  return result.hasUdpPackets;
}
- (uint32_t) udpPackets {
  return result.udpPackets;
}
- (MPPing_Builder*) setUdpPackets:(uint32_t) value {
  result.hasUdpPackets = YES;
  result.udpPackets = value;
  return self;
}
- (MPPing_Builder*) clearUdpPackets {
  result.hasUdpPackets = NO;
  result.udpPackets = 0;
  return self;
}
- (BOOL) hasTcpPackets {
  return result.hasTcpPackets;
}
- (uint32_t) tcpPackets {
  return result.tcpPackets;
}
- (MPPing_Builder*) setTcpPackets:(uint32_t) value {
  result.hasTcpPackets = YES;
  result.tcpPackets = value;
  return self;
}
- (MPPing_Builder*) clearTcpPackets {
  result.hasTcpPackets = NO;
  result.tcpPackets = 0;
  return self;
}
- (BOOL) hasUdpPingAvg {
  return result.hasUdpPingAvg;
}
- (Float32) udpPingAvg {
  return result.udpPingAvg;
}
- (MPPing_Builder*) setUdpPingAvg:(Float32) value {
  result.hasUdpPingAvg = YES;
  result.udpPingAvg = value;
  return self;
}
- (MPPing_Builder*) clearUdpPingAvg {
  result.hasUdpPingAvg = NO;
  result.udpPingAvg = 0;
  return self;
}
- (BOOL) hasUdpPingVar {
  return result.hasUdpPingVar;
}
- (Float32) udpPingVar {
  return result.udpPingVar;
}
- (MPPing_Builder*) setUdpPingVar:(Float32) value {
  result.hasUdpPingVar = YES;
  result.udpPingVar = value;
  return self;
}
- (MPPing_Builder*) clearUdpPingVar {
  result.hasUdpPingVar = NO;
  result.udpPingVar = 0;
  return self;
}
- (BOOL) hasTcpPingAvg {
  return result.hasTcpPingAvg;
}
- (Float32) tcpPingAvg {
  return result.tcpPingAvg;
}
- (MPPing_Builder*) setTcpPingAvg:(Float32) value {
  result.hasTcpPingAvg = YES;
  result.tcpPingAvg = value;
  return self;
}
- (MPPing_Builder*) clearTcpPingAvg {
  result.hasTcpPingAvg = NO;
  result.tcpPingAvg = 0;
  return self;
}
- (BOOL) hasTcpPingVar {
  return result.hasTcpPingVar;
}
- (Float32) tcpPingVar {
  return result.tcpPingVar;
}
- (MPPing_Builder*) setTcpPingVar:(Float32) value {
  result.hasTcpPingVar = YES;
  result.tcpPingVar = value;
  return self;
}
- (MPPing_Builder*) clearTcpPingVar {
  result.hasTcpPingVar = NO;
  result.tcpPingVar = 0;
  return self;
}
@end

@interface MPReject ()
@property MPReject_RejectType type;
@property (retain) NSString* reason;
@end

@implementation MPReject

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) value {
  hasReason_ = !!value;
}
@synthesize reason;
- (void) dealloc {
  self.reason = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = MPReject_RejectTypeNone;
    self.reason = @"";
  }
  return self;
}
static MPReject* defaultMPRejectInstance = nil;
+ (void) initialize {
  if (self == [MPReject class]) {
    defaultMPRejectInstance = [[MPReject alloc] init];
  }
}
+ (MPReject*) defaultInstance {
  return defaultMPRejectInstance;
}
- (MPReject*) defaultInstance {
  return defaultMPRejectInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasReason) {
    [output writeString:2 value:self.reason];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeEnumSize(1, self.type);
  }
  if (self.hasReason) {
    size += computeStringSize(2, self.reason);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPReject*) parseFromData:(NSData*) data {
  return (MPReject*)[[[MPReject builder] mergeFromData:data] build];
}
+ (MPReject*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPReject*)[[[MPReject builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPReject*) parseFromInputStream:(NSInputStream*) input {
  return (MPReject*)[[[MPReject builder] mergeFromInputStream:input] build];
}
+ (MPReject*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPReject*)[[[MPReject builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPReject*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPReject*)[[[MPReject builder] mergeFromCodedInputStream:input] build];
}
+ (MPReject*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPReject*)[[[MPReject builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPReject_Builder*) builder {
  return [[[MPReject_Builder alloc] init] autorelease];
}
+ (MPReject_Builder*) builderWithPrototype:(MPReject*) prototype {
  return [[MPReject builder] mergeFrom:prototype];
}
- (MPReject_Builder*) builder {
  return [MPReject builder];
}
- (MPReject_Builder*) toBuilder {
  return [MPReject builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPReject class]]) {
    return NO;
  }
  MPReject *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type != otherMessage.type) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL MPReject_RejectTypeIsValidValue(MPReject_RejectType value) {
  switch (value) {
    case MPReject_RejectTypeNone:
    case MPReject_RejectTypeWrongVersion:
    case MPReject_RejectTypeInvalidUsername:
    case MPReject_RejectTypeWrongUserPw:
    case MPReject_RejectTypeWrongServerPw:
    case MPReject_RejectTypeUsernameInUse:
    case MPReject_RejectTypeServerFull:
    case MPReject_RejectTypeNoCertificate:
      return YES;
    default:
      return NO;
  }
}
@interface MPReject_Builder()
@property (retain) MPReject* result;
@end

@implementation MPReject_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPReject alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPReject_Builder*) clear {
  self.result = [[[MPReject alloc] init] autorelease];
  return self;
}
- (MPReject_Builder*) clone {
  return [MPReject builderWithPrototype:result];
}
- (MPReject*) defaultInstance {
  return [MPReject defaultInstance];
}
- (MPReject*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPReject*) buildPartial {
  MPReject* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPReject_Builder*) mergeFrom:(MPReject*) other {
  if (other == [MPReject defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPReject_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPReject_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (MPReject_RejectTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setReason:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (MPReject_RejectType) type {
  return result.type;
}
- (MPReject_Builder*) setType:(MPReject_RejectType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (MPReject_Builder*) clearType {
  result.hasType = NO;
  result.type = MPReject_RejectTypeNone;
  return self;
}
- (BOOL) hasReason {
  return result.hasReason;
}
- (NSString*) reason {
  return result.reason;
}
- (MPReject_Builder*) setReason:(NSString*) value {
  result.hasReason = YES;
  result.reason = value;
  return self;
}
- (MPReject_Builder*) clearReason {
  result.hasReason = NO;
  result.reason = @"";
  return self;
}
@end

@interface MPServerConfig ()
@property uint32_t maxBandwidth;
@property (retain) NSString* welcomeText;
@property BOOL allowHtml;
@property uint32_t messageLength;
@property uint32_t imageMessageLength;
@end

@implementation MPServerConfig

- (BOOL) hasMaxBandwidth {
  return !!hasMaxBandwidth_;
}
- (void) setHasMaxBandwidth:(BOOL) value {
  hasMaxBandwidth_ = !!value;
}
@synthesize maxBandwidth;
- (BOOL) hasWelcomeText {
  return !!hasWelcomeText_;
}
- (void) setHasWelcomeText:(BOOL) value {
  hasWelcomeText_ = !!value;
}
@synthesize welcomeText;
- (BOOL) hasAllowHtml {
  return !!hasAllowHtml_;
}
- (void) setHasAllowHtml:(BOOL) value {
  hasAllowHtml_ = !!value;
}
- (BOOL) allowHtml {
  return !!allowHtml_;
}
- (void) setAllowHtml:(BOOL) value {
  allowHtml_ = !!value;
}
- (BOOL) hasMessageLength {
  return !!hasMessageLength_;
}
- (void) setHasMessageLength:(BOOL) value {
  hasMessageLength_ = !!value;
}
@synthesize messageLength;
- (BOOL) hasImageMessageLength {
  return !!hasImageMessageLength_;
}
- (void) setHasImageMessageLength:(BOOL) value {
  hasImageMessageLength_ = !!value;
}
@synthesize imageMessageLength;
- (void) dealloc {
  self.welcomeText = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.maxBandwidth = 0;
    self.welcomeText = @"";
    self.allowHtml = NO;
    self.messageLength = 0;
    self.imageMessageLength = 0;
  }
  return self;
}
static MPServerConfig* defaultMPServerConfigInstance = nil;
+ (void) initialize {
  if (self == [MPServerConfig class]) {
    defaultMPServerConfigInstance = [[MPServerConfig alloc] init];
  }
}
+ (MPServerConfig*) defaultInstance {
  return defaultMPServerConfigInstance;
}
- (MPServerConfig*) defaultInstance {
  return defaultMPServerConfigInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMaxBandwidth) {
    [output writeUInt32:1 value:self.maxBandwidth];
  }
  if (self.hasWelcomeText) {
    [output writeString:2 value:self.welcomeText];
  }
  if (self.hasAllowHtml) {
    [output writeBool:3 value:self.allowHtml];
  }
  if (self.hasMessageLength) {
    [output writeUInt32:4 value:self.messageLength];
  }
  if (self.hasImageMessageLength) {
    [output writeUInt32:5 value:self.imageMessageLength];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMaxBandwidth) {
    size += computeUInt32Size(1, self.maxBandwidth);
  }
  if (self.hasWelcomeText) {
    size += computeStringSize(2, self.welcomeText);
  }
  if (self.hasAllowHtml) {
    size += computeBoolSize(3, self.allowHtml);
  }
  if (self.hasMessageLength) {
    size += computeUInt32Size(4, self.messageLength);
  }
  if (self.hasImageMessageLength) {
    size += computeUInt32Size(5, self.imageMessageLength);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPServerConfig*) parseFromData:(NSData*) data {
  return (MPServerConfig*)[[[MPServerConfig builder] mergeFromData:data] build];
}
+ (MPServerConfig*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPServerConfig*)[[[MPServerConfig builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPServerConfig*) parseFromInputStream:(NSInputStream*) input {
  return (MPServerConfig*)[[[MPServerConfig builder] mergeFromInputStream:input] build];
}
+ (MPServerConfig*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPServerConfig*)[[[MPServerConfig builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPServerConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPServerConfig*)[[[MPServerConfig builder] mergeFromCodedInputStream:input] build];
}
+ (MPServerConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPServerConfig*)[[[MPServerConfig builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPServerConfig_Builder*) builder {
  return [[[MPServerConfig_Builder alloc] init] autorelease];
}
+ (MPServerConfig_Builder*) builderWithPrototype:(MPServerConfig*) prototype {
  return [[MPServerConfig builder] mergeFrom:prototype];
}
- (MPServerConfig_Builder*) builder {
  return [MPServerConfig builder];
}
- (MPServerConfig_Builder*) toBuilder {
  return [MPServerConfig builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMaxBandwidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxBandwidth", [NSNumber numberWithInt:self.maxBandwidth]];
  }
  if (self.hasWelcomeText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"welcomeText", self.welcomeText];
  }
  if (self.hasAllowHtml) {
    [output appendFormat:@"%@%@: %@\n", indent, @"allowHtml", [NSNumber numberWithBool:self.allowHtml]];
  }
  if (self.hasMessageLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageLength", [NSNumber numberWithInt:self.messageLength]];
  }
  if (self.hasImageMessageLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageMessageLength", [NSNumber numberWithInt:self.imageMessageLength]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPServerConfig class]]) {
    return NO;
  }
  MPServerConfig *otherMessage = other;
  return
      self.hasMaxBandwidth == otherMessage.hasMaxBandwidth &&
      (!self.hasMaxBandwidth || self.maxBandwidth == otherMessage.maxBandwidth) &&
      self.hasWelcomeText == otherMessage.hasWelcomeText &&
      (!self.hasWelcomeText || [self.welcomeText isEqual:otherMessage.welcomeText]) &&
      self.hasAllowHtml == otherMessage.hasAllowHtml &&
      (!self.hasAllowHtml || self.allowHtml == otherMessage.allowHtml) &&
      self.hasMessageLength == otherMessage.hasMessageLength &&
      (!self.hasMessageLength || self.messageLength == otherMessage.messageLength) &&
      self.hasImageMessageLength == otherMessage.hasImageMessageLength &&
      (!self.hasImageMessageLength || self.imageMessageLength == otherMessage.imageMessageLength) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMaxBandwidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.maxBandwidth] hash];
  }
  if (self.hasWelcomeText) {
    hashCode = hashCode * 31 + [self.welcomeText hash];
  }
  if (self.hasAllowHtml) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.allowHtml] hash];
  }
  if (self.hasMessageLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.messageLength] hash];
  }
  if (self.hasImageMessageLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.imageMessageLength] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPServerConfig_Builder()
@property (retain) MPServerConfig* result;
@end

@implementation MPServerConfig_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPServerConfig alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPServerConfig_Builder*) clear {
  self.result = [[[MPServerConfig alloc] init] autorelease];
  return self;
}
- (MPServerConfig_Builder*) clone {
  return [MPServerConfig builderWithPrototype:result];
}
- (MPServerConfig*) defaultInstance {
  return [MPServerConfig defaultInstance];
}
- (MPServerConfig*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPServerConfig*) buildPartial {
  MPServerConfig* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPServerConfig_Builder*) mergeFrom:(MPServerConfig*) other {
  if (other == [MPServerConfig defaultInstance]) {
    return self;
  }
  if (other.hasMaxBandwidth) {
    [self setMaxBandwidth:other.maxBandwidth];
  }
  if (other.hasWelcomeText) {
    [self setWelcomeText:other.welcomeText];
  }
  if (other.hasAllowHtml) {
    [self setAllowHtml:other.allowHtml];
  }
  if (other.hasMessageLength) {
    [self setMessageLength:other.messageLength];
  }
  if (other.hasImageMessageLength) {
    [self setImageMessageLength:other.imageMessageLength];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPServerConfig_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPServerConfig_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMaxBandwidth:[input readUInt32]];
        break;
      }
      case 18: {
        [self setWelcomeText:[input readString]];
        break;
      }
      case 24: {
        [self setAllowHtml:[input readBool]];
        break;
      }
      case 32: {
        [self setMessageLength:[input readUInt32]];
        break;
      }
      case 40: {
        [self setImageMessageLength:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMaxBandwidth {
  return result.hasMaxBandwidth;
}
- (uint32_t) maxBandwidth {
  return result.maxBandwidth;
}
- (MPServerConfig_Builder*) setMaxBandwidth:(uint32_t) value {
  result.hasMaxBandwidth = YES;
  result.maxBandwidth = value;
  return self;
}
- (MPServerConfig_Builder*) clearMaxBandwidth {
  result.hasMaxBandwidth = NO;
  result.maxBandwidth = 0;
  return self;
}
- (BOOL) hasWelcomeText {
  return result.hasWelcomeText;
}
- (NSString*) welcomeText {
  return result.welcomeText;
}
- (MPServerConfig_Builder*) setWelcomeText:(NSString*) value {
  result.hasWelcomeText = YES;
  result.welcomeText = value;
  return self;
}
- (MPServerConfig_Builder*) clearWelcomeText {
  result.hasWelcomeText = NO;
  result.welcomeText = @"";
  return self;
}
- (BOOL) hasAllowHtml {
  return result.hasAllowHtml;
}
- (BOOL) allowHtml {
  return result.allowHtml;
}
- (MPServerConfig_Builder*) setAllowHtml:(BOOL) value {
  result.hasAllowHtml = YES;
  result.allowHtml = value;
  return self;
}
- (MPServerConfig_Builder*) clearAllowHtml {
  result.hasAllowHtml = NO;
  result.allowHtml = NO;
  return self;
}
- (BOOL) hasMessageLength {
  return result.hasMessageLength;
}
- (uint32_t) messageLength {
  return result.messageLength;
}
- (MPServerConfig_Builder*) setMessageLength:(uint32_t) value {
  result.hasMessageLength = YES;
  result.messageLength = value;
  return self;
}
- (MPServerConfig_Builder*) clearMessageLength {
  result.hasMessageLength = NO;
  result.messageLength = 0;
  return self;
}
- (BOOL) hasImageMessageLength {
  return result.hasImageMessageLength;
}
- (uint32_t) imageMessageLength {
  return result.imageMessageLength;
}
- (MPServerConfig_Builder*) setImageMessageLength:(uint32_t) value {
  result.hasImageMessageLength = YES;
  result.imageMessageLength = value;
  return self;
}
- (MPServerConfig_Builder*) clearImageMessageLength {
  result.hasImageMessageLength = NO;
  result.imageMessageLength = 0;
  return self;
}
@end

@interface MPServerSync ()
@property uint32_t session;
@property uint32_t maxBandwidth;
@property (retain) NSString* welcomeText;
@property uint64_t permissions;
@end

@implementation MPServerSync

- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) value {
  hasSession_ = !!value;
}
@synthesize session;
- (BOOL) hasMaxBandwidth {
  return !!hasMaxBandwidth_;
}
- (void) setHasMaxBandwidth:(BOOL) value {
  hasMaxBandwidth_ = !!value;
}
@synthesize maxBandwidth;
- (BOOL) hasWelcomeText {
  return !!hasWelcomeText_;
}
- (void) setHasWelcomeText:(BOOL) value {
  hasWelcomeText_ = !!value;
}
@synthesize welcomeText;
- (BOOL) hasPermissions {
  return !!hasPermissions_;
}
- (void) setHasPermissions:(BOOL) value {
  hasPermissions_ = !!value;
}
@synthesize permissions;
- (void) dealloc {
  self.welcomeText = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.session = 0;
    self.maxBandwidth = 0;
    self.welcomeText = @"";
    self.permissions = 0L;
  }
  return self;
}
static MPServerSync* defaultMPServerSyncInstance = nil;
+ (void) initialize {
  if (self == [MPServerSync class]) {
    defaultMPServerSyncInstance = [[MPServerSync alloc] init];
  }
}
+ (MPServerSync*) defaultInstance {
  return defaultMPServerSyncInstance;
}
- (MPServerSync*) defaultInstance {
  return defaultMPServerSyncInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSession) {
    [output writeUInt32:1 value:self.session];
  }
  if (self.hasMaxBandwidth) {
    [output writeUInt32:2 value:self.maxBandwidth];
  }
  if (self.hasWelcomeText) {
    [output writeString:3 value:self.welcomeText];
  }
  if (self.hasPermissions) {
    [output writeUInt64:4 value:self.permissions];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSession) {
    size += computeUInt32Size(1, self.session);
  }
  if (self.hasMaxBandwidth) {
    size += computeUInt32Size(2, self.maxBandwidth);
  }
  if (self.hasWelcomeText) {
    size += computeStringSize(3, self.welcomeText);
  }
  if (self.hasPermissions) {
    size += computeUInt64Size(4, self.permissions);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPServerSync*) parseFromData:(NSData*) data {
  return (MPServerSync*)[[[MPServerSync builder] mergeFromData:data] build];
}
+ (MPServerSync*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPServerSync*)[[[MPServerSync builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPServerSync*) parseFromInputStream:(NSInputStream*) input {
  return (MPServerSync*)[[[MPServerSync builder] mergeFromInputStream:input] build];
}
+ (MPServerSync*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPServerSync*)[[[MPServerSync builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPServerSync*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPServerSync*)[[[MPServerSync builder] mergeFromCodedInputStream:input] build];
}
+ (MPServerSync*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPServerSync*)[[[MPServerSync builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPServerSync_Builder*) builder {
  return [[[MPServerSync_Builder alloc] init] autorelease];
}
+ (MPServerSync_Builder*) builderWithPrototype:(MPServerSync*) prototype {
  return [[MPServerSync builder] mergeFrom:prototype];
}
- (MPServerSync_Builder*) builder {
  return [MPServerSync builder];
}
- (MPServerSync_Builder*) toBuilder {
  return [MPServerSync builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", [NSNumber numberWithInt:self.session]];
  }
  if (self.hasMaxBandwidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxBandwidth", [NSNumber numberWithInt:self.maxBandwidth]];
  }
  if (self.hasWelcomeText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"welcomeText", self.welcomeText];
  }
  if (self.hasPermissions) {
    [output appendFormat:@"%@%@: %@\n", indent, @"permissions", [NSNumber numberWithLongLong:self.permissions]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPServerSync class]]) {
    return NO;
  }
  MPServerSync *otherMessage = other;
  return
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || self.session == otherMessage.session) &&
      self.hasMaxBandwidth == otherMessage.hasMaxBandwidth &&
      (!self.hasMaxBandwidth || self.maxBandwidth == otherMessage.maxBandwidth) &&
      self.hasWelcomeText == otherMessage.hasWelcomeText &&
      (!self.hasWelcomeText || [self.welcomeText isEqual:otherMessage.welcomeText]) &&
      self.hasPermissions == otherMessage.hasPermissions &&
      (!self.hasPermissions || self.permissions == otherMessage.permissions) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSession) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.session] hash];
  }
  if (self.hasMaxBandwidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.maxBandwidth] hash];
  }
  if (self.hasWelcomeText) {
    hashCode = hashCode * 31 + [self.welcomeText hash];
  }
  if (self.hasPermissions) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.permissions] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPServerSync_Builder()
@property (retain) MPServerSync* result;
@end

@implementation MPServerSync_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPServerSync alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPServerSync_Builder*) clear {
  self.result = [[[MPServerSync alloc] init] autorelease];
  return self;
}
- (MPServerSync_Builder*) clone {
  return [MPServerSync builderWithPrototype:result];
}
- (MPServerSync*) defaultInstance {
  return [MPServerSync defaultInstance];
}
- (MPServerSync*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPServerSync*) buildPartial {
  MPServerSync* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPServerSync_Builder*) mergeFrom:(MPServerSync*) other {
  if (other == [MPServerSync defaultInstance]) {
    return self;
  }
  if (other.hasSession) {
    [self setSession:other.session];
  }
  if (other.hasMaxBandwidth) {
    [self setMaxBandwidth:other.maxBandwidth];
  }
  if (other.hasWelcomeText) {
    [self setWelcomeText:other.welcomeText];
  }
  if (other.hasPermissions) {
    [self setPermissions:other.permissions];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPServerSync_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPServerSync_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSession:[input readUInt32]];
        break;
      }
      case 16: {
        [self setMaxBandwidth:[input readUInt32]];
        break;
      }
      case 26: {
        [self setWelcomeText:[input readString]];
        break;
      }
      case 32: {
        [self setPermissions:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasSession {
  return result.hasSession;
}
- (uint32_t) session {
  return result.session;
}
- (MPServerSync_Builder*) setSession:(uint32_t) value {
  result.hasSession = YES;
  result.session = value;
  return self;
}
- (MPServerSync_Builder*) clearSession {
  result.hasSession = NO;
  result.session = 0;
  return self;
}
- (BOOL) hasMaxBandwidth {
  return result.hasMaxBandwidth;
}
- (uint32_t) maxBandwidth {
  return result.maxBandwidth;
}
- (MPServerSync_Builder*) setMaxBandwidth:(uint32_t) value {
  result.hasMaxBandwidth = YES;
  result.maxBandwidth = value;
  return self;
}
- (MPServerSync_Builder*) clearMaxBandwidth {
  result.hasMaxBandwidth = NO;
  result.maxBandwidth = 0;
  return self;
}
- (BOOL) hasWelcomeText {
  return result.hasWelcomeText;
}
- (NSString*) welcomeText {
  return result.welcomeText;
}
- (MPServerSync_Builder*) setWelcomeText:(NSString*) value {
  result.hasWelcomeText = YES;
  result.welcomeText = value;
  return self;
}
- (MPServerSync_Builder*) clearWelcomeText {
  result.hasWelcomeText = NO;
  result.welcomeText = @"";
  return self;
}
- (BOOL) hasPermissions {
  return result.hasPermissions;
}
- (uint64_t) permissions {
  return result.permissions;
}
- (MPServerSync_Builder*) setPermissions:(uint64_t) value {
  result.hasPermissions = YES;
  result.permissions = value;
  return self;
}
- (MPServerSync_Builder*) clearPermissions {
  result.hasPermissions = NO;
  result.permissions = 0L;
  return self;
}
@end

@interface MPChannelRemove ()
@property uint32_t channelId;
@end

@implementation MPChannelRemove

- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value {
  hasChannelId_ = !!value;
}
@synthesize channelId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.channelId = 0;
  }
  return self;
}
static MPChannelRemove* defaultMPChannelRemoveInstance = nil;
+ (void) initialize {
  if (self == [MPChannelRemove class]) {
    defaultMPChannelRemoveInstance = [[MPChannelRemove alloc] init];
  }
}
+ (MPChannelRemove*) defaultInstance {
  return defaultMPChannelRemoveInstance;
}
- (MPChannelRemove*) defaultInstance {
  return defaultMPChannelRemoveInstance;
}
- (BOOL) isInitialized {
  if (!self.hasChannelId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelId) {
    [output writeUInt32:1 value:self.channelId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasChannelId) {
    size += computeUInt32Size(1, self.channelId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPChannelRemove*) parseFromData:(NSData*) data {
  return (MPChannelRemove*)[[[MPChannelRemove builder] mergeFromData:data] build];
}
+ (MPChannelRemove*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPChannelRemove*)[[[MPChannelRemove builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPChannelRemove*) parseFromInputStream:(NSInputStream*) input {
  return (MPChannelRemove*)[[[MPChannelRemove builder] mergeFromInputStream:input] build];
}
+ (MPChannelRemove*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPChannelRemove*)[[[MPChannelRemove builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPChannelRemove*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPChannelRemove*)[[[MPChannelRemove builder] mergeFromCodedInputStream:input] build];
}
+ (MPChannelRemove*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPChannelRemove*)[[[MPChannelRemove builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPChannelRemove_Builder*) builder {
  return [[[MPChannelRemove_Builder alloc] init] autorelease];
}
+ (MPChannelRemove_Builder*) builderWithPrototype:(MPChannelRemove*) prototype {
  return [[MPChannelRemove builder] mergeFrom:prototype];
}
- (MPChannelRemove_Builder*) builder {
  return [MPChannelRemove builder];
}
- (MPChannelRemove_Builder*) toBuilder {
  return [MPChannelRemove builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInt:self.channelId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPChannelRemove class]]) {
    return NO;
  }
  MPChannelRemove *otherMessage = other;
  return
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.channelId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPChannelRemove_Builder()
@property (retain) MPChannelRemove* result;
@end

@implementation MPChannelRemove_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPChannelRemove alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPChannelRemove_Builder*) clear {
  self.result = [[[MPChannelRemove alloc] init] autorelease];
  return self;
}
- (MPChannelRemove_Builder*) clone {
  return [MPChannelRemove builderWithPrototype:result];
}
- (MPChannelRemove*) defaultInstance {
  return [MPChannelRemove defaultInstance];
}
- (MPChannelRemove*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPChannelRemove*) buildPartial {
  MPChannelRemove* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPChannelRemove_Builder*) mergeFrom:(MPChannelRemove*) other {
  if (other == [MPChannelRemove defaultInstance]) {
    return self;
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPChannelRemove_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPChannelRemove_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChannelId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelId {
  return result.hasChannelId;
}
- (uint32_t) channelId {
  return result.channelId;
}
- (MPChannelRemove_Builder*) setChannelId:(uint32_t) value {
  result.hasChannelId = YES;
  result.channelId = value;
  return self;
}
- (MPChannelRemove_Builder*) clearChannelId {
  result.hasChannelId = NO;
  result.channelId = 0;
  return self;
}
@end

@interface MPChannelState ()
@property uint32_t channelId;
@property uint32_t parent;
@property (retain) NSString* name;
@property (retain) PBAppendableArray * linksArray;
@property (retain) NSString* description;
@property (retain) PBAppendableArray * linksAddArray;
@property (retain) PBAppendableArray * linksRemoveArray;
@property BOOL temporary;
@property int32_t position;
@property (retain) NSData* descriptionHash;
@end

@implementation MPChannelState

- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value {
  hasChannelId_ = !!value;
}
@synthesize channelId;
- (BOOL) hasParent {
  return !!hasParent_;
}
- (void) setHasParent:(BOOL) value {
  hasParent_ = !!value;
}
@synthesize parent;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
@synthesize linksArray;
@dynamic links;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value {
  hasDescription_ = !!value;
}
@synthesize description;
@synthesize linksAddArray;
@dynamic linksAdd;
@synthesize linksRemoveArray;
@dynamic linksRemove;
- (BOOL) hasTemporary {
  return !!hasTemporary_;
}
- (void) setHasTemporary:(BOOL) value {
  hasTemporary_ = !!value;
}
- (BOOL) temporary {
  return !!temporary_;
}
- (void) setTemporary:(BOOL) value {
  temporary_ = !!value;
}
- (BOOL) hasPosition {
  return !!hasPosition_;
}
- (void) setHasPosition:(BOOL) value {
  hasPosition_ = !!value;
}
@synthesize position;
- (BOOL) hasDescriptionHash {
  return !!hasDescriptionHash_;
}
- (void) setHasDescriptionHash:(BOOL) value {
  hasDescriptionHash_ = !!value;
}
@synthesize descriptionHash;
- (void) dealloc {
  self.name = nil;
  self.linksArray = nil;
  self.description = nil;
  self.linksAddArray = nil;
  self.linksRemoveArray = nil;
  self.descriptionHash = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.channelId = 0;
    self.parent = 0;
    self.name = @"";
    self.description = @"";
    self.temporary = NO;
    self.position = 0;
    self.descriptionHash = [NSData data];
  }
  return self;
}
static MPChannelState* defaultMPChannelStateInstance = nil;
+ (void) initialize {
  if (self == [MPChannelState class]) {
    defaultMPChannelStateInstance = [[MPChannelState alloc] init];
  }
}
+ (MPChannelState*) defaultInstance {
  return defaultMPChannelStateInstance;
}
- (MPChannelState*) defaultInstance {
  return defaultMPChannelStateInstance;
}
- (PBArray *)links {
  return linksArray;
}
- (uint32_t)linksAtIndex:(NSUInteger)index {
  return [linksArray uint32AtIndex:index];
}
- (PBArray *)linksAdd {
  return linksAddArray;
}
- (uint32_t)linksAddAtIndex:(NSUInteger)index {
  return [linksAddArray uint32AtIndex:index];
}
- (PBArray *)linksRemove {
  return linksRemoveArray;
}
- (uint32_t)linksRemoveAtIndex:(NSUInteger)index {
  return [linksRemoveArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelId) {
    [output writeUInt32:1 value:self.channelId];
  }
  if (self.hasParent) {
    [output writeUInt32:2 value:self.parent];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  const NSUInteger linksArrayCount = self.linksArray.count;
  if (linksArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.linksArray.data;
    for (NSUInteger i = 0; i < linksArrayCount; ++i) {
      [output writeUInt32:4 value:values[i]];
    }
  }
  if (self.hasDescription) {
    [output writeString:5 value:self.description];
  }
  const NSUInteger linksAddArrayCount = self.linksAddArray.count;
  if (linksAddArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.linksAddArray.data;
    for (NSUInteger i = 0; i < linksAddArrayCount; ++i) {
      [output writeUInt32:6 value:values[i]];
    }
  }
  const NSUInteger linksRemoveArrayCount = self.linksRemoveArray.count;
  if (linksRemoveArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.linksRemoveArray.data;
    for (NSUInteger i = 0; i < linksRemoveArrayCount; ++i) {
      [output writeUInt32:7 value:values[i]];
    }
  }
  if (self.hasTemporary) {
    [output writeBool:8 value:self.temporary];
  }
  if (self.hasPosition) {
    [output writeInt32:9 value:self.position];
  }
  if (self.hasDescriptionHash) {
    [output writeData:10 value:self.descriptionHash];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasChannelId) {
    size += computeUInt32Size(1, self.channelId);
  }
  if (self.hasParent) {
    size += computeUInt32Size(2, self.parent);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.linksArray.count;
    const uint32_t *values = (const uint32_t *)self.linksArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  if (self.hasDescription) {
    size += computeStringSize(5, self.description);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.linksAddArray.count;
    const uint32_t *values = (const uint32_t *)self.linksAddArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.linksRemoveArray.count;
    const uint32_t *values = (const uint32_t *)self.linksRemoveArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  if (self.hasTemporary) {
    size += computeBoolSize(8, self.temporary);
  }
  if (self.hasPosition) {
    size += computeInt32Size(9, self.position);
  }
  if (self.hasDescriptionHash) {
    size += computeDataSize(10, self.descriptionHash);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPChannelState*) parseFromData:(NSData*) data {
  return (MPChannelState*)[[[MPChannelState builder] mergeFromData:data] build];
}
+ (MPChannelState*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPChannelState*)[[[MPChannelState builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPChannelState*) parseFromInputStream:(NSInputStream*) input {
  return (MPChannelState*)[[[MPChannelState builder] mergeFromInputStream:input] build];
}
+ (MPChannelState*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPChannelState*)[[[MPChannelState builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPChannelState*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPChannelState*)[[[MPChannelState builder] mergeFromCodedInputStream:input] build];
}
+ (MPChannelState*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPChannelState*)[[[MPChannelState builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPChannelState_Builder*) builder {
  return [[[MPChannelState_Builder alloc] init] autorelease];
}
+ (MPChannelState_Builder*) builderWithPrototype:(MPChannelState*) prototype {
  return [[MPChannelState builder] mergeFrom:prototype];
}
- (MPChannelState_Builder*) builder {
  return [MPChannelState builder];
}
- (MPChannelState_Builder*) toBuilder {
  return [MPChannelState builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInt:self.channelId]];
  }
  if (self.hasParent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parent", [NSNumber numberWithInt:self.parent]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  for (NSNumber* value in self.linksArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"links", value];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  for (NSNumber* value in self.linksAddArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"linksAdd", value];
  }
  for (NSNumber* value in self.linksRemoveArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"linksRemove", value];
  }
  if (self.hasTemporary) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temporary", [NSNumber numberWithBool:self.temporary]];
  }
  if (self.hasPosition) {
    [output appendFormat:@"%@%@: %@\n", indent, @"position", [NSNumber numberWithInt:self.position]];
  }
  if (self.hasDescriptionHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"descriptionHash", self.descriptionHash];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPChannelState class]]) {
    return NO;
  }
  MPChannelState *otherMessage = other;
  return
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasParent == otherMessage.hasParent &&
      (!self.hasParent || self.parent == otherMessage.parent) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      [self.linksArray isEqualToArray:otherMessage.linksArray] &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      [self.linksAddArray isEqualToArray:otherMessage.linksAddArray] &&
      [self.linksRemoveArray isEqualToArray:otherMessage.linksRemoveArray] &&
      self.hasTemporary == otherMessage.hasTemporary &&
      (!self.hasTemporary || self.temporary == otherMessage.temporary) &&
      self.hasPosition == otherMessage.hasPosition &&
      (!self.hasPosition || self.position == otherMessage.position) &&
      self.hasDescriptionHash == otherMessage.hasDescriptionHash &&
      (!self.hasDescriptionHash || [self.descriptionHash isEqual:otherMessage.descriptionHash]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.channelId] hash];
  }
  if (self.hasParent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.parent] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  for (NSNumber* value in self.linksArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  for (NSNumber* value in self.linksAddArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.linksRemoveArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasTemporary) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.temporary] hash];
  }
  if (self.hasPosition) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.position] hash];
  }
  if (self.hasDescriptionHash) {
    hashCode = hashCode * 31 + [self.descriptionHash hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPChannelState_Builder()
@property (retain) MPChannelState* result;
@end

@implementation MPChannelState_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPChannelState alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPChannelState_Builder*) clear {
  self.result = [[[MPChannelState alloc] init] autorelease];
  return self;
}
- (MPChannelState_Builder*) clone {
  return [MPChannelState builderWithPrototype:result];
}
- (MPChannelState*) defaultInstance {
  return [MPChannelState defaultInstance];
}
- (MPChannelState*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPChannelState*) buildPartial {
  MPChannelState* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPChannelState_Builder*) mergeFrom:(MPChannelState*) other {
  if (other == [MPChannelState defaultInstance]) {
    return self;
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasParent) {
    [self setParent:other.parent];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.linksArray.count > 0) {
    if (result.linksArray == nil) {
      result.linksArray = [[other.linksArray copyWithZone:[other.linksArray zone]] autorelease];
    } else {
      [result.linksArray appendArray:other.linksArray];
    }
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.linksAddArray.count > 0) {
    if (result.linksAddArray == nil) {
      result.linksAddArray = [[other.linksAddArray copyWithZone:[other.linksAddArray zone]] autorelease];
    } else {
      [result.linksAddArray appendArray:other.linksAddArray];
    }
  }
  if (other.linksRemoveArray.count > 0) {
    if (result.linksRemoveArray == nil) {
      result.linksRemoveArray = [[other.linksRemoveArray copyWithZone:[other.linksRemoveArray zone]] autorelease];
    } else {
      [result.linksRemoveArray appendArray:other.linksRemoveArray];
    }
  }
  if (other.hasTemporary) {
    [self setTemporary:other.temporary];
  }
  if (other.hasPosition) {
    [self setPosition:other.position];
  }
  if (other.hasDescriptionHash) {
    [self setDescriptionHash:other.descriptionHash];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPChannelState_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPChannelState_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setParent:[input readUInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self addLinks:[input readUInt32]];
        break;
      }
      case 42: {
        [self setDescription:[input readString]];
        break;
      }
      case 48: {
        [self addLinksAdd:[input readUInt32]];
        break;
      }
      case 56: {
        [self addLinksRemove:[input readUInt32]];
        break;
      }
      case 64: {
        [self setTemporary:[input readBool]];
        break;
      }
      case 72: {
        [self setPosition:[input readInt32]];
        break;
      }
      case 82: {
        [self setDescriptionHash:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelId {
  return result.hasChannelId;
}
- (uint32_t) channelId {
  return result.channelId;
}
- (MPChannelState_Builder*) setChannelId:(uint32_t) value {
  result.hasChannelId = YES;
  result.channelId = value;
  return self;
}
- (MPChannelState_Builder*) clearChannelId {
  result.hasChannelId = NO;
  result.channelId = 0;
  return self;
}
- (BOOL) hasParent {
  return result.hasParent;
}
- (uint32_t) parent {
  return result.parent;
}
- (MPChannelState_Builder*) setParent:(uint32_t) value {
  result.hasParent = YES;
  result.parent = value;
  return self;
}
- (MPChannelState_Builder*) clearParent {
  result.hasParent = NO;
  result.parent = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MPChannelState_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MPChannelState_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (PBAppendableArray *)links {
  return result.linksArray;
}
- (uint32_t)linksAtIndex:(NSUInteger)index {
  return [result linksAtIndex:index];
}
- (MPChannelState_Builder *)addLinks:(uint32_t)value {
  if (result.linksArray == nil) {
    result.linksArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.linksArray addUint32:value];
  return self;
}
- (MPChannelState_Builder *)setLinksArray:(NSArray *)array {
  result.linksArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPChannelState_Builder *)setLinksValues:(const uint32_t *)values count:(NSUInteger)count {
  result.linksArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPChannelState_Builder *)clearLinks {
  result.linksArray = nil;
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (MPChannelState_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (MPChannelState_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (PBAppendableArray *)linksAdd {
  return result.linksAddArray;
}
- (uint32_t)linksAddAtIndex:(NSUInteger)index {
  return [result linksAddAtIndex:index];
}
- (MPChannelState_Builder *)addLinksAdd:(uint32_t)value {
  if (result.linksAddArray == nil) {
    result.linksAddArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.linksAddArray addUint32:value];
  return self;
}
- (MPChannelState_Builder *)setLinksAddArray:(NSArray *)array {
  result.linksAddArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPChannelState_Builder *)setLinksAddValues:(const uint32_t *)values count:(NSUInteger)count {
  result.linksAddArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPChannelState_Builder *)clearLinksAdd {
  result.linksAddArray = nil;
  return self;
}
- (PBAppendableArray *)linksRemove {
  return result.linksRemoveArray;
}
- (uint32_t)linksRemoveAtIndex:(NSUInteger)index {
  return [result linksRemoveAtIndex:index];
}
- (MPChannelState_Builder *)addLinksRemove:(uint32_t)value {
  if (result.linksRemoveArray == nil) {
    result.linksRemoveArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.linksRemoveArray addUint32:value];
  return self;
}
- (MPChannelState_Builder *)setLinksRemoveArray:(NSArray *)array {
  result.linksRemoveArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPChannelState_Builder *)setLinksRemoveValues:(const uint32_t *)values count:(NSUInteger)count {
  result.linksRemoveArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPChannelState_Builder *)clearLinksRemove {
  result.linksRemoveArray = nil;
  return self;
}
- (BOOL) hasTemporary {
  return result.hasTemporary;
}
- (BOOL) temporary {
  return result.temporary;
}
- (MPChannelState_Builder*) setTemporary:(BOOL) value {
  result.hasTemporary = YES;
  result.temporary = value;
  return self;
}
- (MPChannelState_Builder*) clearTemporary {
  result.hasTemporary = NO;
  result.temporary = NO;
  return self;
}
- (BOOL) hasPosition {
  return result.hasPosition;
}
- (int32_t) position {
  return result.position;
}
- (MPChannelState_Builder*) setPosition:(int32_t) value {
  result.hasPosition = YES;
  result.position = value;
  return self;
}
- (MPChannelState_Builder*) clearPosition {
  result.hasPosition = NO;
  result.position = 0;
  return self;
}
- (BOOL) hasDescriptionHash {
  return result.hasDescriptionHash;
}
- (NSData*) descriptionHash {
  return result.descriptionHash;
}
- (MPChannelState_Builder*) setDescriptionHash:(NSData*) value {
  result.hasDescriptionHash = YES;
  result.descriptionHash = value;
  return self;
}
- (MPChannelState_Builder*) clearDescriptionHash {
  result.hasDescriptionHash = NO;
  result.descriptionHash = [NSData data];
  return self;
}
@end

@interface MPUserRemove ()
@property uint32_t session;
@property uint32_t actor;
@property (retain) NSString* reason;
@property BOOL ban;
@end

@implementation MPUserRemove

- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) value {
  hasSession_ = !!value;
}
@synthesize session;
- (BOOL) hasActor {
  return !!hasActor_;
}
- (void) setHasActor:(BOOL) value {
  hasActor_ = !!value;
}
@synthesize actor;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) value {
  hasReason_ = !!value;
}
@synthesize reason;
- (BOOL) hasBan {
  return !!hasBan_;
}
- (void) setHasBan:(BOOL) value {
  hasBan_ = !!value;
}
- (BOOL) ban {
  return !!ban_;
}
- (void) setBan:(BOOL) value {
  ban_ = !!value;
}
- (void) dealloc {
  self.reason = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.session = 0;
    self.actor = 0;
    self.reason = @"";
    self.ban = NO;
  }
  return self;
}
static MPUserRemove* defaultMPUserRemoveInstance = nil;
+ (void) initialize {
  if (self == [MPUserRemove class]) {
    defaultMPUserRemoveInstance = [[MPUserRemove alloc] init];
  }
}
+ (MPUserRemove*) defaultInstance {
  return defaultMPUserRemoveInstance;
}
- (MPUserRemove*) defaultInstance {
  return defaultMPUserRemoveInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSession) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSession) {
    [output writeUInt32:1 value:self.session];
  }
  if (self.hasActor) {
    [output writeUInt32:2 value:self.actor];
  }
  if (self.hasReason) {
    [output writeString:3 value:self.reason];
  }
  if (self.hasBan) {
    [output writeBool:4 value:self.ban];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSession) {
    size += computeUInt32Size(1, self.session);
  }
  if (self.hasActor) {
    size += computeUInt32Size(2, self.actor);
  }
  if (self.hasReason) {
    size += computeStringSize(3, self.reason);
  }
  if (self.hasBan) {
    size += computeBoolSize(4, self.ban);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPUserRemove*) parseFromData:(NSData*) data {
  return (MPUserRemove*)[[[MPUserRemove builder] mergeFromData:data] build];
}
+ (MPUserRemove*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserRemove*)[[[MPUserRemove builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUserRemove*) parseFromInputStream:(NSInputStream*) input {
  return (MPUserRemove*)[[[MPUserRemove builder] mergeFromInputStream:input] build];
}
+ (MPUserRemove*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserRemove*)[[[MPUserRemove builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserRemove*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUserRemove*)[[[MPUserRemove builder] mergeFromCodedInputStream:input] build];
}
+ (MPUserRemove*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserRemove*)[[[MPUserRemove builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserRemove_Builder*) builder {
  return [[[MPUserRemove_Builder alloc] init] autorelease];
}
+ (MPUserRemove_Builder*) builderWithPrototype:(MPUserRemove*) prototype {
  return [[MPUserRemove builder] mergeFrom:prototype];
}
- (MPUserRemove_Builder*) builder {
  return [MPUserRemove builder];
}
- (MPUserRemove_Builder*) toBuilder {
  return [MPUserRemove builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", [NSNumber numberWithInt:self.session]];
  }
  if (self.hasActor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actor", [NSNumber numberWithInt:self.actor]];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasBan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ban", [NSNumber numberWithBool:self.ban]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUserRemove class]]) {
    return NO;
  }
  MPUserRemove *otherMessage = other;
  return
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || self.session == otherMessage.session) &&
      self.hasActor == otherMessage.hasActor &&
      (!self.hasActor || self.actor == otherMessage.actor) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      self.hasBan == otherMessage.hasBan &&
      (!self.hasBan || self.ban == otherMessage.ban) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSession) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.session] hash];
  }
  if (self.hasActor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.actor] hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  if (self.hasBan) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.ban] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUserRemove_Builder()
@property (retain) MPUserRemove* result;
@end

@implementation MPUserRemove_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPUserRemove alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPUserRemove_Builder*) clear {
  self.result = [[[MPUserRemove alloc] init] autorelease];
  return self;
}
- (MPUserRemove_Builder*) clone {
  return [MPUserRemove builderWithPrototype:result];
}
- (MPUserRemove*) defaultInstance {
  return [MPUserRemove defaultInstance];
}
- (MPUserRemove*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUserRemove*) buildPartial {
  MPUserRemove* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPUserRemove_Builder*) mergeFrom:(MPUserRemove*) other {
  if (other == [MPUserRemove defaultInstance]) {
    return self;
  }
  if (other.hasSession) {
    [self setSession:other.session];
  }
  if (other.hasActor) {
    [self setActor:other.actor];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  if (other.hasBan) {
    [self setBan:other.ban];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUserRemove_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUserRemove_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSession:[input readUInt32]];
        break;
      }
      case 16: {
        [self setActor:[input readUInt32]];
        break;
      }
      case 26: {
        [self setReason:[input readString]];
        break;
      }
      case 32: {
        [self setBan:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSession {
  return result.hasSession;
}
- (uint32_t) session {
  return result.session;
}
- (MPUserRemove_Builder*) setSession:(uint32_t) value {
  result.hasSession = YES;
  result.session = value;
  return self;
}
- (MPUserRemove_Builder*) clearSession {
  result.hasSession = NO;
  result.session = 0;
  return self;
}
- (BOOL) hasActor {
  return result.hasActor;
}
- (uint32_t) actor {
  return result.actor;
}
- (MPUserRemove_Builder*) setActor:(uint32_t) value {
  result.hasActor = YES;
  result.actor = value;
  return self;
}
- (MPUserRemove_Builder*) clearActor {
  result.hasActor = NO;
  result.actor = 0;
  return self;
}
- (BOOL) hasReason {
  return result.hasReason;
}
- (NSString*) reason {
  return result.reason;
}
- (MPUserRemove_Builder*) setReason:(NSString*) value {
  result.hasReason = YES;
  result.reason = value;
  return self;
}
- (MPUserRemove_Builder*) clearReason {
  result.hasReason = NO;
  result.reason = @"";
  return self;
}
- (BOOL) hasBan {
  return result.hasBan;
}
- (BOOL) ban {
  return result.ban;
}
- (MPUserRemove_Builder*) setBan:(BOOL) value {
  result.hasBan = YES;
  result.ban = value;
  return self;
}
- (MPUserRemove_Builder*) clearBan {
  result.hasBan = NO;
  result.ban = NO;
  return self;
}
@end

@interface MPUserState ()
@property uint32_t session;
@property uint32_t actor;
@property (retain) NSString* name;
@property uint32_t userId;
@property uint32_t channelId;
@property BOOL mute;
@property BOOL deaf;
@property BOOL suppress;
@property BOOL selfMute;
@property BOOL selfDeaf;
@property (retain) NSData* texture;
@property (retain) NSData* pluginContext;
@property (retain) NSString* pluginIdentity;
@property (retain) NSString* comment;
@property (retain) NSString* certHash;
@property (retain) NSData* commentHash;
@property (retain) NSData* textureHash;
@property BOOL prioritySpeaker;
@property BOOL recording;
@end

@implementation MPUserState

- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) value {
  hasSession_ = !!value;
}
@synthesize session;
- (BOOL) hasActor {
  return !!hasActor_;
}
- (void) setHasActor:(BOOL) value {
  hasActor_ = !!value;
}
@synthesize actor;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value {
  hasChannelId_ = !!value;
}
@synthesize channelId;
- (BOOL) hasMute {
  return !!hasMute_;
}
- (void) setHasMute:(BOOL) value {
  hasMute_ = !!value;
}
- (BOOL) mute {
  return !!mute_;
}
- (void) setMute:(BOOL) value {
  mute_ = !!value;
}
- (BOOL) hasDeaf {
  return !!hasDeaf_;
}
- (void) setHasDeaf:(BOOL) value {
  hasDeaf_ = !!value;
}
- (BOOL) deaf {
  return !!deaf_;
}
- (void) setDeaf:(BOOL) value {
  deaf_ = !!value;
}
- (BOOL) hasSuppress {
  return !!hasSuppress_;
}
- (void) setHasSuppress:(BOOL) value {
  hasSuppress_ = !!value;
}
- (BOOL) suppress {
  return !!suppress_;
}
- (void) setSuppress:(BOOL) value {
  suppress_ = !!value;
}
- (BOOL) hasSelfMute {
  return !!hasSelfMute_;
}
- (void) setHasSelfMute:(BOOL) value {
  hasSelfMute_ = !!value;
}
- (BOOL) selfMute {
  return !!selfMute_;
}
- (void) setSelfMute:(BOOL) value {
  selfMute_ = !!value;
}
- (BOOL) hasSelfDeaf {
  return !!hasSelfDeaf_;
}
- (void) setHasSelfDeaf:(BOOL) value {
  hasSelfDeaf_ = !!value;
}
- (BOOL) selfDeaf {
  return !!selfDeaf_;
}
- (void) setSelfDeaf:(BOOL) value {
  selfDeaf_ = !!value;
}
- (BOOL) hasTexture {
  return !!hasTexture_;
}
- (void) setHasTexture:(BOOL) value {
  hasTexture_ = !!value;
}
@synthesize texture;
- (BOOL) hasPluginContext {
  return !!hasPluginContext_;
}
- (void) setHasPluginContext:(BOOL) value {
  hasPluginContext_ = !!value;
}
@synthesize pluginContext;
- (BOOL) hasPluginIdentity {
  return !!hasPluginIdentity_;
}
- (void) setHasPluginIdentity:(BOOL) value {
  hasPluginIdentity_ = !!value;
}
@synthesize pluginIdentity;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value {
  hasComment_ = !!value;
}
@synthesize comment;
- (BOOL) hasCertHash {
  return !!hasCertHash_;
}
- (void) setHasCertHash:(BOOL) value {
  hasCertHash_ = !!value;
}
@synthesize certHash;
- (BOOL) hasCommentHash {
  return !!hasCommentHash_;
}
- (void) setHasCommentHash:(BOOL) value {
  hasCommentHash_ = !!value;
}
@synthesize commentHash;
- (BOOL) hasTextureHash {
  return !!hasTextureHash_;
}
- (void) setHasTextureHash:(BOOL) value {
  hasTextureHash_ = !!value;
}
@synthesize textureHash;
- (BOOL) hasPrioritySpeaker {
  return !!hasPrioritySpeaker_;
}
- (void) setHasPrioritySpeaker:(BOOL) value {
  hasPrioritySpeaker_ = !!value;
}
- (BOOL) prioritySpeaker {
  return !!prioritySpeaker_;
}
- (void) setPrioritySpeaker:(BOOL) value {
  prioritySpeaker_ = !!value;
}
- (BOOL) hasRecording {
  return !!hasRecording_;
}
- (void) setHasRecording:(BOOL) value {
  hasRecording_ = !!value;
}
- (BOOL) recording {
  return !!recording_;
}
- (void) setRecording:(BOOL) value {
  recording_ = !!value;
}
- (void) dealloc {
  self.name = nil;
  self.texture = nil;
  self.pluginContext = nil;
  self.pluginIdentity = nil;
  self.comment = nil;
  self.certHash = nil;
  self.commentHash = nil;
  self.textureHash = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.session = 0;
    self.actor = 0;
    self.name = @"";
    self.userId = 0;
    self.channelId = 0;
    self.mute = NO;
    self.deaf = NO;
    self.suppress = NO;
    self.selfMute = NO;
    self.selfDeaf = NO;
    self.texture = [NSData data];
    self.pluginContext = [NSData data];
    self.pluginIdentity = @"";
    self.comment = @"";
    self.certHash = @"";
    self.commentHash = [NSData data];
    self.textureHash = [NSData data];
    self.prioritySpeaker = NO;
    self.recording = NO;
  }
  return self;
}
static MPUserState* defaultMPUserStateInstance = nil;
+ (void) initialize {
  if (self == [MPUserState class]) {
    defaultMPUserStateInstance = [[MPUserState alloc] init];
  }
}
+ (MPUserState*) defaultInstance {
  return defaultMPUserStateInstance;
}
- (MPUserState*) defaultInstance {
  return defaultMPUserStateInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSession) {
    [output writeUInt32:1 value:self.session];
  }
  if (self.hasActor) {
    [output writeUInt32:2 value:self.actor];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasUserId) {
    [output writeUInt32:4 value:self.userId];
  }
  if (self.hasChannelId) {
    [output writeUInt32:5 value:self.channelId];
  }
  if (self.hasMute) {
    [output writeBool:6 value:self.mute];
  }
  if (self.hasDeaf) {
    [output writeBool:7 value:self.deaf];
  }
  if (self.hasSuppress) {
    [output writeBool:8 value:self.suppress];
  }
  if (self.hasSelfMute) {
    [output writeBool:9 value:self.selfMute];
  }
  if (self.hasSelfDeaf) {
    [output writeBool:10 value:self.selfDeaf];
  }
  if (self.hasTexture) {
    [output writeData:11 value:self.texture];
  }
  if (self.hasPluginContext) {
    [output writeData:12 value:self.pluginContext];
  }
  if (self.hasPluginIdentity) {
    [output writeString:13 value:self.pluginIdentity];
  }
  if (self.hasComment) {
    [output writeString:14 value:self.comment];
  }
  if (self.hasCertHash) {
    [output writeString:15 value:self.certHash];
  }
  if (self.hasCommentHash) {
    [output writeData:16 value:self.commentHash];
  }
  if (self.hasTextureHash) {
    [output writeData:17 value:self.textureHash];
  }
  if (self.hasPrioritySpeaker) {
    [output writeBool:18 value:self.prioritySpeaker];
  }
  if (self.hasRecording) {
    [output writeBool:19 value:self.recording];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSession) {
    size += computeUInt32Size(1, self.session);
  }
  if (self.hasActor) {
    size += computeUInt32Size(2, self.actor);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasUserId) {
    size += computeUInt32Size(4, self.userId);
  }
  if (self.hasChannelId) {
    size += computeUInt32Size(5, self.channelId);
  }
  if (self.hasMute) {
    size += computeBoolSize(6, self.mute);
  }
  if (self.hasDeaf) {
    size += computeBoolSize(7, self.deaf);
  }
  if (self.hasSuppress) {
    size += computeBoolSize(8, self.suppress);
  }
  if (self.hasSelfMute) {
    size += computeBoolSize(9, self.selfMute);
  }
  if (self.hasSelfDeaf) {
    size += computeBoolSize(10, self.selfDeaf);
  }
  if (self.hasTexture) {
    size += computeDataSize(11, self.texture);
  }
  if (self.hasPluginContext) {
    size += computeDataSize(12, self.pluginContext);
  }
  if (self.hasPluginIdentity) {
    size += computeStringSize(13, self.pluginIdentity);
  }
  if (self.hasComment) {
    size += computeStringSize(14, self.comment);
  }
  if (self.hasCertHash) {
    size += computeStringSize(15, self.certHash);
  }
  if (self.hasCommentHash) {
    size += computeDataSize(16, self.commentHash);
  }
  if (self.hasTextureHash) {
    size += computeDataSize(17, self.textureHash);
  }
  if (self.hasPrioritySpeaker) {
    size += computeBoolSize(18, self.prioritySpeaker);
  }
  if (self.hasRecording) {
    size += computeBoolSize(19, self.recording);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPUserState*) parseFromData:(NSData*) data {
  return (MPUserState*)[[[MPUserState builder] mergeFromData:data] build];
}
+ (MPUserState*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserState*)[[[MPUserState builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUserState*) parseFromInputStream:(NSInputStream*) input {
  return (MPUserState*)[[[MPUserState builder] mergeFromInputStream:input] build];
}
+ (MPUserState*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserState*)[[[MPUserState builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserState*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUserState*)[[[MPUserState builder] mergeFromCodedInputStream:input] build];
}
+ (MPUserState*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserState*)[[[MPUserState builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserState_Builder*) builder {
  return [[[MPUserState_Builder alloc] init] autorelease];
}
+ (MPUserState_Builder*) builderWithPrototype:(MPUserState*) prototype {
  return [[MPUserState builder] mergeFrom:prototype];
}
- (MPUserState_Builder*) builder {
  return [MPUserState builder];
}
- (MPUserState_Builder*) toBuilder {
  return [MPUserState builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", [NSNumber numberWithInt:self.session]];
  }
  if (self.hasActor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actor", [NSNumber numberWithInt:self.actor]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInt:self.userId]];
  }
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInt:self.channelId]];
  }
  if (self.hasMute) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mute", [NSNumber numberWithBool:self.mute]];
  }
  if (self.hasDeaf) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deaf", [NSNumber numberWithBool:self.deaf]];
  }
  if (self.hasSuppress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"suppress", [NSNumber numberWithBool:self.suppress]];
  }
  if (self.hasSelfMute) {
    [output appendFormat:@"%@%@: %@\n", indent, @"selfMute", [NSNumber numberWithBool:self.selfMute]];
  }
  if (self.hasSelfDeaf) {
    [output appendFormat:@"%@%@: %@\n", indent, @"selfDeaf", [NSNumber numberWithBool:self.selfDeaf]];
  }
  if (self.hasTexture) {
    [output appendFormat:@"%@%@: %@\n", indent, @"texture", self.texture];
  }
  if (self.hasPluginContext) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pluginContext", self.pluginContext];
  }
  if (self.hasPluginIdentity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pluginIdentity", self.pluginIdentity];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasCertHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"certHash", self.certHash];
  }
  if (self.hasCommentHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"commentHash", self.commentHash];
  }
  if (self.hasTextureHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"textureHash", self.textureHash];
  }
  if (self.hasPrioritySpeaker) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prioritySpeaker", [NSNumber numberWithBool:self.prioritySpeaker]];
  }
  if (self.hasRecording) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recording", [NSNumber numberWithBool:self.recording]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUserState class]]) {
    return NO;
  }
  MPUserState *otherMessage = other;
  return
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || self.session == otherMessage.session) &&
      self.hasActor == otherMessage.hasActor &&
      (!self.hasActor || self.actor == otherMessage.actor) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasMute == otherMessage.hasMute &&
      (!self.hasMute || self.mute == otherMessage.mute) &&
      self.hasDeaf == otherMessage.hasDeaf &&
      (!self.hasDeaf || self.deaf == otherMessage.deaf) &&
      self.hasSuppress == otherMessage.hasSuppress &&
      (!self.hasSuppress || self.suppress == otherMessage.suppress) &&
      self.hasSelfMute == otherMessage.hasSelfMute &&
      (!self.hasSelfMute || self.selfMute == otherMessage.selfMute) &&
      self.hasSelfDeaf == otherMessage.hasSelfDeaf &&
      (!self.hasSelfDeaf || self.selfDeaf == otherMessage.selfDeaf) &&
      self.hasTexture == otherMessage.hasTexture &&
      (!self.hasTexture || [self.texture isEqual:otherMessage.texture]) &&
      self.hasPluginContext == otherMessage.hasPluginContext &&
      (!self.hasPluginContext || [self.pluginContext isEqual:otherMessage.pluginContext]) &&
      self.hasPluginIdentity == otherMessage.hasPluginIdentity &&
      (!self.hasPluginIdentity || [self.pluginIdentity isEqual:otherMessage.pluginIdentity]) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasCertHash == otherMessage.hasCertHash &&
      (!self.hasCertHash || [self.certHash isEqual:otherMessage.certHash]) &&
      self.hasCommentHash == otherMessage.hasCommentHash &&
      (!self.hasCommentHash || [self.commentHash isEqual:otherMessage.commentHash]) &&
      self.hasTextureHash == otherMessage.hasTextureHash &&
      (!self.hasTextureHash || [self.textureHash isEqual:otherMessage.textureHash]) &&
      self.hasPrioritySpeaker == otherMessage.hasPrioritySpeaker &&
      (!self.hasPrioritySpeaker || self.prioritySpeaker == otherMessage.prioritySpeaker) &&
      self.hasRecording == otherMessage.hasRecording &&
      (!self.hasRecording || self.recording == otherMessage.recording) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSession) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.session] hash];
  }
  if (self.hasActor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.actor] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.userId] hash];
  }
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.channelId] hash];
  }
  if (self.hasMute) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.mute] hash];
  }
  if (self.hasDeaf) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.deaf] hash];
  }
  if (self.hasSuppress) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.suppress] hash];
  }
  if (self.hasSelfMute) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.selfMute] hash];
  }
  if (self.hasSelfDeaf) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.selfDeaf] hash];
  }
  if (self.hasTexture) {
    hashCode = hashCode * 31 + [self.texture hash];
  }
  if (self.hasPluginContext) {
    hashCode = hashCode * 31 + [self.pluginContext hash];
  }
  if (self.hasPluginIdentity) {
    hashCode = hashCode * 31 + [self.pluginIdentity hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasCertHash) {
    hashCode = hashCode * 31 + [self.certHash hash];
  }
  if (self.hasCommentHash) {
    hashCode = hashCode * 31 + [self.commentHash hash];
  }
  if (self.hasTextureHash) {
    hashCode = hashCode * 31 + [self.textureHash hash];
  }
  if (self.hasPrioritySpeaker) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.prioritySpeaker] hash];
  }
  if (self.hasRecording) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.recording] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUserState_Builder()
@property (retain) MPUserState* result;
@end

@implementation MPUserState_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPUserState alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPUserState_Builder*) clear {
  self.result = [[[MPUserState alloc] init] autorelease];
  return self;
}
- (MPUserState_Builder*) clone {
  return [MPUserState builderWithPrototype:result];
}
- (MPUserState*) defaultInstance {
  return [MPUserState defaultInstance];
}
- (MPUserState*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUserState*) buildPartial {
  MPUserState* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPUserState_Builder*) mergeFrom:(MPUserState*) other {
  if (other == [MPUserState defaultInstance]) {
    return self;
  }
  if (other.hasSession) {
    [self setSession:other.session];
  }
  if (other.hasActor) {
    [self setActor:other.actor];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasMute) {
    [self setMute:other.mute];
  }
  if (other.hasDeaf) {
    [self setDeaf:other.deaf];
  }
  if (other.hasSuppress) {
    [self setSuppress:other.suppress];
  }
  if (other.hasSelfMute) {
    [self setSelfMute:other.selfMute];
  }
  if (other.hasSelfDeaf) {
    [self setSelfDeaf:other.selfDeaf];
  }
  if (other.hasTexture) {
    [self setTexture:other.texture];
  }
  if (other.hasPluginContext) {
    [self setPluginContext:other.pluginContext];
  }
  if (other.hasPluginIdentity) {
    [self setPluginIdentity:other.pluginIdentity];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasCertHash) {
    [self setCertHash:other.certHash];
  }
  if (other.hasCommentHash) {
    [self setCommentHash:other.commentHash];
  }
  if (other.hasTextureHash) {
    [self setTextureHash:other.textureHash];
  }
  if (other.hasPrioritySpeaker) {
    [self setPrioritySpeaker:other.prioritySpeaker];
  }
  if (other.hasRecording) {
    [self setRecording:other.recording];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUserState_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUserState_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSession:[input readUInt32]];
        break;
      }
      case 16: {
        [self setActor:[input readUInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 40: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 48: {
        [self setMute:[input readBool]];
        break;
      }
      case 56: {
        [self setDeaf:[input readBool]];
        break;
      }
      case 64: {
        [self setSuppress:[input readBool]];
        break;
      }
      case 72: {
        [self setSelfMute:[input readBool]];
        break;
      }
      case 80: {
        [self setSelfDeaf:[input readBool]];
        break;
      }
      case 90: {
        [self setTexture:[input readData]];
        break;
      }
      case 98: {
        [self setPluginContext:[input readData]];
        break;
      }
      case 106: {
        [self setPluginIdentity:[input readString]];
        break;
      }
      case 114: {
        [self setComment:[input readString]];
        break;
      }
      case 122: {
        [self setCertHash:[input readString]];
        break;
      }
      case 130: {
        [self setCommentHash:[input readData]];
        break;
      }
      case 138: {
        [self setTextureHash:[input readData]];
        break;
      }
      case 144: {
        [self setPrioritySpeaker:[input readBool]];
        break;
      }
      case 152: {
        [self setRecording:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSession {
  return result.hasSession;
}
- (uint32_t) session {
  return result.session;
}
- (MPUserState_Builder*) setSession:(uint32_t) value {
  result.hasSession = YES;
  result.session = value;
  return self;
}
- (MPUserState_Builder*) clearSession {
  result.hasSession = NO;
  result.session = 0;
  return self;
}
- (BOOL) hasActor {
  return result.hasActor;
}
- (uint32_t) actor {
  return result.actor;
}
- (MPUserState_Builder*) setActor:(uint32_t) value {
  result.hasActor = YES;
  result.actor = value;
  return self;
}
- (MPUserState_Builder*) clearActor {
  result.hasActor = NO;
  result.actor = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MPUserState_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MPUserState_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (uint32_t) userId {
  return result.userId;
}
- (MPUserState_Builder*) setUserId:(uint32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (MPUserState_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasChannelId {
  return result.hasChannelId;
}
- (uint32_t) channelId {
  return result.channelId;
}
- (MPUserState_Builder*) setChannelId:(uint32_t) value {
  result.hasChannelId = YES;
  result.channelId = value;
  return self;
}
- (MPUserState_Builder*) clearChannelId {
  result.hasChannelId = NO;
  result.channelId = 0;
  return self;
}
- (BOOL) hasMute {
  return result.hasMute;
}
- (BOOL) mute {
  return result.mute;
}
- (MPUserState_Builder*) setMute:(BOOL) value {
  result.hasMute = YES;
  result.mute = value;
  return self;
}
- (MPUserState_Builder*) clearMute {
  result.hasMute = NO;
  result.mute = NO;
  return self;
}
- (BOOL) hasDeaf {
  return result.hasDeaf;
}
- (BOOL) deaf {
  return result.deaf;
}
- (MPUserState_Builder*) setDeaf:(BOOL) value {
  result.hasDeaf = YES;
  result.deaf = value;
  return self;
}
- (MPUserState_Builder*) clearDeaf {
  result.hasDeaf = NO;
  result.deaf = NO;
  return self;
}
- (BOOL) hasSuppress {
  return result.hasSuppress;
}
- (BOOL) suppress {
  return result.suppress;
}
- (MPUserState_Builder*) setSuppress:(BOOL) value {
  result.hasSuppress = YES;
  result.suppress = value;
  return self;
}
- (MPUserState_Builder*) clearSuppress {
  result.hasSuppress = NO;
  result.suppress = NO;
  return self;
}
- (BOOL) hasSelfMute {
  return result.hasSelfMute;
}
- (BOOL) selfMute {
  return result.selfMute;
}
- (MPUserState_Builder*) setSelfMute:(BOOL) value {
  result.hasSelfMute = YES;
  result.selfMute = value;
  return self;
}
- (MPUserState_Builder*) clearSelfMute {
  result.hasSelfMute = NO;
  result.selfMute = NO;
  return self;
}
- (BOOL) hasSelfDeaf {
  return result.hasSelfDeaf;
}
- (BOOL) selfDeaf {
  return result.selfDeaf;
}
- (MPUserState_Builder*) setSelfDeaf:(BOOL) value {
  result.hasSelfDeaf = YES;
  result.selfDeaf = value;
  return self;
}
- (MPUserState_Builder*) clearSelfDeaf {
  result.hasSelfDeaf = NO;
  result.selfDeaf = NO;
  return self;
}
- (BOOL) hasTexture {
  return result.hasTexture;
}
- (NSData*) texture {
  return result.texture;
}
- (MPUserState_Builder*) setTexture:(NSData*) value {
  result.hasTexture = YES;
  result.texture = value;
  return self;
}
- (MPUserState_Builder*) clearTexture {
  result.hasTexture = NO;
  result.texture = [NSData data];
  return self;
}
- (BOOL) hasPluginContext {
  return result.hasPluginContext;
}
- (NSData*) pluginContext {
  return result.pluginContext;
}
- (MPUserState_Builder*) setPluginContext:(NSData*) value {
  result.hasPluginContext = YES;
  result.pluginContext = value;
  return self;
}
- (MPUserState_Builder*) clearPluginContext {
  result.hasPluginContext = NO;
  result.pluginContext = [NSData data];
  return self;
}
- (BOOL) hasPluginIdentity {
  return result.hasPluginIdentity;
}
- (NSString*) pluginIdentity {
  return result.pluginIdentity;
}
- (MPUserState_Builder*) setPluginIdentity:(NSString*) value {
  result.hasPluginIdentity = YES;
  result.pluginIdentity = value;
  return self;
}
- (MPUserState_Builder*) clearPluginIdentity {
  result.hasPluginIdentity = NO;
  result.pluginIdentity = @"";
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (MPUserState_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (MPUserState_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasCertHash {
  return result.hasCertHash;
}
- (NSString*) certHash {
  return result.certHash;
}
- (MPUserState_Builder*) setCertHash:(NSString*) value {
  result.hasCertHash = YES;
  result.certHash = value;
  return self;
}
- (MPUserState_Builder*) clearCertHash {
  result.hasCertHash = NO;
  result.certHash = @"";
  return self;
}
- (BOOL) hasCommentHash {
  return result.hasCommentHash;
}
- (NSData*) commentHash {
  return result.commentHash;
}
- (MPUserState_Builder*) setCommentHash:(NSData*) value {
  result.hasCommentHash = YES;
  result.commentHash = value;
  return self;
}
- (MPUserState_Builder*) clearCommentHash {
  result.hasCommentHash = NO;
  result.commentHash = [NSData data];
  return self;
}
- (BOOL) hasTextureHash {
  return result.hasTextureHash;
}
- (NSData*) textureHash {
  return result.textureHash;
}
- (MPUserState_Builder*) setTextureHash:(NSData*) value {
  result.hasTextureHash = YES;
  result.textureHash = value;
  return self;
}
- (MPUserState_Builder*) clearTextureHash {
  result.hasTextureHash = NO;
  result.textureHash = [NSData data];
  return self;
}
- (BOOL) hasPrioritySpeaker {
  return result.hasPrioritySpeaker;
}
- (BOOL) prioritySpeaker {
  return result.prioritySpeaker;
}
- (MPUserState_Builder*) setPrioritySpeaker:(BOOL) value {
  result.hasPrioritySpeaker = YES;
  result.prioritySpeaker = value;
  return self;
}
- (MPUserState_Builder*) clearPrioritySpeaker {
  result.hasPrioritySpeaker = NO;
  result.prioritySpeaker = NO;
  return self;
}
- (BOOL) hasRecording {
  return result.hasRecording;
}
- (BOOL) recording {
  return result.recording;
}
- (MPUserState_Builder*) setRecording:(BOOL) value {
  result.hasRecording = YES;
  result.recording = value;
  return self;
}
- (MPUserState_Builder*) clearRecording {
  result.hasRecording = NO;
  result.recording = NO;
  return self;
}
@end

@interface MPBanList ()
@property (retain) PBAppendableArray * bansArray;
@property BOOL query;
@end

@implementation MPBanList

@synthesize bansArray;
@dynamic bans;
- (BOOL) hasQuery {
  return !!hasQuery_;
}
- (void) setHasQuery:(BOOL) value {
  hasQuery_ = !!value;
}
- (BOOL) query {
  return !!query_;
}
- (void) setQuery:(BOOL) value {
  query_ = !!value;
}
- (void) dealloc {
  self.bansArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.query = NO;
  }
  return self;
}
static MPBanList* defaultMPBanListInstance = nil;
+ (void) initialize {
  if (self == [MPBanList class]) {
    defaultMPBanListInstance = [[MPBanList alloc] init];
  }
}
+ (MPBanList*) defaultInstance {
  return defaultMPBanListInstance;
}
- (MPBanList*) defaultInstance {
  return defaultMPBanListInstance;
}
- (PBArray *)bans {
  return bansArray;
}
- (MPBanList_BanEntry*)bansAtIndex:(NSUInteger)index {
  return [bansArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  for (MPBanList_BanEntry* element in self.bans) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MPBanList_BanEntry *element in self.bansArray) {
    [output writeMessage:1 value:element];
  }
  if (self.hasQuery) {
    [output writeBool:2 value:self.query];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MPBanList_BanEntry *element in self.bansArray) {
    size += computeMessageSize(1, element);
  }
  if (self.hasQuery) {
    size += computeBoolSize(2, self.query);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPBanList*) parseFromData:(NSData*) data {
  return (MPBanList*)[[[MPBanList builder] mergeFromData:data] build];
}
+ (MPBanList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPBanList*)[[[MPBanList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPBanList*) parseFromInputStream:(NSInputStream*) input {
  return (MPBanList*)[[[MPBanList builder] mergeFromInputStream:input] build];
}
+ (MPBanList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPBanList*)[[[MPBanList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPBanList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPBanList*)[[[MPBanList builder] mergeFromCodedInputStream:input] build];
}
+ (MPBanList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPBanList*)[[[MPBanList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPBanList_Builder*) builder {
  return [[[MPBanList_Builder alloc] init] autorelease];
}
+ (MPBanList_Builder*) builderWithPrototype:(MPBanList*) prototype {
  return [[MPBanList builder] mergeFrom:prototype];
}
- (MPBanList_Builder*) builder {
  return [MPBanList builder];
}
- (MPBanList_Builder*) toBuilder {
  return [MPBanList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (MPBanList_BanEntry* element in self.bansArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"bans"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"query", [NSNumber numberWithBool:self.query]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPBanList class]]) {
    return NO;
  }
  MPBanList *otherMessage = other;
  return
      [self.bansArray isEqualToArray:otherMessage.bansArray] &&
      self.hasQuery == otherMessage.hasQuery &&
      (!self.hasQuery || self.query == otherMessage.query) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (MPBanList_BanEntry* element in self.bansArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasQuery) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.query] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPBanList_BanEntry ()
@property (retain) NSData* address;
@property uint32_t mask;
@property (retain) NSString* name;
@property (retain) NSString* certHash;
@property (retain) NSString* reason;
@property (retain) NSString* start;
@property uint32_t duration;
@end

@implementation MPBanList_BanEntry

- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) value {
  hasAddress_ = !!value;
}
@synthesize address;
- (BOOL) hasMask {
  return !!hasMask_;
}
- (void) setHasMask:(BOOL) value {
  hasMask_ = !!value;
}
@synthesize mask;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasCertHash {
  return !!hasCertHash_;
}
- (void) setHasCertHash:(BOOL) value {
  hasCertHash_ = !!value;
}
@synthesize certHash;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) value {
  hasReason_ = !!value;
}
@synthesize reason;
- (BOOL) hasStart {
  return !!hasStart_;
}
- (void) setHasStart:(BOOL) value {
  hasStart_ = !!value;
}
@synthesize start;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value {
  hasDuration_ = !!value;
}
@synthesize duration;
- (void) dealloc {
  self.address = nil;
  self.name = nil;
  self.certHash = nil;
  self.reason = nil;
  self.start = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.address = [NSData data];
    self.mask = 0;
    self.name = @"";
    self.certHash = @"";
    self.reason = @"";
    self.start = @"";
    self.duration = 0;
  }
  return self;
}
static MPBanList_BanEntry* defaultMPBanList_BanEntryInstance = nil;
+ (void) initialize {
  if (self == [MPBanList_BanEntry class]) {
    defaultMPBanList_BanEntryInstance = [[MPBanList_BanEntry alloc] init];
  }
}
+ (MPBanList_BanEntry*) defaultInstance {
  return defaultMPBanList_BanEntryInstance;
}
- (MPBanList_BanEntry*) defaultInstance {
  return defaultMPBanList_BanEntryInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAddress) {
    return NO;
  }
  if (!self.hasMask) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAddress) {
    [output writeData:1 value:self.address];
  }
  if (self.hasMask) {
    [output writeUInt32:2 value:self.mask];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasCertHash) {
    [output writeString:4 value:self.certHash];
  }
  if (self.hasReason) {
    [output writeString:5 value:self.reason];
  }
  if (self.hasStart) {
    [output writeString:6 value:self.start];
  }
  if (self.hasDuration) {
    [output writeUInt32:7 value:self.duration];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAddress) {
    size += computeDataSize(1, self.address);
  }
  if (self.hasMask) {
    size += computeUInt32Size(2, self.mask);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasCertHash) {
    size += computeStringSize(4, self.certHash);
  }
  if (self.hasReason) {
    size += computeStringSize(5, self.reason);
  }
  if (self.hasStart) {
    size += computeStringSize(6, self.start);
  }
  if (self.hasDuration) {
    size += computeUInt32Size(7, self.duration);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPBanList_BanEntry*) parseFromData:(NSData*) data {
  return (MPBanList_BanEntry*)[[[MPBanList_BanEntry builder] mergeFromData:data] build];
}
+ (MPBanList_BanEntry*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPBanList_BanEntry*)[[[MPBanList_BanEntry builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPBanList_BanEntry*) parseFromInputStream:(NSInputStream*) input {
  return (MPBanList_BanEntry*)[[[MPBanList_BanEntry builder] mergeFromInputStream:input] build];
}
+ (MPBanList_BanEntry*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPBanList_BanEntry*)[[[MPBanList_BanEntry builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPBanList_BanEntry*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPBanList_BanEntry*)[[[MPBanList_BanEntry builder] mergeFromCodedInputStream:input] build];
}
+ (MPBanList_BanEntry*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPBanList_BanEntry*)[[[MPBanList_BanEntry builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPBanList_BanEntry_Builder*) builder {
  return [[[MPBanList_BanEntry_Builder alloc] init] autorelease];
}
+ (MPBanList_BanEntry_Builder*) builderWithPrototype:(MPBanList_BanEntry*) prototype {
  return [[MPBanList_BanEntry builder] mergeFrom:prototype];
}
- (MPBanList_BanEntry_Builder*) builder {
  return [MPBanList_BanEntry builder];
}
- (MPBanList_BanEntry_Builder*) toBuilder {
  return [MPBanList_BanEntry builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"address", self.address];
  }
  if (self.hasMask) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mask", [NSNumber numberWithInt:self.mask]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasCertHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"certHash", self.certHash];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasStart) {
    [output appendFormat:@"%@%@: %@\n", indent, @"start", self.start];
  }
  if (self.hasDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duration", [NSNumber numberWithInt:self.duration]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPBanList_BanEntry class]]) {
    return NO;
  }
  MPBanList_BanEntry *otherMessage = other;
  return
      self.hasAddress == otherMessage.hasAddress &&
      (!self.hasAddress || [self.address isEqual:otherMessage.address]) &&
      self.hasMask == otherMessage.hasMask &&
      (!self.hasMask || self.mask == otherMessage.mask) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasCertHash == otherMessage.hasCertHash &&
      (!self.hasCertHash || [self.certHash isEqual:otherMessage.certHash]) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      self.hasStart == otherMessage.hasStart &&
      (!self.hasStart || [self.start isEqual:otherMessage.start]) &&
      self.hasDuration == otherMessage.hasDuration &&
      (!self.hasDuration || self.duration == otherMessage.duration) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAddress) {
    hashCode = hashCode * 31 + [self.address hash];
  }
  if (self.hasMask) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.mask] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasCertHash) {
    hashCode = hashCode * 31 + [self.certHash hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  if (self.hasStart) {
    hashCode = hashCode * 31 + [self.start hash];
  }
  if (self.hasDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.duration] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPBanList_BanEntry_Builder()
@property (retain) MPBanList_BanEntry* result;
@end

@implementation MPBanList_BanEntry_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPBanList_BanEntry alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPBanList_BanEntry_Builder*) clear {
  self.result = [[[MPBanList_BanEntry alloc] init] autorelease];
  return self;
}
- (MPBanList_BanEntry_Builder*) clone {
  return [MPBanList_BanEntry builderWithPrototype:result];
}
- (MPBanList_BanEntry*) defaultInstance {
  return [MPBanList_BanEntry defaultInstance];
}
- (MPBanList_BanEntry*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPBanList_BanEntry*) buildPartial {
  MPBanList_BanEntry* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPBanList_BanEntry_Builder*) mergeFrom:(MPBanList_BanEntry*) other {
  if (other == [MPBanList_BanEntry defaultInstance]) {
    return self;
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.hasMask) {
    [self setMask:other.mask];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCertHash) {
    [self setCertHash:other.certHash];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  if (other.hasStart) {
    [self setStart:other.start];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPBanList_BanEntry_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPBanList_BanEntry_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAddress:[input readData]];
        break;
      }
      case 16: {
        [self setMask:[input readUInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setCertHash:[input readString]];
        break;
      }
      case 42: {
        [self setReason:[input readString]];
        break;
      }
      case 50: {
        [self setStart:[input readString]];
        break;
      }
      case 56: {
        [self setDuration:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAddress {
  return result.hasAddress;
}
- (NSData*) address {
  return result.address;
}
- (MPBanList_BanEntry_Builder*) setAddress:(NSData*) value {
  result.hasAddress = YES;
  result.address = value;
  return self;
}
- (MPBanList_BanEntry_Builder*) clearAddress {
  result.hasAddress = NO;
  result.address = [NSData data];
  return self;
}
- (BOOL) hasMask {
  return result.hasMask;
}
- (uint32_t) mask {
  return result.mask;
}
- (MPBanList_BanEntry_Builder*) setMask:(uint32_t) value {
  result.hasMask = YES;
  result.mask = value;
  return self;
}
- (MPBanList_BanEntry_Builder*) clearMask {
  result.hasMask = NO;
  result.mask = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MPBanList_BanEntry_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MPBanList_BanEntry_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasCertHash {
  return result.hasCertHash;
}
- (NSString*) certHash {
  return result.certHash;
}
- (MPBanList_BanEntry_Builder*) setCertHash:(NSString*) value {
  result.hasCertHash = YES;
  result.certHash = value;
  return self;
}
- (MPBanList_BanEntry_Builder*) clearCertHash {
  result.hasCertHash = NO;
  result.certHash = @"";
  return self;
}
- (BOOL) hasReason {
  return result.hasReason;
}
- (NSString*) reason {
  return result.reason;
}
- (MPBanList_BanEntry_Builder*) setReason:(NSString*) value {
  result.hasReason = YES;
  result.reason = value;
  return self;
}
- (MPBanList_BanEntry_Builder*) clearReason {
  result.hasReason = NO;
  result.reason = @"";
  return self;
}
- (BOOL) hasStart {
  return result.hasStart;
}
- (NSString*) start {
  return result.start;
}
- (MPBanList_BanEntry_Builder*) setStart:(NSString*) value {
  result.hasStart = YES;
  result.start = value;
  return self;
}
- (MPBanList_BanEntry_Builder*) clearStart {
  result.hasStart = NO;
  result.start = @"";
  return self;
}
- (BOOL) hasDuration {
  return result.hasDuration;
}
- (uint32_t) duration {
  return result.duration;
}
- (MPBanList_BanEntry_Builder*) setDuration:(uint32_t) value {
  result.hasDuration = YES;
  result.duration = value;
  return self;
}
- (MPBanList_BanEntry_Builder*) clearDuration {
  result.hasDuration = NO;
  result.duration = 0;
  return self;
}
@end

@interface MPBanList_Builder()
@property (retain) MPBanList* result;
@end

@implementation MPBanList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPBanList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPBanList_Builder*) clear {
  self.result = [[[MPBanList alloc] init] autorelease];
  return self;
}
- (MPBanList_Builder*) clone {
  return [MPBanList builderWithPrototype:result];
}
- (MPBanList*) defaultInstance {
  return [MPBanList defaultInstance];
}
- (MPBanList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPBanList*) buildPartial {
  MPBanList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPBanList_Builder*) mergeFrom:(MPBanList*) other {
  if (other == [MPBanList defaultInstance]) {
    return self;
  }
  if (other.bansArray.count > 0) {
    if (result.bansArray == nil) {
      result.bansArray = [[other.bansArray copyWithZone:[other.bansArray zone]] autorelease];
    } else {
      [result.bansArray appendArray:other.bansArray];
    }
  }
  if (other.hasQuery) {
    [self setQuery:other.query];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPBanList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPBanList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MPBanList_BanEntry_Builder* subBuilder = [MPBanList_BanEntry builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBans:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setQuery:[input readBool]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)bans {
  return result.bansArray;
}
- (MPBanList_BanEntry*)bansAtIndex:(NSUInteger)index {
  return [result bansAtIndex:index];
}
- (MPBanList_Builder *)addBans:(MPBanList_BanEntry*)value {
  if (result.bansArray == nil) {
    result.bansArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.bansArray addObject:value];
  return self;
}
- (MPBanList_Builder *)setBansArray:(NSArray *)array {
  result.bansArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MPBanList_Builder *)setBansValues:(const MPBanList_BanEntry* *)values count:(NSUInteger)count {
  result.bansArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MPBanList_Builder *)clearBans {
  result.bansArray = nil;
  return self;
}
- (BOOL) hasQuery {
  return result.hasQuery;
}
- (BOOL) query {
  return result.query;
}
- (MPBanList_Builder*) setQuery:(BOOL) value {
  result.hasQuery = YES;
  result.query = value;
  return self;
}
- (MPBanList_Builder*) clearQuery {
  result.hasQuery = NO;
  result.query = NO;
  return self;
}
@end

@interface MPTextMessage ()
@property uint32_t actor;
@property (retain) PBAppendableArray * sessionArray;
@property (retain) PBAppendableArray * channelIdArray;
@property (retain) PBAppendableArray * treeIdArray;
@property (retain) NSString* message;
@end

@implementation MPTextMessage

- (BOOL) hasActor {
  return !!hasActor_;
}
- (void) setHasActor:(BOOL) value {
  hasActor_ = !!value;
}
@synthesize actor;
@synthesize sessionArray;
@dynamic session;
@synthesize channelIdArray;
@dynamic channelId;
@synthesize treeIdArray;
@dynamic treeId;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) value {
  hasMessage_ = !!value;
}
@synthesize message;
- (void) dealloc {
  self.sessionArray = nil;
  self.channelIdArray = nil;
  self.treeIdArray = nil;
  self.message = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.actor = 0;
    self.message = @"";
  }
  return self;
}
static MPTextMessage* defaultMPTextMessageInstance = nil;
+ (void) initialize {
  if (self == [MPTextMessage class]) {
    defaultMPTextMessageInstance = [[MPTextMessage alloc] init];
  }
}
+ (MPTextMessage*) defaultInstance {
  return defaultMPTextMessageInstance;
}
- (MPTextMessage*) defaultInstance {
  return defaultMPTextMessageInstance;
}
- (PBArray *)session {
  return sessionArray;
}
- (uint32_t)sessionAtIndex:(NSUInteger)index {
  return [sessionArray uint32AtIndex:index];
}
- (PBArray *)channelId {
  return channelIdArray;
}
- (uint32_t)channelIdAtIndex:(NSUInteger)index {
  return [channelIdArray uint32AtIndex:index];
}
- (PBArray *)treeId {
  return treeIdArray;
}
- (uint32_t)treeIdAtIndex:(NSUInteger)index {
  return [treeIdArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasMessage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasActor) {
    [output writeUInt32:1 value:self.actor];
  }
  const NSUInteger sessionArrayCount = self.sessionArray.count;
  if (sessionArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.sessionArray.data;
    for (NSUInteger i = 0; i < sessionArrayCount; ++i) {
      [output writeUInt32:2 value:values[i]];
    }
  }
  const NSUInteger channelIdArrayCount = self.channelIdArray.count;
  if (channelIdArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.channelIdArray.data;
    for (NSUInteger i = 0; i < channelIdArrayCount; ++i) {
      [output writeUInt32:3 value:values[i]];
    }
  }
  const NSUInteger treeIdArrayCount = self.treeIdArray.count;
  if (treeIdArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.treeIdArray.data;
    for (NSUInteger i = 0; i < treeIdArrayCount; ++i) {
      [output writeUInt32:4 value:values[i]];
    }
  }
  if (self.hasMessage) {
    [output writeString:5 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasActor) {
    size += computeUInt32Size(1, self.actor);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.sessionArray.count;
    const uint32_t *values = (const uint32_t *)self.sessionArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.channelIdArray.count;
    const uint32_t *values = (const uint32_t *)self.channelIdArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.treeIdArray.count;
    const uint32_t *values = (const uint32_t *)self.treeIdArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  if (self.hasMessage) {
    size += computeStringSize(5, self.message);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPTextMessage*) parseFromData:(NSData*) data {
  return (MPTextMessage*)[[[MPTextMessage builder] mergeFromData:data] build];
}
+ (MPTextMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPTextMessage*)[[[MPTextMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPTextMessage*) parseFromInputStream:(NSInputStream*) input {
  return (MPTextMessage*)[[[MPTextMessage builder] mergeFromInputStream:input] build];
}
+ (MPTextMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPTextMessage*)[[[MPTextMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPTextMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPTextMessage*)[[[MPTextMessage builder] mergeFromCodedInputStream:input] build];
}
+ (MPTextMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPTextMessage*)[[[MPTextMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPTextMessage_Builder*) builder {
  return [[[MPTextMessage_Builder alloc] init] autorelease];
}
+ (MPTextMessage_Builder*) builderWithPrototype:(MPTextMessage*) prototype {
  return [[MPTextMessage builder] mergeFrom:prototype];
}
- (MPTextMessage_Builder*) builder {
  return [MPTextMessage builder];
}
- (MPTextMessage_Builder*) toBuilder {
  return [MPTextMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasActor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actor", [NSNumber numberWithInt:self.actor]];
  }
  for (NSNumber* value in self.sessionArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", value];
  }
  for (NSNumber* value in self.channelIdArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", value];
  }
  for (NSNumber* value in self.treeIdArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"treeId", value];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPTextMessage class]]) {
    return NO;
  }
  MPTextMessage *otherMessage = other;
  return
      self.hasActor == otherMessage.hasActor &&
      (!self.hasActor || self.actor == otherMessage.actor) &&
      [self.sessionArray isEqualToArray:otherMessage.sessionArray] &&
      [self.channelIdArray isEqualToArray:otherMessage.channelIdArray] &&
      [self.treeIdArray isEqualToArray:otherMessage.treeIdArray] &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasActor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.actor] hash];
  }
  for (NSNumber* value in self.sessionArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.channelIdArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.treeIdArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPTextMessage_Builder()
@property (retain) MPTextMessage* result;
@end

@implementation MPTextMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPTextMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPTextMessage_Builder*) clear {
  self.result = [[[MPTextMessage alloc] init] autorelease];
  return self;
}
- (MPTextMessage_Builder*) clone {
  return [MPTextMessage builderWithPrototype:result];
}
- (MPTextMessage*) defaultInstance {
  return [MPTextMessage defaultInstance];
}
- (MPTextMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPTextMessage*) buildPartial {
  MPTextMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPTextMessage_Builder*) mergeFrom:(MPTextMessage*) other {
  if (other == [MPTextMessage defaultInstance]) {
    return self;
  }
  if (other.hasActor) {
    [self setActor:other.actor];
  }
  if (other.sessionArray.count > 0) {
    if (result.sessionArray == nil) {
      result.sessionArray = [[other.sessionArray copyWithZone:[other.sessionArray zone]] autorelease];
    } else {
      [result.sessionArray appendArray:other.sessionArray];
    }
  }
  if (other.channelIdArray.count > 0) {
    if (result.channelIdArray == nil) {
      result.channelIdArray = [[other.channelIdArray copyWithZone:[other.channelIdArray zone]] autorelease];
    } else {
      [result.channelIdArray appendArray:other.channelIdArray];
    }
  }
  if (other.treeIdArray.count > 0) {
    if (result.treeIdArray == nil) {
      result.treeIdArray = [[other.treeIdArray copyWithZone:[other.treeIdArray zone]] autorelease];
    } else {
      [result.treeIdArray appendArray:other.treeIdArray];
    }
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPTextMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPTextMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setActor:[input readUInt32]];
        break;
      }
      case 16: {
        [self addSession:[input readUInt32]];
        break;
      }
      case 24: {
        [self addChannelId:[input readUInt32]];
        break;
      }
      case 32: {
        [self addTreeId:[input readUInt32]];
        break;
      }
      case 42: {
        [self setMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasActor {
  return result.hasActor;
}
- (uint32_t) actor {
  return result.actor;
}
- (MPTextMessage_Builder*) setActor:(uint32_t) value {
  result.hasActor = YES;
  result.actor = value;
  return self;
}
- (MPTextMessage_Builder*) clearActor {
  result.hasActor = NO;
  result.actor = 0;
  return self;
}
- (PBAppendableArray *)session {
  return result.sessionArray;
}
- (uint32_t)sessionAtIndex:(NSUInteger)index {
  return [result sessionAtIndex:index];
}
- (MPTextMessage_Builder *)addSession:(uint32_t)value {
  if (result.sessionArray == nil) {
    result.sessionArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.sessionArray addUint32:value];
  return self;
}
- (MPTextMessage_Builder *)setSessionArray:(NSArray *)array {
  result.sessionArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPTextMessage_Builder *)setSessionValues:(const uint32_t *)values count:(NSUInteger)count {
  result.sessionArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPTextMessage_Builder *)clearSession {
  result.sessionArray = nil;
  return self;
}
- (PBAppendableArray *)channelId {
  return result.channelIdArray;
}
- (uint32_t)channelIdAtIndex:(NSUInteger)index {
  return [result channelIdAtIndex:index];
}
- (MPTextMessage_Builder *)addChannelId:(uint32_t)value {
  if (result.channelIdArray == nil) {
    result.channelIdArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.channelIdArray addUint32:value];
  return self;
}
- (MPTextMessage_Builder *)setChannelIdArray:(NSArray *)array {
  result.channelIdArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPTextMessage_Builder *)setChannelIdValues:(const uint32_t *)values count:(NSUInteger)count {
  result.channelIdArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPTextMessage_Builder *)clearChannelId {
  result.channelIdArray = nil;
  return self;
}
- (PBAppendableArray *)treeId {
  return result.treeIdArray;
}
- (uint32_t)treeIdAtIndex:(NSUInteger)index {
  return [result treeIdAtIndex:index];
}
- (MPTextMessage_Builder *)addTreeId:(uint32_t)value {
  if (result.treeIdArray == nil) {
    result.treeIdArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.treeIdArray addUint32:value];
  return self;
}
- (MPTextMessage_Builder *)setTreeIdArray:(NSArray *)array {
  result.treeIdArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPTextMessage_Builder *)setTreeIdValues:(const uint32_t *)values count:(NSUInteger)count {
  result.treeIdArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPTextMessage_Builder *)clearTreeId {
  result.treeIdArray = nil;
  return self;
}
- (BOOL) hasMessage {
  return result.hasMessage;
}
- (NSString*) message {
  return result.message;
}
- (MPTextMessage_Builder*) setMessage:(NSString*) value {
  result.hasMessage = YES;
  result.message = value;
  return self;
}
- (MPTextMessage_Builder*) clearMessage {
  result.hasMessage = NO;
  result.message = @"";
  return self;
}
@end

@interface MPPermissionDenied ()
@property uint32_t permission;
@property uint32_t channelId;
@property uint32_t session;
@property (retain) NSString* reason;
@property MPPermissionDenied_DenyType type;
@property (retain) NSString* name;
@end

@implementation MPPermissionDenied

- (BOOL) hasPermission {
  return !!hasPermission_;
}
- (void) setHasPermission:(BOOL) value {
  hasPermission_ = !!value;
}
@synthesize permission;
- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value {
  hasChannelId_ = !!value;
}
@synthesize channelId;
- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) value {
  hasSession_ = !!value;
}
@synthesize session;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) value {
  hasReason_ = !!value;
}
@synthesize reason;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (void) dealloc {
  self.reason = nil;
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.permission = 0;
    self.channelId = 0;
    self.session = 0;
    self.reason = @"";
    self.type = MPPermissionDenied_DenyTypeText;
    self.name = @"";
  }
  return self;
}
static MPPermissionDenied* defaultMPPermissionDeniedInstance = nil;
+ (void) initialize {
  if (self == [MPPermissionDenied class]) {
    defaultMPPermissionDeniedInstance = [[MPPermissionDenied alloc] init];
  }
}
+ (MPPermissionDenied*) defaultInstance {
  return defaultMPPermissionDeniedInstance;
}
- (MPPermissionDenied*) defaultInstance {
  return defaultMPPermissionDeniedInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPermission) {
    [output writeUInt32:1 value:self.permission];
  }
  if (self.hasChannelId) {
    [output writeUInt32:2 value:self.channelId];
  }
  if (self.hasSession) {
    [output writeUInt32:3 value:self.session];
  }
  if (self.hasReason) {
    [output writeString:4 value:self.reason];
  }
  if (self.hasType) {
    [output writeEnum:5 value:self.type];
  }
  if (self.hasName) {
    [output writeString:6 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPermission) {
    size += computeUInt32Size(1, self.permission);
  }
  if (self.hasChannelId) {
    size += computeUInt32Size(2, self.channelId);
  }
  if (self.hasSession) {
    size += computeUInt32Size(3, self.session);
  }
  if (self.hasReason) {
    size += computeStringSize(4, self.reason);
  }
  if (self.hasType) {
    size += computeEnumSize(5, self.type);
  }
  if (self.hasName) {
    size += computeStringSize(6, self.name);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPPermissionDenied*) parseFromData:(NSData*) data {
  return (MPPermissionDenied*)[[[MPPermissionDenied builder] mergeFromData:data] build];
}
+ (MPPermissionDenied*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPermissionDenied*)[[[MPPermissionDenied builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPPermissionDenied*) parseFromInputStream:(NSInputStream*) input {
  return (MPPermissionDenied*)[[[MPPermissionDenied builder] mergeFromInputStream:input] build];
}
+ (MPPermissionDenied*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPermissionDenied*)[[[MPPermissionDenied builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPermissionDenied*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPPermissionDenied*)[[[MPPermissionDenied builder] mergeFromCodedInputStream:input] build];
}
+ (MPPermissionDenied*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPermissionDenied*)[[[MPPermissionDenied builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPermissionDenied_Builder*) builder {
  return [[[MPPermissionDenied_Builder alloc] init] autorelease];
}
+ (MPPermissionDenied_Builder*) builderWithPrototype:(MPPermissionDenied*) prototype {
  return [[MPPermissionDenied builder] mergeFrom:prototype];
}
- (MPPermissionDenied_Builder*) builder {
  return [MPPermissionDenied builder];
}
- (MPPermissionDenied_Builder*) toBuilder {
  return [MPPermissionDenied builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPermission) {
    [output appendFormat:@"%@%@: %@\n", indent, @"permission", [NSNumber numberWithInt:self.permission]];
  }
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInt:self.channelId]];
  }
  if (self.hasSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", [NSNumber numberWithInt:self.session]];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPPermissionDenied class]]) {
    return NO;
  }
  MPPermissionDenied *otherMessage = other;
  return
      self.hasPermission == otherMessage.hasPermission &&
      (!self.hasPermission || self.permission == otherMessage.permission) &&
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || self.session == otherMessage.session) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type != otherMessage.type) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPermission) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.permission] hash];
  }
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.channelId] hash];
  }
  if (self.hasSession) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.session] hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL MPPermissionDenied_DenyTypeIsValidValue(MPPermissionDenied_DenyType value) {
  switch (value) {
    case MPPermissionDenied_DenyTypeText:
    case MPPermissionDenied_DenyTypePermission:
    case MPPermissionDenied_DenyTypeSuperUser:
    case MPPermissionDenied_DenyTypeChannelName:
    case MPPermissionDenied_DenyTypeTextTooLong:
    case MPPermissionDenied_DenyTypeH9K:
    case MPPermissionDenied_DenyTypeTemporaryChannel:
    case MPPermissionDenied_DenyTypeMissingCertificate:
    case MPPermissionDenied_DenyTypeUserName:
    case MPPermissionDenied_DenyTypeChannelFull:
      return YES;
    default:
      return NO;
  }
}
@interface MPPermissionDenied_Builder()
@property (retain) MPPermissionDenied* result;
@end

@implementation MPPermissionDenied_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPPermissionDenied alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPPermissionDenied_Builder*) clear {
  self.result = [[[MPPermissionDenied alloc] init] autorelease];
  return self;
}
- (MPPermissionDenied_Builder*) clone {
  return [MPPermissionDenied builderWithPrototype:result];
}
- (MPPermissionDenied*) defaultInstance {
  return [MPPermissionDenied defaultInstance];
}
- (MPPermissionDenied*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPPermissionDenied*) buildPartial {
  MPPermissionDenied* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPPermissionDenied_Builder*) mergeFrom:(MPPermissionDenied*) other {
  if (other == [MPPermissionDenied defaultInstance]) {
    return self;
  }
  if (other.hasPermission) {
    [self setPermission:other.permission];
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasSession) {
    [self setSession:other.session];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPPermissionDenied_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPPermissionDenied_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPermission:[input readUInt32]];
        break;
      }
      case 16: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setSession:[input readUInt32]];
        break;
      }
      case 34: {
        [self setReason:[input readString]];
        break;
      }
      case 40: {
        int32_t value = [input readEnum];
        if (MPPermissionDenied_DenyTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 50: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPermission {
  return result.hasPermission;
}
- (uint32_t) permission {
  return result.permission;
}
- (MPPermissionDenied_Builder*) setPermission:(uint32_t) value {
  result.hasPermission = YES;
  result.permission = value;
  return self;
}
- (MPPermissionDenied_Builder*) clearPermission {
  result.hasPermission = NO;
  result.permission = 0;
  return self;
}
- (BOOL) hasChannelId {
  return result.hasChannelId;
}
- (uint32_t) channelId {
  return result.channelId;
}
- (MPPermissionDenied_Builder*) setChannelId:(uint32_t) value {
  result.hasChannelId = YES;
  result.channelId = value;
  return self;
}
- (MPPermissionDenied_Builder*) clearChannelId {
  result.hasChannelId = NO;
  result.channelId = 0;
  return self;
}
- (BOOL) hasSession {
  return result.hasSession;
}
- (uint32_t) session {
  return result.session;
}
- (MPPermissionDenied_Builder*) setSession:(uint32_t) value {
  result.hasSession = YES;
  result.session = value;
  return self;
}
- (MPPermissionDenied_Builder*) clearSession {
  result.hasSession = NO;
  result.session = 0;
  return self;
}
- (BOOL) hasReason {
  return result.hasReason;
}
- (NSString*) reason {
  return result.reason;
}
- (MPPermissionDenied_Builder*) setReason:(NSString*) value {
  result.hasReason = YES;
  result.reason = value;
  return self;
}
- (MPPermissionDenied_Builder*) clearReason {
  result.hasReason = NO;
  result.reason = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (MPPermissionDenied_DenyType) type {
  return result.type;
}
- (MPPermissionDenied_Builder*) setType:(MPPermissionDenied_DenyType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (MPPermissionDenied_Builder*) clearType {
  result.hasType = NO;
  result.type = MPPermissionDenied_DenyTypeText;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MPPermissionDenied_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MPPermissionDenied_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
@end

@interface MPACL ()
@property uint32_t channelId;
@property BOOL inheritAcls;
@property (retain) PBAppendableArray * groupsArray;
@property (retain) PBAppendableArray * aclsArray;
@property BOOL query;
@end

@implementation MPACL

- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value {
  hasChannelId_ = !!value;
}
@synthesize channelId;
- (BOOL) hasInheritAcls {
  return !!hasInheritAcls_;
}
- (void) setHasInheritAcls:(BOOL) value {
  hasInheritAcls_ = !!value;
}
- (BOOL) inheritAcls {
  return !!inheritAcls_;
}
- (void) setInheritAcls:(BOOL) value {
  inheritAcls_ = !!value;
}
@synthesize groupsArray;
@dynamic groups;
@synthesize aclsArray;
@dynamic acls;
- (BOOL) hasQuery {
  return !!hasQuery_;
}
- (void) setHasQuery:(BOOL) value {
  hasQuery_ = !!value;
}
- (BOOL) query {
  return !!query_;
}
- (void) setQuery:(BOOL) value {
  query_ = !!value;
}
- (void) dealloc {
  self.groupsArray = nil;
  self.aclsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.channelId = 0;
    self.inheritAcls = YES;
    self.query = NO;
  }
  return self;
}
static MPACL* defaultMPACLInstance = nil;
+ (void) initialize {
  if (self == [MPACL class]) {
    defaultMPACLInstance = [[MPACL alloc] init];
  }
}
+ (MPACL*) defaultInstance {
  return defaultMPACLInstance;
}
- (MPACL*) defaultInstance {
  return defaultMPACLInstance;
}
- (PBArray *)groups {
  return groupsArray;
}
- (MPACL_ChanGroup*)groupsAtIndex:(NSUInteger)index {
  return [groupsArray objectAtIndex:index];
}
- (PBArray *)acls {
  return aclsArray;
}
- (MPACL_ChanACL*)aclsAtIndex:(NSUInteger)index {
  return [aclsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasChannelId) {
    return NO;
  }
  for (MPACL_ChanGroup* element in self.groups) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelId) {
    [output writeUInt32:1 value:self.channelId];
  }
  if (self.hasInheritAcls) {
    [output writeBool:2 value:self.inheritAcls];
  }
  for (MPACL_ChanGroup *element in self.groupsArray) {
    [output writeMessage:3 value:element];
  }
  for (MPACL_ChanACL *element in self.aclsArray) {
    [output writeMessage:4 value:element];
  }
  if (self.hasQuery) {
    [output writeBool:5 value:self.query];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasChannelId) {
    size += computeUInt32Size(1, self.channelId);
  }
  if (self.hasInheritAcls) {
    size += computeBoolSize(2, self.inheritAcls);
  }
  for (MPACL_ChanGroup *element in self.groupsArray) {
    size += computeMessageSize(3, element);
  }
  for (MPACL_ChanACL *element in self.aclsArray) {
    size += computeMessageSize(4, element);
  }
  if (self.hasQuery) {
    size += computeBoolSize(5, self.query);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPACL*) parseFromData:(NSData*) data {
  return (MPACL*)[[[MPACL builder] mergeFromData:data] build];
}
+ (MPACL*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACL*)[[[MPACL builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPACL*) parseFromInputStream:(NSInputStream*) input {
  return (MPACL*)[[[MPACL builder] mergeFromInputStream:input] build];
}
+ (MPACL*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACL*)[[[MPACL builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPACL*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPACL*)[[[MPACL builder] mergeFromCodedInputStream:input] build];
}
+ (MPACL*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACL*)[[[MPACL builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPACL_Builder*) builder {
  return [[[MPACL_Builder alloc] init] autorelease];
}
+ (MPACL_Builder*) builderWithPrototype:(MPACL*) prototype {
  return [[MPACL builder] mergeFrom:prototype];
}
- (MPACL_Builder*) builder {
  return [MPACL builder];
}
- (MPACL_Builder*) toBuilder {
  return [MPACL builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInt:self.channelId]];
  }
  if (self.hasInheritAcls) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inheritAcls", [NSNumber numberWithBool:self.inheritAcls]];
  }
  for (MPACL_ChanGroup* element in self.groupsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"groups"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (MPACL_ChanACL* element in self.aclsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"acls"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"query", [NSNumber numberWithBool:self.query]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPACL class]]) {
    return NO;
  }
  MPACL *otherMessage = other;
  return
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasInheritAcls == otherMessage.hasInheritAcls &&
      (!self.hasInheritAcls || self.inheritAcls == otherMessage.inheritAcls) &&
      [self.groupsArray isEqualToArray:otherMessage.groupsArray] &&
      [self.aclsArray isEqualToArray:otherMessage.aclsArray] &&
      self.hasQuery == otherMessage.hasQuery &&
      (!self.hasQuery || self.query == otherMessage.query) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.channelId] hash];
  }
  if (self.hasInheritAcls) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.inheritAcls] hash];
  }
  for (MPACL_ChanGroup* element in self.groupsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (MPACL_ChanACL* element in self.aclsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasQuery) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.query] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPACL_ChanGroup ()
@property (retain) NSString* name;
@property BOOL inherited;
@property BOOL inherit;
@property BOOL inheritable;
@property (retain) PBAppendableArray * addArray;
@property (retain) PBAppendableArray * removeArray;
@property (retain) PBAppendableArray * inheritedMembersArray;
@end

@implementation MPACL_ChanGroup

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasInherited {
  return !!hasInherited_;
}
- (void) setHasInherited:(BOOL) value {
  hasInherited_ = !!value;
}
- (BOOL) inherited {
  return !!inherited_;
}
- (void) setInherited:(BOOL) value {
  inherited_ = !!value;
}
- (BOOL) hasInherit {
  return !!hasInherit_;
}
- (void) setHasInherit:(BOOL) value {
  hasInherit_ = !!value;
}
- (BOOL) inherit {
  return !!inherit_;
}
- (void) setInherit:(BOOL) value {
  inherit_ = !!value;
}
- (BOOL) hasInheritable {
  return !!hasInheritable_;
}
- (void) setHasInheritable:(BOOL) value {
  hasInheritable_ = !!value;
}
- (BOOL) inheritable {
  return !!inheritable_;
}
- (void) setInheritable:(BOOL) value {
  inheritable_ = !!value;
}
@synthesize addArray;
@dynamic add;
@synthesize removeArray;
@dynamic remove;
@synthesize inheritedMembersArray;
@dynamic inheritedMembers;
- (void) dealloc {
  self.name = nil;
  self.addArray = nil;
  self.removeArray = nil;
  self.inheritedMembersArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.inherited = YES;
    self.inherit = YES;
    self.inheritable = YES;
  }
  return self;
}
static MPACL_ChanGroup* defaultMPACL_ChanGroupInstance = nil;
+ (void) initialize {
  if (self == [MPACL_ChanGroup class]) {
    defaultMPACL_ChanGroupInstance = [[MPACL_ChanGroup alloc] init];
  }
}
+ (MPACL_ChanGroup*) defaultInstance {
  return defaultMPACL_ChanGroupInstance;
}
- (MPACL_ChanGroup*) defaultInstance {
  return defaultMPACL_ChanGroupInstance;
}
- (PBArray *)add {
  return addArray;
}
- (uint32_t)addAtIndex:(NSUInteger)index {
  return [addArray uint32AtIndex:index];
}
- (PBArray *)remove {
  return removeArray;
}
- (uint32_t)removeAtIndex:(NSUInteger)index {
  return [removeArray uint32AtIndex:index];
}
- (PBArray *)inheritedMembers {
  return inheritedMembersArray;
}
- (uint32_t)inheritedMembersAtIndex:(NSUInteger)index {
  return [inheritedMembersArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasInherited) {
    [output writeBool:2 value:self.inherited];
  }
  if (self.hasInherit) {
    [output writeBool:3 value:self.inherit];
  }
  if (self.hasInheritable) {
    [output writeBool:4 value:self.inheritable];
  }
  const NSUInteger addArrayCount = self.addArray.count;
  if (addArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.addArray.data;
    for (NSUInteger i = 0; i < addArrayCount; ++i) {
      [output writeUInt32:5 value:values[i]];
    }
  }
  const NSUInteger removeArrayCount = self.removeArray.count;
  if (removeArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.removeArray.data;
    for (NSUInteger i = 0; i < removeArrayCount; ++i) {
      [output writeUInt32:6 value:values[i]];
    }
  }
  const NSUInteger inheritedMembersArrayCount = self.inheritedMembersArray.count;
  if (inheritedMembersArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.inheritedMembersArray.data;
    for (NSUInteger i = 0; i < inheritedMembersArrayCount; ++i) {
      [output writeUInt32:7 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasInherited) {
    size += computeBoolSize(2, self.inherited);
  }
  if (self.hasInherit) {
    size += computeBoolSize(3, self.inherit);
  }
  if (self.hasInheritable) {
    size += computeBoolSize(4, self.inheritable);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.addArray.count;
    const uint32_t *values = (const uint32_t *)self.addArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.removeArray.count;
    const uint32_t *values = (const uint32_t *)self.removeArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.inheritedMembersArray.count;
    const uint32_t *values = (const uint32_t *)self.inheritedMembersArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPACL_ChanGroup*) parseFromData:(NSData*) data {
  return (MPACL_ChanGroup*)[[[MPACL_ChanGroup builder] mergeFromData:data] build];
}
+ (MPACL_ChanGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACL_ChanGroup*)[[[MPACL_ChanGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPACL_ChanGroup*) parseFromInputStream:(NSInputStream*) input {
  return (MPACL_ChanGroup*)[[[MPACL_ChanGroup builder] mergeFromInputStream:input] build];
}
+ (MPACL_ChanGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACL_ChanGroup*)[[[MPACL_ChanGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPACL_ChanGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPACL_ChanGroup*)[[[MPACL_ChanGroup builder] mergeFromCodedInputStream:input] build];
}
+ (MPACL_ChanGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACL_ChanGroup*)[[[MPACL_ChanGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPACL_ChanGroup_Builder*) builder {
  return [[[MPACL_ChanGroup_Builder alloc] init] autorelease];
}
+ (MPACL_ChanGroup_Builder*) builderWithPrototype:(MPACL_ChanGroup*) prototype {
  return [[MPACL_ChanGroup builder] mergeFrom:prototype];
}
- (MPACL_ChanGroup_Builder*) builder {
  return [MPACL_ChanGroup builder];
}
- (MPACL_ChanGroup_Builder*) toBuilder {
  return [MPACL_ChanGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasInherited) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inherited", [NSNumber numberWithBool:self.inherited]];
  }
  if (self.hasInherit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inherit", [NSNumber numberWithBool:self.inherit]];
  }
  if (self.hasInheritable) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inheritable", [NSNumber numberWithBool:self.inheritable]];
  }
  for (NSNumber* value in self.addArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"add", value];
  }
  for (NSNumber* value in self.removeArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remove", value];
  }
  for (NSNumber* value in self.inheritedMembersArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inheritedMembers", value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPACL_ChanGroup class]]) {
    return NO;
  }
  MPACL_ChanGroup *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasInherited == otherMessage.hasInherited &&
      (!self.hasInherited || self.inherited == otherMessage.inherited) &&
      self.hasInherit == otherMessage.hasInherit &&
      (!self.hasInherit || self.inherit == otherMessage.inherit) &&
      self.hasInheritable == otherMessage.hasInheritable &&
      (!self.hasInheritable || self.inheritable == otherMessage.inheritable) &&
      [self.addArray isEqualToArray:otherMessage.addArray] &&
      [self.removeArray isEqualToArray:otherMessage.removeArray] &&
      [self.inheritedMembersArray isEqualToArray:otherMessage.inheritedMembersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasInherited) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.inherited] hash];
  }
  if (self.hasInherit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.inherit] hash];
  }
  if (self.hasInheritable) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.inheritable] hash];
  }
  for (NSNumber* value in self.addArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.removeArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.inheritedMembersArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPACL_ChanGroup_Builder()
@property (retain) MPACL_ChanGroup* result;
@end

@implementation MPACL_ChanGroup_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPACL_ChanGroup alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPACL_ChanGroup_Builder*) clear {
  self.result = [[[MPACL_ChanGroup alloc] init] autorelease];
  return self;
}
- (MPACL_ChanGroup_Builder*) clone {
  return [MPACL_ChanGroup builderWithPrototype:result];
}
- (MPACL_ChanGroup*) defaultInstance {
  return [MPACL_ChanGroup defaultInstance];
}
- (MPACL_ChanGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPACL_ChanGroup*) buildPartial {
  MPACL_ChanGroup* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPACL_ChanGroup_Builder*) mergeFrom:(MPACL_ChanGroup*) other {
  if (other == [MPACL_ChanGroup defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasInherited) {
    [self setInherited:other.inherited];
  }
  if (other.hasInherit) {
    [self setInherit:other.inherit];
  }
  if (other.hasInheritable) {
    [self setInheritable:other.inheritable];
  }
  if (other.addArray.count > 0) {
    if (result.addArray == nil) {
      result.addArray = [[other.addArray copyWithZone:[other.addArray zone]] autorelease];
    } else {
      [result.addArray appendArray:other.addArray];
    }
  }
  if (other.removeArray.count > 0) {
    if (result.removeArray == nil) {
      result.removeArray = [[other.removeArray copyWithZone:[other.removeArray zone]] autorelease];
    } else {
      [result.removeArray appendArray:other.removeArray];
    }
  }
  if (other.inheritedMembersArray.count > 0) {
    if (result.inheritedMembersArray == nil) {
      result.inheritedMembersArray = [[other.inheritedMembersArray copyWithZone:[other.inheritedMembersArray zone]] autorelease];
    } else {
      [result.inheritedMembersArray appendArray:other.inheritedMembersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPACL_ChanGroup_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPACL_ChanGroup_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setInherited:[input readBool]];
        break;
      }
      case 24: {
        [self setInherit:[input readBool]];
        break;
      }
      case 32: {
        [self setInheritable:[input readBool]];
        break;
      }
      case 40: {
        [self addAdd:[input readUInt32]];
        break;
      }
      case 48: {
        [self addRemove:[input readUInt32]];
        break;
      }
      case 56: {
        [self addInheritedMembers:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MPACL_ChanGroup_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MPACL_ChanGroup_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasInherited {
  return result.hasInherited;
}
- (BOOL) inherited {
  return result.inherited;
}
- (MPACL_ChanGroup_Builder*) setInherited:(BOOL) value {
  result.hasInherited = YES;
  result.inherited = value;
  return self;
}
- (MPACL_ChanGroup_Builder*) clearInherited {
  result.hasInherited = NO;
  result.inherited = YES;
  return self;
}
- (BOOL) hasInherit {
  return result.hasInherit;
}
- (BOOL) inherit {
  return result.inherit;
}
- (MPACL_ChanGroup_Builder*) setInherit:(BOOL) value {
  result.hasInherit = YES;
  result.inherit = value;
  return self;
}
- (MPACL_ChanGroup_Builder*) clearInherit {
  result.hasInherit = NO;
  result.inherit = YES;
  return self;
}
- (BOOL) hasInheritable {
  return result.hasInheritable;
}
- (BOOL) inheritable {
  return result.inheritable;
}
- (MPACL_ChanGroup_Builder*) setInheritable:(BOOL) value {
  result.hasInheritable = YES;
  result.inheritable = value;
  return self;
}
- (MPACL_ChanGroup_Builder*) clearInheritable {
  result.hasInheritable = NO;
  result.inheritable = YES;
  return self;
}
- (PBAppendableArray *)add {
  return result.addArray;
}
- (uint32_t)addAtIndex:(NSUInteger)index {
  return [result addAtIndex:index];
}
- (MPACL_ChanGroup_Builder *)addAdd:(uint32_t)value {
  if (result.addArray == nil) {
    result.addArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.addArray addUint32:value];
  return self;
}
- (MPACL_ChanGroup_Builder *)setAddArray:(NSArray *)array {
  result.addArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPACL_ChanGroup_Builder *)setAddValues:(const uint32_t *)values count:(NSUInteger)count {
  result.addArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPACL_ChanGroup_Builder *)clearAdd {
  result.addArray = nil;
  return self;
}
- (PBAppendableArray *)remove {
  return result.removeArray;
}
- (uint32_t)removeAtIndex:(NSUInteger)index {
  return [result removeAtIndex:index];
}
- (MPACL_ChanGroup_Builder *)addRemove:(uint32_t)value {
  if (result.removeArray == nil) {
    result.removeArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.removeArray addUint32:value];
  return self;
}
- (MPACL_ChanGroup_Builder *)setRemoveArray:(NSArray *)array {
  result.removeArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPACL_ChanGroup_Builder *)setRemoveValues:(const uint32_t *)values count:(NSUInteger)count {
  result.removeArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPACL_ChanGroup_Builder *)clearRemove {
  result.removeArray = nil;
  return self;
}
- (PBAppendableArray *)inheritedMembers {
  return result.inheritedMembersArray;
}
- (uint32_t)inheritedMembersAtIndex:(NSUInteger)index {
  return [result inheritedMembersAtIndex:index];
}
- (MPACL_ChanGroup_Builder *)addInheritedMembers:(uint32_t)value {
  if (result.inheritedMembersArray == nil) {
    result.inheritedMembersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.inheritedMembersArray addUint32:value];
  return self;
}
- (MPACL_ChanGroup_Builder *)setInheritedMembersArray:(NSArray *)array {
  result.inheritedMembersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPACL_ChanGroup_Builder *)setInheritedMembersValues:(const uint32_t *)values count:(NSUInteger)count {
  result.inheritedMembersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPACL_ChanGroup_Builder *)clearInheritedMembers {
  result.inheritedMembersArray = nil;
  return self;
}
@end

@interface MPACL_ChanACL ()
@property BOOL applyHere;
@property BOOL applySubs;
@property BOOL inherited;
@property uint32_t userId;
@property (retain) NSString* group;
@property uint32_t grant;
@property uint32_t deny;
@end

@implementation MPACL_ChanACL

- (BOOL) hasApplyHere {
  return !!hasApplyHere_;
}
- (void) setHasApplyHere:(BOOL) value {
  hasApplyHere_ = !!value;
}
- (BOOL) applyHere {
  return !!applyHere_;
}
- (void) setApplyHere:(BOOL) value {
  applyHere_ = !!value;
}
- (BOOL) hasApplySubs {
  return !!hasApplySubs_;
}
- (void) setHasApplySubs:(BOOL) value {
  hasApplySubs_ = !!value;
}
- (BOOL) applySubs {
  return !!applySubs_;
}
- (void) setApplySubs:(BOOL) value {
  applySubs_ = !!value;
}
- (BOOL) hasInherited {
  return !!hasInherited_;
}
- (void) setHasInherited:(BOOL) value {
  hasInherited_ = !!value;
}
- (BOOL) inherited {
  return !!inherited_;
}
- (void) setInherited:(BOOL) value {
  inherited_ = !!value;
}
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasGroup {
  return !!hasGroup_;
}
- (void) setHasGroup:(BOOL) value {
  hasGroup_ = !!value;
}
@synthesize group;
- (BOOL) hasGrant {
  return !!hasGrant_;
}
- (void) setHasGrant:(BOOL) value {
  hasGrant_ = !!value;
}
@synthesize grant;
- (BOOL) hasDeny {
  return !!hasDeny_;
}
- (void) setHasDeny:(BOOL) value {
  hasDeny_ = !!value;
}
@synthesize deny;
- (void) dealloc {
  self.group = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.applyHere = YES;
    self.applySubs = YES;
    self.inherited = YES;
    self.userId = 0;
    self.group = @"";
    self.grant = 0;
    self.deny = 0;
  }
  return self;
}
static MPACL_ChanACL* defaultMPACL_ChanACLInstance = nil;
+ (void) initialize {
  if (self == [MPACL_ChanACL class]) {
    defaultMPACL_ChanACLInstance = [[MPACL_ChanACL alloc] init];
  }
}
+ (MPACL_ChanACL*) defaultInstance {
  return defaultMPACL_ChanACLInstance;
}
- (MPACL_ChanACL*) defaultInstance {
  return defaultMPACL_ChanACLInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasApplyHere) {
    [output writeBool:1 value:self.applyHere];
  }
  if (self.hasApplySubs) {
    [output writeBool:2 value:self.applySubs];
  }
  if (self.hasInherited) {
    [output writeBool:3 value:self.inherited];
  }
  if (self.hasUserId) {
    [output writeUInt32:4 value:self.userId];
  }
  if (self.hasGroup) {
    [output writeString:5 value:self.group];
  }
  if (self.hasGrant) {
    [output writeUInt32:6 value:self.grant];
  }
  if (self.hasDeny) {
    [output writeUInt32:7 value:self.deny];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasApplyHere) {
    size += computeBoolSize(1, self.applyHere);
  }
  if (self.hasApplySubs) {
    size += computeBoolSize(2, self.applySubs);
  }
  if (self.hasInherited) {
    size += computeBoolSize(3, self.inherited);
  }
  if (self.hasUserId) {
    size += computeUInt32Size(4, self.userId);
  }
  if (self.hasGroup) {
    size += computeStringSize(5, self.group);
  }
  if (self.hasGrant) {
    size += computeUInt32Size(6, self.grant);
  }
  if (self.hasDeny) {
    size += computeUInt32Size(7, self.deny);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPACL_ChanACL*) parseFromData:(NSData*) data {
  return (MPACL_ChanACL*)[[[MPACL_ChanACL builder] mergeFromData:data] build];
}
+ (MPACL_ChanACL*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACL_ChanACL*)[[[MPACL_ChanACL builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPACL_ChanACL*) parseFromInputStream:(NSInputStream*) input {
  return (MPACL_ChanACL*)[[[MPACL_ChanACL builder] mergeFromInputStream:input] build];
}
+ (MPACL_ChanACL*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACL_ChanACL*)[[[MPACL_ChanACL builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPACL_ChanACL*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPACL_ChanACL*)[[[MPACL_ChanACL builder] mergeFromCodedInputStream:input] build];
}
+ (MPACL_ChanACL*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACL_ChanACL*)[[[MPACL_ChanACL builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPACL_ChanACL_Builder*) builder {
  return [[[MPACL_ChanACL_Builder alloc] init] autorelease];
}
+ (MPACL_ChanACL_Builder*) builderWithPrototype:(MPACL_ChanACL*) prototype {
  return [[MPACL_ChanACL builder] mergeFrom:prototype];
}
- (MPACL_ChanACL_Builder*) builder {
  return [MPACL_ChanACL builder];
}
- (MPACL_ChanACL_Builder*) toBuilder {
  return [MPACL_ChanACL builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasApplyHere) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyHere", [NSNumber numberWithBool:self.applyHere]];
  }
  if (self.hasApplySubs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applySubs", [NSNumber numberWithBool:self.applySubs]];
  }
  if (self.hasInherited) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inherited", [NSNumber numberWithBool:self.inherited]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInt:self.userId]];
  }
  if (self.hasGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"group", self.group];
  }
  if (self.hasGrant) {
    [output appendFormat:@"%@%@: %@\n", indent, @"grant", [NSNumber numberWithInt:self.grant]];
  }
  if (self.hasDeny) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deny", [NSNumber numberWithInt:self.deny]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPACL_ChanACL class]]) {
    return NO;
  }
  MPACL_ChanACL *otherMessage = other;
  return
      self.hasApplyHere == otherMessage.hasApplyHere &&
      (!self.hasApplyHere || self.applyHere == otherMessage.applyHere) &&
      self.hasApplySubs == otherMessage.hasApplySubs &&
      (!self.hasApplySubs || self.applySubs == otherMessage.applySubs) &&
      self.hasInherited == otherMessage.hasInherited &&
      (!self.hasInherited || self.inherited == otherMessage.inherited) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasGroup == otherMessage.hasGroup &&
      (!self.hasGroup || [self.group isEqual:otherMessage.group]) &&
      self.hasGrant == otherMessage.hasGrant &&
      (!self.hasGrant || self.grant == otherMessage.grant) &&
      self.hasDeny == otherMessage.hasDeny &&
      (!self.hasDeny || self.deny == otherMessage.deny) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasApplyHere) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.applyHere] hash];
  }
  if (self.hasApplySubs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.applySubs] hash];
  }
  if (self.hasInherited) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.inherited] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.userId] hash];
  }
  if (self.hasGroup) {
    hashCode = hashCode * 31 + [self.group hash];
  }
  if (self.hasGrant) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.grant] hash];
  }
  if (self.hasDeny) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.deny] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPACL_ChanACL_Builder()
@property (retain) MPACL_ChanACL* result;
@end

@implementation MPACL_ChanACL_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPACL_ChanACL alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPACL_ChanACL_Builder*) clear {
  self.result = [[[MPACL_ChanACL alloc] init] autorelease];
  return self;
}
- (MPACL_ChanACL_Builder*) clone {
  return [MPACL_ChanACL builderWithPrototype:result];
}
- (MPACL_ChanACL*) defaultInstance {
  return [MPACL_ChanACL defaultInstance];
}
- (MPACL_ChanACL*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPACL_ChanACL*) buildPartial {
  MPACL_ChanACL* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPACL_ChanACL_Builder*) mergeFrom:(MPACL_ChanACL*) other {
  if (other == [MPACL_ChanACL defaultInstance]) {
    return self;
  }
  if (other.hasApplyHere) {
    [self setApplyHere:other.applyHere];
  }
  if (other.hasApplySubs) {
    [self setApplySubs:other.applySubs];
  }
  if (other.hasInherited) {
    [self setInherited:other.inherited];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasGroup) {
    [self setGroup:other.group];
  }
  if (other.hasGrant) {
    [self setGrant:other.grant];
  }
  if (other.hasDeny) {
    [self setDeny:other.deny];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPACL_ChanACL_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPACL_ChanACL_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setApplyHere:[input readBool]];
        break;
      }
      case 16: {
        [self setApplySubs:[input readBool]];
        break;
      }
      case 24: {
        [self setInherited:[input readBool]];
        break;
      }
      case 32: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 42: {
        [self setGroup:[input readString]];
        break;
      }
      case 48: {
        [self setGrant:[input readUInt32]];
        break;
      }
      case 56: {
        [self setDeny:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasApplyHere {
  return result.hasApplyHere;
}
- (BOOL) applyHere {
  return result.applyHere;
}
- (MPACL_ChanACL_Builder*) setApplyHere:(BOOL) value {
  result.hasApplyHere = YES;
  result.applyHere = value;
  return self;
}
- (MPACL_ChanACL_Builder*) clearApplyHere {
  result.hasApplyHere = NO;
  result.applyHere = YES;
  return self;
}
- (BOOL) hasApplySubs {
  return result.hasApplySubs;
}
- (BOOL) applySubs {
  return result.applySubs;
}
- (MPACL_ChanACL_Builder*) setApplySubs:(BOOL) value {
  result.hasApplySubs = YES;
  result.applySubs = value;
  return self;
}
- (MPACL_ChanACL_Builder*) clearApplySubs {
  result.hasApplySubs = NO;
  result.applySubs = YES;
  return self;
}
- (BOOL) hasInherited {
  return result.hasInherited;
}
- (BOOL) inherited {
  return result.inherited;
}
- (MPACL_ChanACL_Builder*) setInherited:(BOOL) value {
  result.hasInherited = YES;
  result.inherited = value;
  return self;
}
- (MPACL_ChanACL_Builder*) clearInherited {
  result.hasInherited = NO;
  result.inherited = YES;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (uint32_t) userId {
  return result.userId;
}
- (MPACL_ChanACL_Builder*) setUserId:(uint32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (MPACL_ChanACL_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasGroup {
  return result.hasGroup;
}
- (NSString*) group {
  return result.group;
}
- (MPACL_ChanACL_Builder*) setGroup:(NSString*) value {
  result.hasGroup = YES;
  result.group = value;
  return self;
}
- (MPACL_ChanACL_Builder*) clearGroup {
  result.hasGroup = NO;
  result.group = @"";
  return self;
}
- (BOOL) hasGrant {
  return result.hasGrant;
}
- (uint32_t) grant {
  return result.grant;
}
- (MPACL_ChanACL_Builder*) setGrant:(uint32_t) value {
  result.hasGrant = YES;
  result.grant = value;
  return self;
}
- (MPACL_ChanACL_Builder*) clearGrant {
  result.hasGrant = NO;
  result.grant = 0;
  return self;
}
- (BOOL) hasDeny {
  return result.hasDeny;
}
- (uint32_t) deny {
  return result.deny;
}
- (MPACL_ChanACL_Builder*) setDeny:(uint32_t) value {
  result.hasDeny = YES;
  result.deny = value;
  return self;
}
- (MPACL_ChanACL_Builder*) clearDeny {
  result.hasDeny = NO;
  result.deny = 0;
  return self;
}
@end

@interface MPACL_Builder()
@property (retain) MPACL* result;
@end

@implementation MPACL_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPACL alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPACL_Builder*) clear {
  self.result = [[[MPACL alloc] init] autorelease];
  return self;
}
- (MPACL_Builder*) clone {
  return [MPACL builderWithPrototype:result];
}
- (MPACL*) defaultInstance {
  return [MPACL defaultInstance];
}
- (MPACL*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPACL*) buildPartial {
  MPACL* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPACL_Builder*) mergeFrom:(MPACL*) other {
  if (other == [MPACL defaultInstance]) {
    return self;
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasInheritAcls) {
    [self setInheritAcls:other.inheritAcls];
  }
  if (other.groupsArray.count > 0) {
    if (result.groupsArray == nil) {
      result.groupsArray = [[other.groupsArray copyWithZone:[other.groupsArray zone]] autorelease];
    } else {
      [result.groupsArray appendArray:other.groupsArray];
    }
  }
  if (other.aclsArray.count > 0) {
    if (result.aclsArray == nil) {
      result.aclsArray = [[other.aclsArray copyWithZone:[other.aclsArray zone]] autorelease];
    } else {
      [result.aclsArray appendArray:other.aclsArray];
    }
  }
  if (other.hasQuery) {
    [self setQuery:other.query];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPACL_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPACL_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setInheritAcls:[input readBool]];
        break;
      }
      case 26: {
        MPACL_ChanGroup_Builder* subBuilder = [MPACL_ChanGroup builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGroups:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        MPACL_ChanACL_Builder* subBuilder = [MPACL_ChanACL builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAcls:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setQuery:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelId {
  return result.hasChannelId;
}
- (uint32_t) channelId {
  return result.channelId;
}
- (MPACL_Builder*) setChannelId:(uint32_t) value {
  result.hasChannelId = YES;
  result.channelId = value;
  return self;
}
- (MPACL_Builder*) clearChannelId {
  result.hasChannelId = NO;
  result.channelId = 0;
  return self;
}
- (BOOL) hasInheritAcls {
  return result.hasInheritAcls;
}
- (BOOL) inheritAcls {
  return result.inheritAcls;
}
- (MPACL_Builder*) setInheritAcls:(BOOL) value {
  result.hasInheritAcls = YES;
  result.inheritAcls = value;
  return self;
}
- (MPACL_Builder*) clearInheritAcls {
  result.hasInheritAcls = NO;
  result.inheritAcls = YES;
  return self;
}
- (PBAppendableArray *)groups {
  return result.groupsArray;
}
- (MPACL_ChanGroup*)groupsAtIndex:(NSUInteger)index {
  return [result groupsAtIndex:index];
}
- (MPACL_Builder *)addGroups:(MPACL_ChanGroup*)value {
  if (result.groupsArray == nil) {
    result.groupsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.groupsArray addObject:value];
  return self;
}
- (MPACL_Builder *)setGroupsArray:(NSArray *)array {
  result.groupsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MPACL_Builder *)setGroupsValues:(const MPACL_ChanGroup* *)values count:(NSUInteger)count {
  result.groupsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MPACL_Builder *)clearGroups {
  result.groupsArray = nil;
  return self;
}
- (PBAppendableArray *)acls {
  return result.aclsArray;
}
- (MPACL_ChanACL*)aclsAtIndex:(NSUInteger)index {
  return [result aclsAtIndex:index];
}
- (MPACL_Builder *)addAcls:(MPACL_ChanACL*)value {
  if (result.aclsArray == nil) {
    result.aclsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.aclsArray addObject:value];
  return self;
}
- (MPACL_Builder *)setAclsArray:(NSArray *)array {
  result.aclsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MPACL_Builder *)setAclsValues:(const MPACL_ChanACL* *)values count:(NSUInteger)count {
  result.aclsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MPACL_Builder *)clearAcls {
  result.aclsArray = nil;
  return self;
}
- (BOOL) hasQuery {
  return result.hasQuery;
}
- (BOOL) query {
  return result.query;
}
- (MPACL_Builder*) setQuery:(BOOL) value {
  result.hasQuery = YES;
  result.query = value;
  return self;
}
- (MPACL_Builder*) clearQuery {
  result.hasQuery = NO;
  result.query = NO;
  return self;
}
@end

@interface MPQueryUsers ()
@property (retain) PBAppendableArray * idsArray;
@property (retain) PBAppendableArray * namesArray;
@end

@implementation MPQueryUsers

@synthesize idsArray;
@dynamic ids;
@synthesize namesArray;
@dynamic names;
- (void) dealloc {
  self.idsArray = nil;
  self.namesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MPQueryUsers* defaultMPQueryUsersInstance = nil;
+ (void) initialize {
  if (self == [MPQueryUsers class]) {
    defaultMPQueryUsersInstance = [[MPQueryUsers alloc] init];
  }
}
+ (MPQueryUsers*) defaultInstance {
  return defaultMPQueryUsersInstance;
}
- (MPQueryUsers*) defaultInstance {
  return defaultMPQueryUsersInstance;
}
- (PBArray *)ids {
  return idsArray;
}
- (uint32_t)idsAtIndex:(NSUInteger)index {
  return [idsArray uint32AtIndex:index];
}
- (PBArray *)names {
  return namesArray;
}
- (NSString*)namesAtIndex:(NSUInteger)index {
  return [namesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger idsArrayCount = self.idsArray.count;
  if (idsArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.idsArray.data;
    for (NSUInteger i = 0; i < idsArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  const NSUInteger namesArrayCount = self.namesArray.count;
  if (namesArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.namesArray.data;
    for (NSUInteger i = 0; i < namesArrayCount; ++i) {
      [output writeString:2 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.idsArray.count;
    const uint32_t *values = (const uint32_t *)self.idsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.namesArray.count;
    const NSString* *values = (const NSString* *)self.namesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPQueryUsers*) parseFromData:(NSData*) data {
  return (MPQueryUsers*)[[[MPQueryUsers builder] mergeFromData:data] build];
}
+ (MPQueryUsers*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPQueryUsers*)[[[MPQueryUsers builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPQueryUsers*) parseFromInputStream:(NSInputStream*) input {
  return (MPQueryUsers*)[[[MPQueryUsers builder] mergeFromInputStream:input] build];
}
+ (MPQueryUsers*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPQueryUsers*)[[[MPQueryUsers builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPQueryUsers*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPQueryUsers*)[[[MPQueryUsers builder] mergeFromCodedInputStream:input] build];
}
+ (MPQueryUsers*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPQueryUsers*)[[[MPQueryUsers builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPQueryUsers_Builder*) builder {
  return [[[MPQueryUsers_Builder alloc] init] autorelease];
}
+ (MPQueryUsers_Builder*) builderWithPrototype:(MPQueryUsers*) prototype {
  return [[MPQueryUsers builder] mergeFrom:prototype];
}
- (MPQueryUsers_Builder*) builder {
  return [MPQueryUsers builder];
}
- (MPQueryUsers_Builder*) toBuilder {
  return [MPQueryUsers builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* value in self.idsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ids", value];
  }
  for (NSString* element in self.namesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"names", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPQueryUsers class]]) {
    return NO;
  }
  MPQueryUsers *otherMessage = other;
  return
      [self.idsArray isEqualToArray:otherMessage.idsArray] &&
      [self.namesArray isEqualToArray:otherMessage.namesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* value in self.idsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSString* element in self.namesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPQueryUsers_Builder()
@property (retain) MPQueryUsers* result;
@end

@implementation MPQueryUsers_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPQueryUsers alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPQueryUsers_Builder*) clear {
  self.result = [[[MPQueryUsers alloc] init] autorelease];
  return self;
}
- (MPQueryUsers_Builder*) clone {
  return [MPQueryUsers builderWithPrototype:result];
}
- (MPQueryUsers*) defaultInstance {
  return [MPQueryUsers defaultInstance];
}
- (MPQueryUsers*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPQueryUsers*) buildPartial {
  MPQueryUsers* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPQueryUsers_Builder*) mergeFrom:(MPQueryUsers*) other {
  if (other == [MPQueryUsers defaultInstance]) {
    return self;
  }
  if (other.idsArray.count > 0) {
    if (result.idsArray == nil) {
      result.idsArray = [[other.idsArray copyWithZone:[other.idsArray zone]] autorelease];
    } else {
      [result.idsArray appendArray:other.idsArray];
    }
  }
  if (other.namesArray.count > 0) {
    if (result.namesArray == nil) {
      result.namesArray = [[other.namesArray copyWithZone:[other.namesArray zone]] autorelease];
    } else {
      [result.namesArray appendArray:other.namesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPQueryUsers_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPQueryUsers_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addIds:[input readUInt32]];
        break;
      }
      case 18: {
        [self addNames:[input readString]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)ids {
  return result.idsArray;
}
- (uint32_t)idsAtIndex:(NSUInteger)index {
  return [result idsAtIndex:index];
}
- (MPQueryUsers_Builder *)addIds:(uint32_t)value {
  if (result.idsArray == nil) {
    result.idsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.idsArray addUint32:value];
  return self;
}
- (MPQueryUsers_Builder *)setIdsArray:(NSArray *)array {
  result.idsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPQueryUsers_Builder *)setIdsValues:(const uint32_t *)values count:(NSUInteger)count {
  result.idsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPQueryUsers_Builder *)clearIds {
  result.idsArray = nil;
  return self;
}
- (PBAppendableArray *)names {
  return result.namesArray;
}
- (NSString*)namesAtIndex:(NSUInteger)index {
  return [result namesAtIndex:index];
}
- (MPQueryUsers_Builder *)addNames:(NSString*)value {
  if (result.namesArray == nil) {
    result.namesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.namesArray addObject:value];
  return self;
}
- (MPQueryUsers_Builder *)setNamesArray:(NSArray *)array {
  result.namesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MPQueryUsers_Builder *)setNamesValues:(const NSString* *)values count:(NSUInteger)count {
  result.namesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MPQueryUsers_Builder *)clearNames {
  result.namesArray = nil;
  return self;
}
@end

@interface MPCryptSetup ()
@property (retain) NSData* key;
@property (retain) NSData* clientNonce;
@property (retain) NSData* serverNonce;
@end

@implementation MPCryptSetup

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) value {
  hasKey_ = !!value;
}
@synthesize key;
- (BOOL) hasClientNonce {
  return !!hasClientNonce_;
}
- (void) setHasClientNonce:(BOOL) value {
  hasClientNonce_ = !!value;
}
@synthesize clientNonce;
- (BOOL) hasServerNonce {
  return !!hasServerNonce_;
}
- (void) setHasServerNonce:(BOOL) value {
  hasServerNonce_ = !!value;
}
@synthesize serverNonce;
- (void) dealloc {
  self.key = nil;
  self.clientNonce = nil;
  self.serverNonce = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.key = [NSData data];
    self.clientNonce = [NSData data];
    self.serverNonce = [NSData data];
  }
  return self;
}
static MPCryptSetup* defaultMPCryptSetupInstance = nil;
+ (void) initialize {
  if (self == [MPCryptSetup class]) {
    defaultMPCryptSetupInstance = [[MPCryptSetup alloc] init];
  }
}
+ (MPCryptSetup*) defaultInstance {
  return defaultMPCryptSetupInstance;
}
- (MPCryptSetup*) defaultInstance {
  return defaultMPCryptSetupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeData:1 value:self.key];
  }
  if (self.hasClientNonce) {
    [output writeData:2 value:self.clientNonce];
  }
  if (self.hasServerNonce) {
    [output writeData:3 value:self.serverNonce];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasKey) {
    size += computeDataSize(1, self.key);
  }
  if (self.hasClientNonce) {
    size += computeDataSize(2, self.clientNonce);
  }
  if (self.hasServerNonce) {
    size += computeDataSize(3, self.serverNonce);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPCryptSetup*) parseFromData:(NSData*) data {
  return (MPCryptSetup*)[[[MPCryptSetup builder] mergeFromData:data] build];
}
+ (MPCryptSetup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPCryptSetup*)[[[MPCryptSetup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPCryptSetup*) parseFromInputStream:(NSInputStream*) input {
  return (MPCryptSetup*)[[[MPCryptSetup builder] mergeFromInputStream:input] build];
}
+ (MPCryptSetup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPCryptSetup*)[[[MPCryptSetup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPCryptSetup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPCryptSetup*)[[[MPCryptSetup builder] mergeFromCodedInputStream:input] build];
}
+ (MPCryptSetup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPCryptSetup*)[[[MPCryptSetup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPCryptSetup_Builder*) builder {
  return [[[MPCryptSetup_Builder alloc] init] autorelease];
}
+ (MPCryptSetup_Builder*) builderWithPrototype:(MPCryptSetup*) prototype {
  return [[MPCryptSetup builder] mergeFrom:prototype];
}
- (MPCryptSetup_Builder*) builder {
  return [MPCryptSetup builder];
}
- (MPCryptSetup_Builder*) toBuilder {
  return [MPCryptSetup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasClientNonce) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientNonce", self.clientNonce];
  }
  if (self.hasServerNonce) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverNonce", self.serverNonce];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPCryptSetup class]]) {
    return NO;
  }
  MPCryptSetup *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasClientNonce == otherMessage.hasClientNonce &&
      (!self.hasClientNonce || [self.clientNonce isEqual:otherMessage.clientNonce]) &&
      self.hasServerNonce == otherMessage.hasServerNonce &&
      (!self.hasServerNonce || [self.serverNonce isEqual:otherMessage.serverNonce]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasClientNonce) {
    hashCode = hashCode * 31 + [self.clientNonce hash];
  }
  if (self.hasServerNonce) {
    hashCode = hashCode * 31 + [self.serverNonce hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPCryptSetup_Builder()
@property (retain) MPCryptSetup* result;
@end

@implementation MPCryptSetup_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPCryptSetup alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPCryptSetup_Builder*) clear {
  self.result = [[[MPCryptSetup alloc] init] autorelease];
  return self;
}
- (MPCryptSetup_Builder*) clone {
  return [MPCryptSetup builderWithPrototype:result];
}
- (MPCryptSetup*) defaultInstance {
  return [MPCryptSetup defaultInstance];
}
- (MPCryptSetup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPCryptSetup*) buildPartial {
  MPCryptSetup* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPCryptSetup_Builder*) mergeFrom:(MPCryptSetup*) other {
  if (other == [MPCryptSetup defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasClientNonce) {
    [self setClientNonce:other.clientNonce];
  }
  if (other.hasServerNonce) {
    [self setServerNonce:other.serverNonce];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPCryptSetup_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPCryptSetup_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKey:[input readData]];
        break;
      }
      case 18: {
        [self setClientNonce:[input readData]];
        break;
      }
      case 26: {
        [self setServerNonce:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return result.hasKey;
}
- (NSData*) key {
  return result.key;
}
- (MPCryptSetup_Builder*) setKey:(NSData*) value {
  result.hasKey = YES;
  result.key = value;
  return self;
}
- (MPCryptSetup_Builder*) clearKey {
  result.hasKey = NO;
  result.key = [NSData data];
  return self;
}
- (BOOL) hasClientNonce {
  return result.hasClientNonce;
}
- (NSData*) clientNonce {
  return result.clientNonce;
}
- (MPCryptSetup_Builder*) setClientNonce:(NSData*) value {
  result.hasClientNonce = YES;
  result.clientNonce = value;
  return self;
}
- (MPCryptSetup_Builder*) clearClientNonce {
  result.hasClientNonce = NO;
  result.clientNonce = [NSData data];
  return self;
}
- (BOOL) hasServerNonce {
  return result.hasServerNonce;
}
- (NSData*) serverNonce {
  return result.serverNonce;
}
- (MPCryptSetup_Builder*) setServerNonce:(NSData*) value {
  result.hasServerNonce = YES;
  result.serverNonce = value;
  return self;
}
- (MPCryptSetup_Builder*) clearServerNonce {
  result.hasServerNonce = NO;
  result.serverNonce = [NSData data];
  return self;
}
@end

@interface MPContextActionModify ()
@property (retain) NSString* action;
@property (retain) NSString* text;
@property uint32_t context;
@property MPContextActionModify_Operation operation;
@end

@implementation MPContextActionModify

- (BOOL) hasAction {
  return !!hasAction_;
}
- (void) setHasAction:(BOOL) value {
  hasAction_ = !!value;
}
@synthesize action;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) value {
  hasText_ = !!value;
}
@synthesize text;
- (BOOL) hasContext {
  return !!hasContext_;
}
- (void) setHasContext:(BOOL) value {
  hasContext_ = !!value;
}
@synthesize context;
- (BOOL) hasOperation {
  return !!hasOperation_;
}
- (void) setHasOperation:(BOOL) value {
  hasOperation_ = !!value;
}
@synthesize operation;
- (void) dealloc {
  self.action = nil;
  self.text = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.action = @"";
    self.text = @"";
    self.context = 0;
    self.operation = MPContextActionModify_OperationAdd;
  }
  return self;
}
static MPContextActionModify* defaultMPContextActionModifyInstance = nil;
+ (void) initialize {
  if (self == [MPContextActionModify class]) {
    defaultMPContextActionModifyInstance = [[MPContextActionModify alloc] init];
  }
}
+ (MPContextActionModify*) defaultInstance {
  return defaultMPContextActionModifyInstance;
}
- (MPContextActionModify*) defaultInstance {
  return defaultMPContextActionModifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAction) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAction) {
    [output writeString:1 value:self.action];
  }
  if (self.hasText) {
    [output writeString:2 value:self.text];
  }
  if (self.hasContext) {
    [output writeUInt32:3 value:self.context];
  }
  if (self.hasOperation) {
    [output writeEnum:4 value:self.operation];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAction) {
    size += computeStringSize(1, self.action);
  }
  if (self.hasText) {
    size += computeStringSize(2, self.text);
  }
  if (self.hasContext) {
    size += computeUInt32Size(3, self.context);
  }
  if (self.hasOperation) {
    size += computeEnumSize(4, self.operation);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPContextActionModify*) parseFromData:(NSData*) data {
  return (MPContextActionModify*)[[[MPContextActionModify builder] mergeFromData:data] build];
}
+ (MPContextActionModify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPContextActionModify*)[[[MPContextActionModify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPContextActionModify*) parseFromInputStream:(NSInputStream*) input {
  return (MPContextActionModify*)[[[MPContextActionModify builder] mergeFromInputStream:input] build];
}
+ (MPContextActionModify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPContextActionModify*)[[[MPContextActionModify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPContextActionModify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPContextActionModify*)[[[MPContextActionModify builder] mergeFromCodedInputStream:input] build];
}
+ (MPContextActionModify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPContextActionModify*)[[[MPContextActionModify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPContextActionModify_Builder*) builder {
  return [[[MPContextActionModify_Builder alloc] init] autorelease];
}
+ (MPContextActionModify_Builder*) builderWithPrototype:(MPContextActionModify*) prototype {
  return [[MPContextActionModify builder] mergeFrom:prototype];
}
- (MPContextActionModify_Builder*) builder {
  return [MPContextActionModify builder];
}
- (MPContextActionModify_Builder*) toBuilder {
  return [MPContextActionModify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAction) {
    [output appendFormat:@"%@%@: %@\n", indent, @"action", self.action];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasContext) {
    [output appendFormat:@"%@%@: %@\n", indent, @"context", [NSNumber numberWithInt:self.context]];
  }
  if (self.hasOperation) {
    [output appendFormat:@"%@%@: %d\n", indent, @"operation", self.operation];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPContextActionModify class]]) {
    return NO;
  }
  MPContextActionModify *otherMessage = other;
  return
      self.hasAction == otherMessage.hasAction &&
      (!self.hasAction || [self.action isEqual:otherMessage.action]) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasContext == otherMessage.hasContext &&
      (!self.hasContext || self.context == otherMessage.context) &&
      self.hasOperation == otherMessage.hasOperation &&
      (!self.hasOperation || self.operation != otherMessage.operation) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAction) {
    hashCode = hashCode * 31 + [self.action hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasContext) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.context] hash];
  }
  if (self.hasOperation) {
    hashCode = hashCode * 31 + self.operation;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL MPContextActionModify_ContextIsValidValue(MPContextActionModify_Context value) {
  switch (value) {
    case MPContextActionModify_ContextServer:
    case MPContextActionModify_ContextChannel:
    case MPContextActionModify_ContextUser:
      return YES;
    default:
      return NO;
  }
}
BOOL MPContextActionModify_OperationIsValidValue(MPContextActionModify_Operation value) {
  switch (value) {
    case MPContextActionModify_OperationAdd:
    case MPContextActionModify_OperationRemove:
      return YES;
    default:
      return NO;
  }
}
@interface MPContextActionModify_Builder()
@property (retain) MPContextActionModify* result;
@end

@implementation MPContextActionModify_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPContextActionModify alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPContextActionModify_Builder*) clear {
  self.result = [[[MPContextActionModify alloc] init] autorelease];
  return self;
}
- (MPContextActionModify_Builder*) clone {
  return [MPContextActionModify builderWithPrototype:result];
}
- (MPContextActionModify*) defaultInstance {
  return [MPContextActionModify defaultInstance];
}
- (MPContextActionModify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPContextActionModify*) buildPartial {
  MPContextActionModify* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPContextActionModify_Builder*) mergeFrom:(MPContextActionModify*) other {
  if (other == [MPContextActionModify defaultInstance]) {
    return self;
  }
  if (other.hasAction) {
    [self setAction:other.action];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasContext) {
    [self setContext:other.context];
  }
  if (other.hasOperation) {
    [self setOperation:other.operation];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPContextActionModify_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPContextActionModify_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAction:[input readString]];
        break;
      }
      case 18: {
        [self setText:[input readString]];
        break;
      }
      case 24: {
        [self setContext:[input readUInt32]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (MPContextActionModify_OperationIsValidValue(value)) {
          [self setOperation:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasAction {
  return result.hasAction;
}
- (NSString*) action {
  return result.action;
}
- (MPContextActionModify_Builder*) setAction:(NSString*) value {
  result.hasAction = YES;
  result.action = value;
  return self;
}
- (MPContextActionModify_Builder*) clearAction {
  result.hasAction = NO;
  result.action = @"";
  return self;
}
- (BOOL) hasText {
  return result.hasText;
}
- (NSString*) text {
  return result.text;
}
- (MPContextActionModify_Builder*) setText:(NSString*) value {
  result.hasText = YES;
  result.text = value;
  return self;
}
- (MPContextActionModify_Builder*) clearText {
  result.hasText = NO;
  result.text = @"";
  return self;
}
- (BOOL) hasContext {
  return result.hasContext;
}
- (uint32_t) context {
  return result.context;
}
- (MPContextActionModify_Builder*) setContext:(uint32_t) value {
  result.hasContext = YES;
  result.context = value;
  return self;
}
- (MPContextActionModify_Builder*) clearContext {
  result.hasContext = NO;
  result.context = 0;
  return self;
}
- (BOOL) hasOperation {
  return result.hasOperation;
}
- (MPContextActionModify_Operation) operation {
  return result.operation;
}
- (MPContextActionModify_Builder*) setOperation:(MPContextActionModify_Operation) value {
  result.hasOperation = YES;
  result.operation = value;
  return self;
}
- (MPContextActionModify_Builder*) clearOperation {
  result.hasOperation = NO;
  result.operation = MPContextActionModify_OperationAdd;
  return self;
}
@end

@interface MPContextAction ()
@property uint32_t session;
@property uint32_t channelId;
@property (retain) NSString* action;
@end

@implementation MPContextAction

- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) value {
  hasSession_ = !!value;
}
@synthesize session;
- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value {
  hasChannelId_ = !!value;
}
@synthesize channelId;
- (BOOL) hasAction {
  return !!hasAction_;
}
- (void) setHasAction:(BOOL) value {
  hasAction_ = !!value;
}
@synthesize action;
- (void) dealloc {
  self.action = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.session = 0;
    self.channelId = 0;
    self.action = @"";
  }
  return self;
}
static MPContextAction* defaultMPContextActionInstance = nil;
+ (void) initialize {
  if (self == [MPContextAction class]) {
    defaultMPContextActionInstance = [[MPContextAction alloc] init];
  }
}
+ (MPContextAction*) defaultInstance {
  return defaultMPContextActionInstance;
}
- (MPContextAction*) defaultInstance {
  return defaultMPContextActionInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAction) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSession) {
    [output writeUInt32:1 value:self.session];
  }
  if (self.hasChannelId) {
    [output writeUInt32:2 value:self.channelId];
  }
  if (self.hasAction) {
    [output writeString:3 value:self.action];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSession) {
    size += computeUInt32Size(1, self.session);
  }
  if (self.hasChannelId) {
    size += computeUInt32Size(2, self.channelId);
  }
  if (self.hasAction) {
    size += computeStringSize(3, self.action);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPContextAction*) parseFromData:(NSData*) data {
  return (MPContextAction*)[[[MPContextAction builder] mergeFromData:data] build];
}
+ (MPContextAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPContextAction*)[[[MPContextAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPContextAction*) parseFromInputStream:(NSInputStream*) input {
  return (MPContextAction*)[[[MPContextAction builder] mergeFromInputStream:input] build];
}
+ (MPContextAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPContextAction*)[[[MPContextAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPContextAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPContextAction*)[[[MPContextAction builder] mergeFromCodedInputStream:input] build];
}
+ (MPContextAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPContextAction*)[[[MPContextAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPContextAction_Builder*) builder {
  return [[[MPContextAction_Builder alloc] init] autorelease];
}
+ (MPContextAction_Builder*) builderWithPrototype:(MPContextAction*) prototype {
  return [[MPContextAction builder] mergeFrom:prototype];
}
- (MPContextAction_Builder*) builder {
  return [MPContextAction builder];
}
- (MPContextAction_Builder*) toBuilder {
  return [MPContextAction builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", [NSNumber numberWithInt:self.session]];
  }
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInt:self.channelId]];
  }
  if (self.hasAction) {
    [output appendFormat:@"%@%@: %@\n", indent, @"action", self.action];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPContextAction class]]) {
    return NO;
  }
  MPContextAction *otherMessage = other;
  return
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || self.session == otherMessage.session) &&
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasAction == otherMessage.hasAction &&
      (!self.hasAction || [self.action isEqual:otherMessage.action]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSession) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.session] hash];
  }
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.channelId] hash];
  }
  if (self.hasAction) {
    hashCode = hashCode * 31 + [self.action hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPContextAction_Builder()
@property (retain) MPContextAction* result;
@end

@implementation MPContextAction_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPContextAction alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPContextAction_Builder*) clear {
  self.result = [[[MPContextAction alloc] init] autorelease];
  return self;
}
- (MPContextAction_Builder*) clone {
  return [MPContextAction builderWithPrototype:result];
}
- (MPContextAction*) defaultInstance {
  return [MPContextAction defaultInstance];
}
- (MPContextAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPContextAction*) buildPartial {
  MPContextAction* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPContextAction_Builder*) mergeFrom:(MPContextAction*) other {
  if (other == [MPContextAction defaultInstance]) {
    return self;
  }
  if (other.hasSession) {
    [self setSession:other.session];
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasAction) {
    [self setAction:other.action];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPContextAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPContextAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSession:[input readUInt32]];
        break;
      }
      case 16: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setAction:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSession {
  return result.hasSession;
}
- (uint32_t) session {
  return result.session;
}
- (MPContextAction_Builder*) setSession:(uint32_t) value {
  result.hasSession = YES;
  result.session = value;
  return self;
}
- (MPContextAction_Builder*) clearSession {
  result.hasSession = NO;
  result.session = 0;
  return self;
}
- (BOOL) hasChannelId {
  return result.hasChannelId;
}
- (uint32_t) channelId {
  return result.channelId;
}
- (MPContextAction_Builder*) setChannelId:(uint32_t) value {
  result.hasChannelId = YES;
  result.channelId = value;
  return self;
}
- (MPContextAction_Builder*) clearChannelId {
  result.hasChannelId = NO;
  result.channelId = 0;
  return self;
}
- (BOOL) hasAction {
  return result.hasAction;
}
- (NSString*) action {
  return result.action;
}
- (MPContextAction_Builder*) setAction:(NSString*) value {
  result.hasAction = YES;
  result.action = value;
  return self;
}
- (MPContextAction_Builder*) clearAction {
  result.hasAction = NO;
  result.action = @"";
  return self;
}
@end

@interface MPUserList ()
@property (retain) PBAppendableArray * usersArray;
@end

@implementation MPUserList

@synthesize usersArray;
@dynamic users;
- (void) dealloc {
  self.usersArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MPUserList* defaultMPUserListInstance = nil;
+ (void) initialize {
  if (self == [MPUserList class]) {
    defaultMPUserListInstance = [[MPUserList alloc] init];
  }
}
+ (MPUserList*) defaultInstance {
  return defaultMPUserListInstance;
}
- (MPUserList*) defaultInstance {
  return defaultMPUserListInstance;
}
- (PBArray *)users {
  return usersArray;
}
- (MPUserList_User*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  for (MPUserList_User* element in self.users) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MPUserList_User *element in self.usersArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MPUserList_User *element in self.usersArray) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPUserList*) parseFromData:(NSData*) data {
  return (MPUserList*)[[[MPUserList builder] mergeFromData:data] build];
}
+ (MPUserList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserList*)[[[MPUserList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUserList*) parseFromInputStream:(NSInputStream*) input {
  return (MPUserList*)[[[MPUserList builder] mergeFromInputStream:input] build];
}
+ (MPUserList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserList*)[[[MPUserList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUserList*)[[[MPUserList builder] mergeFromCodedInputStream:input] build];
}
+ (MPUserList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserList*)[[[MPUserList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserList_Builder*) builder {
  return [[[MPUserList_Builder alloc] init] autorelease];
}
+ (MPUserList_Builder*) builderWithPrototype:(MPUserList*) prototype {
  return [[MPUserList builder] mergeFrom:prototype];
}
- (MPUserList_Builder*) builder {
  return [MPUserList builder];
}
- (MPUserList_Builder*) toBuilder {
  return [MPUserList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (MPUserList_User* element in self.usersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUserList class]]) {
    return NO;
  }
  MPUserList *otherMessage = other;
  return
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (MPUserList_User* element in self.usersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUserList_User ()
@property uint32_t userId;
@property (retain) NSString* name;
@end

@implementation MPUserList_User

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.name = @"";
  }
  return self;
}
static MPUserList_User* defaultMPUserList_UserInstance = nil;
+ (void) initialize {
  if (self == [MPUserList_User class]) {
    defaultMPUserList_UserInstance = [[MPUserList_User alloc] init];
  }
}
+ (MPUserList_User*) defaultInstance {
  return defaultMPUserList_UserInstance;
}
- (MPUserList_User*) defaultInstance {
  return defaultMPUserList_UserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeUInt32Size(1, self.userId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPUserList_User*) parseFromData:(NSData*) data {
  return (MPUserList_User*)[[[MPUserList_User builder] mergeFromData:data] build];
}
+ (MPUserList_User*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserList_User*)[[[MPUserList_User builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUserList_User*) parseFromInputStream:(NSInputStream*) input {
  return (MPUserList_User*)[[[MPUserList_User builder] mergeFromInputStream:input] build];
}
+ (MPUserList_User*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserList_User*)[[[MPUserList_User builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserList_User*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUserList_User*)[[[MPUserList_User builder] mergeFromCodedInputStream:input] build];
}
+ (MPUserList_User*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserList_User*)[[[MPUserList_User builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserList_User_Builder*) builder {
  return [[[MPUserList_User_Builder alloc] init] autorelease];
}
+ (MPUserList_User_Builder*) builderWithPrototype:(MPUserList_User*) prototype {
  return [[MPUserList_User builder] mergeFrom:prototype];
}
- (MPUserList_User_Builder*) builder {
  return [MPUserList_User builder];
}
- (MPUserList_User_Builder*) toBuilder {
  return [MPUserList_User builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInt:self.userId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUserList_User class]]) {
    return NO;
  }
  MPUserList_User *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.userId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUserList_User_Builder()
@property (retain) MPUserList_User* result;
@end

@implementation MPUserList_User_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPUserList_User alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPUserList_User_Builder*) clear {
  self.result = [[[MPUserList_User alloc] init] autorelease];
  return self;
}
- (MPUserList_User_Builder*) clone {
  return [MPUserList_User builderWithPrototype:result];
}
- (MPUserList_User*) defaultInstance {
  return [MPUserList_User defaultInstance];
}
- (MPUserList_User*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUserList_User*) buildPartial {
  MPUserList_User* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPUserList_User_Builder*) mergeFrom:(MPUserList_User*) other {
  if (other == [MPUserList_User defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUserList_User_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUserList_User_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (uint32_t) userId {
  return result.userId;
}
- (MPUserList_User_Builder*) setUserId:(uint32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (MPUserList_User_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MPUserList_User_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MPUserList_User_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
@end

@interface MPUserList_Builder()
@property (retain) MPUserList* result;
@end

@implementation MPUserList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPUserList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPUserList_Builder*) clear {
  self.result = [[[MPUserList alloc] init] autorelease];
  return self;
}
- (MPUserList_Builder*) clone {
  return [MPUserList builderWithPrototype:result];
}
- (MPUserList*) defaultInstance {
  return [MPUserList defaultInstance];
}
- (MPUserList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUserList*) buildPartial {
  MPUserList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPUserList_Builder*) mergeFrom:(MPUserList*) other {
  if (other == [MPUserList defaultInstance]) {
    return self;
  }
  if (other.usersArray.count > 0) {
    if (result.usersArray == nil) {
      result.usersArray = [[other.usersArray copyWithZone:[other.usersArray zone]] autorelease];
    } else {
      [result.usersArray appendArray:other.usersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUserList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUserList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MPUserList_User_Builder* subBuilder = [MPUserList_User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)users {
  return result.usersArray;
}
- (MPUserList_User*)usersAtIndex:(NSUInteger)index {
  return [result usersAtIndex:index];
}
- (MPUserList_Builder *)addUsers:(MPUserList_User*)value {
  if (result.usersArray == nil) {
    result.usersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.usersArray addObject:value];
  return self;
}
- (MPUserList_Builder *)setUsersArray:(NSArray *)array {
  result.usersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MPUserList_Builder *)setUsersValues:(const MPUserList_User* *)values count:(NSUInteger)count {
  result.usersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MPUserList_Builder *)clearUsers {
  result.usersArray = nil;
  return self;
}
@end

@interface MPVoiceTarget ()
@property uint32_t id;
@property (retain) PBAppendableArray * targetsArray;
@end

@implementation MPVoiceTarget

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
@synthesize targetsArray;
@dynamic targets;
- (void) dealloc {
  self.targetsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
  }
  return self;
}
static MPVoiceTarget* defaultMPVoiceTargetInstance = nil;
+ (void) initialize {
  if (self == [MPVoiceTarget class]) {
    defaultMPVoiceTargetInstance = [[MPVoiceTarget alloc] init];
  }
}
+ (MPVoiceTarget*) defaultInstance {
  return defaultMPVoiceTargetInstance;
}
- (MPVoiceTarget*) defaultInstance {
  return defaultMPVoiceTargetInstance;
}
- (PBArray *)targets {
  return targetsArray;
}
- (MPVoiceTarget_Target*)targetsAtIndex:(NSUInteger)index {
  return [targetsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  for (MPVoiceTarget_Target *element in self.targetsArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeUInt32Size(1, self.id);
  }
  for (MPVoiceTarget_Target *element in self.targetsArray) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPVoiceTarget*) parseFromData:(NSData*) data {
  return (MPVoiceTarget*)[[[MPVoiceTarget builder] mergeFromData:data] build];
}
+ (MPVoiceTarget*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVoiceTarget*)[[[MPVoiceTarget builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPVoiceTarget*) parseFromInputStream:(NSInputStream*) input {
  return (MPVoiceTarget*)[[[MPVoiceTarget builder] mergeFromInputStream:input] build];
}
+ (MPVoiceTarget*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVoiceTarget*)[[[MPVoiceTarget builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPVoiceTarget*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPVoiceTarget*)[[[MPVoiceTarget builder] mergeFromCodedInputStream:input] build];
}
+ (MPVoiceTarget*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVoiceTarget*)[[[MPVoiceTarget builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPVoiceTarget_Builder*) builder {
  return [[[MPVoiceTarget_Builder alloc] init] autorelease];
}
+ (MPVoiceTarget_Builder*) builderWithPrototype:(MPVoiceTarget*) prototype {
  return [[MPVoiceTarget builder] mergeFrom:prototype];
}
- (MPVoiceTarget_Builder*) builder {
  return [MPVoiceTarget builder];
}
- (MPVoiceTarget_Builder*) toBuilder {
  return [MPVoiceTarget builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  for (MPVoiceTarget_Target* element in self.targetsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"targets"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPVoiceTarget class]]) {
    return NO;
  }
  MPVoiceTarget *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      [self.targetsArray isEqualToArray:otherMessage.targetsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  for (MPVoiceTarget_Target* element in self.targetsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPVoiceTarget_Target ()
@property (retain) PBAppendableArray * sessionArray;
@property uint32_t channelId;
@property (retain) NSString* group;
@property BOOL links;
@property BOOL children;
@end

@implementation MPVoiceTarget_Target

@synthesize sessionArray;
@dynamic session;
- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value {
  hasChannelId_ = !!value;
}
@synthesize channelId;
- (BOOL) hasGroup {
  return !!hasGroup_;
}
- (void) setHasGroup:(BOOL) value {
  hasGroup_ = !!value;
}
@synthesize group;
- (BOOL) hasLinks {
  return !!hasLinks_;
}
- (void) setHasLinks:(BOOL) value {
  hasLinks_ = !!value;
}
- (BOOL) links {
  return !!links_;
}
- (void) setLinks:(BOOL) value {
  links_ = !!value;
}
- (BOOL) hasChildren {
  return !!hasChildren_;
}
- (void) setHasChildren:(BOOL) value {
  hasChildren_ = !!value;
}
- (BOOL) children {
  return !!children_;
}
- (void) setChildren:(BOOL) value {
  children_ = !!value;
}
- (void) dealloc {
  self.sessionArray = nil;
  self.group = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.channelId = 0;
    self.group = @"";
    self.links = NO;
    self.children = NO;
  }
  return self;
}
static MPVoiceTarget_Target* defaultMPVoiceTarget_TargetInstance = nil;
+ (void) initialize {
  if (self == [MPVoiceTarget_Target class]) {
    defaultMPVoiceTarget_TargetInstance = [[MPVoiceTarget_Target alloc] init];
  }
}
+ (MPVoiceTarget_Target*) defaultInstance {
  return defaultMPVoiceTarget_TargetInstance;
}
- (MPVoiceTarget_Target*) defaultInstance {
  return defaultMPVoiceTarget_TargetInstance;
}
- (PBArray *)session {
  return sessionArray;
}
- (uint32_t)sessionAtIndex:(NSUInteger)index {
  return [sessionArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger sessionArrayCount = self.sessionArray.count;
  if (sessionArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.sessionArray.data;
    for (NSUInteger i = 0; i < sessionArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  if (self.hasChannelId) {
    [output writeUInt32:2 value:self.channelId];
  }
  if (self.hasGroup) {
    [output writeString:3 value:self.group];
  }
  if (self.hasLinks) {
    [output writeBool:4 value:self.links];
  }
  if (self.hasChildren) {
    [output writeBool:5 value:self.children];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.sessionArray.count;
    const uint32_t *values = (const uint32_t *)self.sessionArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  if (self.hasChannelId) {
    size += computeUInt32Size(2, self.channelId);
  }
  if (self.hasGroup) {
    size += computeStringSize(3, self.group);
  }
  if (self.hasLinks) {
    size += computeBoolSize(4, self.links);
  }
  if (self.hasChildren) {
    size += computeBoolSize(5, self.children);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPVoiceTarget_Target*) parseFromData:(NSData*) data {
  return (MPVoiceTarget_Target*)[[[MPVoiceTarget_Target builder] mergeFromData:data] build];
}
+ (MPVoiceTarget_Target*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVoiceTarget_Target*)[[[MPVoiceTarget_Target builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPVoiceTarget_Target*) parseFromInputStream:(NSInputStream*) input {
  return (MPVoiceTarget_Target*)[[[MPVoiceTarget_Target builder] mergeFromInputStream:input] build];
}
+ (MPVoiceTarget_Target*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVoiceTarget_Target*)[[[MPVoiceTarget_Target builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPVoiceTarget_Target*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPVoiceTarget_Target*)[[[MPVoiceTarget_Target builder] mergeFromCodedInputStream:input] build];
}
+ (MPVoiceTarget_Target*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVoiceTarget_Target*)[[[MPVoiceTarget_Target builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPVoiceTarget_Target_Builder*) builder {
  return [[[MPVoiceTarget_Target_Builder alloc] init] autorelease];
}
+ (MPVoiceTarget_Target_Builder*) builderWithPrototype:(MPVoiceTarget_Target*) prototype {
  return [[MPVoiceTarget_Target builder] mergeFrom:prototype];
}
- (MPVoiceTarget_Target_Builder*) builder {
  return [MPVoiceTarget_Target builder];
}
- (MPVoiceTarget_Target_Builder*) toBuilder {
  return [MPVoiceTarget_Target builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* value in self.sessionArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", value];
  }
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInt:self.channelId]];
  }
  if (self.hasGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"group", self.group];
  }
  if (self.hasLinks) {
    [output appendFormat:@"%@%@: %@\n", indent, @"links", [NSNumber numberWithBool:self.links]];
  }
  if (self.hasChildren) {
    [output appendFormat:@"%@%@: %@\n", indent, @"children", [NSNumber numberWithBool:self.children]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPVoiceTarget_Target class]]) {
    return NO;
  }
  MPVoiceTarget_Target *otherMessage = other;
  return
      [self.sessionArray isEqualToArray:otherMessage.sessionArray] &&
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasGroup == otherMessage.hasGroup &&
      (!self.hasGroup || [self.group isEqual:otherMessage.group]) &&
      self.hasLinks == otherMessage.hasLinks &&
      (!self.hasLinks || self.links == otherMessage.links) &&
      self.hasChildren == otherMessage.hasChildren &&
      (!self.hasChildren || self.children == otherMessage.children) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* value in self.sessionArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.channelId] hash];
  }
  if (self.hasGroup) {
    hashCode = hashCode * 31 + [self.group hash];
  }
  if (self.hasLinks) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.links] hash];
  }
  if (self.hasChildren) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.children] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPVoiceTarget_Target_Builder()
@property (retain) MPVoiceTarget_Target* result;
@end

@implementation MPVoiceTarget_Target_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPVoiceTarget_Target alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPVoiceTarget_Target_Builder*) clear {
  self.result = [[[MPVoiceTarget_Target alloc] init] autorelease];
  return self;
}
- (MPVoiceTarget_Target_Builder*) clone {
  return [MPVoiceTarget_Target builderWithPrototype:result];
}
- (MPVoiceTarget_Target*) defaultInstance {
  return [MPVoiceTarget_Target defaultInstance];
}
- (MPVoiceTarget_Target*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPVoiceTarget_Target*) buildPartial {
  MPVoiceTarget_Target* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPVoiceTarget_Target_Builder*) mergeFrom:(MPVoiceTarget_Target*) other {
  if (other == [MPVoiceTarget_Target defaultInstance]) {
    return self;
  }
  if (other.sessionArray.count > 0) {
    if (result.sessionArray == nil) {
      result.sessionArray = [[other.sessionArray copyWithZone:[other.sessionArray zone]] autorelease];
    } else {
      [result.sessionArray appendArray:other.sessionArray];
    }
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasGroup) {
    [self setGroup:other.group];
  }
  if (other.hasLinks) {
    [self setLinks:other.links];
  }
  if (other.hasChildren) {
    [self setChildren:other.children];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPVoiceTarget_Target_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPVoiceTarget_Target_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addSession:[input readUInt32]];
        break;
      }
      case 16: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setGroup:[input readString]];
        break;
      }
      case 32: {
        [self setLinks:[input readBool]];
        break;
      }
      case 40: {
        [self setChildren:[input readBool]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)session {
  return result.sessionArray;
}
- (uint32_t)sessionAtIndex:(NSUInteger)index {
  return [result sessionAtIndex:index];
}
- (MPVoiceTarget_Target_Builder *)addSession:(uint32_t)value {
  if (result.sessionArray == nil) {
    result.sessionArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.sessionArray addUint32:value];
  return self;
}
- (MPVoiceTarget_Target_Builder *)setSessionArray:(NSArray *)array {
  result.sessionArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPVoiceTarget_Target_Builder *)setSessionValues:(const uint32_t *)values count:(NSUInteger)count {
  result.sessionArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPVoiceTarget_Target_Builder *)clearSession {
  result.sessionArray = nil;
  return self;
}
- (BOOL) hasChannelId {
  return result.hasChannelId;
}
- (uint32_t) channelId {
  return result.channelId;
}
- (MPVoiceTarget_Target_Builder*) setChannelId:(uint32_t) value {
  result.hasChannelId = YES;
  result.channelId = value;
  return self;
}
- (MPVoiceTarget_Target_Builder*) clearChannelId {
  result.hasChannelId = NO;
  result.channelId = 0;
  return self;
}
- (BOOL) hasGroup {
  return result.hasGroup;
}
- (NSString*) group {
  return result.group;
}
- (MPVoiceTarget_Target_Builder*) setGroup:(NSString*) value {
  result.hasGroup = YES;
  result.group = value;
  return self;
}
- (MPVoiceTarget_Target_Builder*) clearGroup {
  result.hasGroup = NO;
  result.group = @"";
  return self;
}
- (BOOL) hasLinks {
  return result.hasLinks;
}
- (BOOL) links {
  return result.links;
}
- (MPVoiceTarget_Target_Builder*) setLinks:(BOOL) value {
  result.hasLinks = YES;
  result.links = value;
  return self;
}
- (MPVoiceTarget_Target_Builder*) clearLinks {
  result.hasLinks = NO;
  result.links = NO;
  return self;
}
- (BOOL) hasChildren {
  return result.hasChildren;
}
- (BOOL) children {
  return result.children;
}
- (MPVoiceTarget_Target_Builder*) setChildren:(BOOL) value {
  result.hasChildren = YES;
  result.children = value;
  return self;
}
- (MPVoiceTarget_Target_Builder*) clearChildren {
  result.hasChildren = NO;
  result.children = NO;
  return self;
}
@end

@interface MPVoiceTarget_Builder()
@property (retain) MPVoiceTarget* result;
@end

@implementation MPVoiceTarget_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPVoiceTarget alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPVoiceTarget_Builder*) clear {
  self.result = [[[MPVoiceTarget alloc] init] autorelease];
  return self;
}
- (MPVoiceTarget_Builder*) clone {
  return [MPVoiceTarget builderWithPrototype:result];
}
- (MPVoiceTarget*) defaultInstance {
  return [MPVoiceTarget defaultInstance];
}
- (MPVoiceTarget*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPVoiceTarget*) buildPartial {
  MPVoiceTarget* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPVoiceTarget_Builder*) mergeFrom:(MPVoiceTarget*) other {
  if (other == [MPVoiceTarget defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.targetsArray.count > 0) {
    if (result.targetsArray == nil) {
      result.targetsArray = [[other.targetsArray copyWithZone:[other.targetsArray zone]] autorelease];
    } else {
      [result.targetsArray appendArray:other.targetsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPVoiceTarget_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPVoiceTarget_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 18: {
        MPVoiceTarget_Target_Builder* subBuilder = [MPVoiceTarget_Target builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTargets:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (uint32_t) id {
  return result.id;
}
- (MPVoiceTarget_Builder*) setId:(uint32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MPVoiceTarget_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (PBAppendableArray *)targets {
  return result.targetsArray;
}
- (MPVoiceTarget_Target*)targetsAtIndex:(NSUInteger)index {
  return [result targetsAtIndex:index];
}
- (MPVoiceTarget_Builder *)addTargets:(MPVoiceTarget_Target*)value {
  if (result.targetsArray == nil) {
    result.targetsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.targetsArray addObject:value];
  return self;
}
- (MPVoiceTarget_Builder *)setTargetsArray:(NSArray *)array {
  result.targetsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MPVoiceTarget_Builder *)setTargetsValues:(const MPVoiceTarget_Target* *)values count:(NSUInteger)count {
  result.targetsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MPVoiceTarget_Builder *)clearTargets {
  result.targetsArray = nil;
  return self;
}
@end

@interface MPPermissionQuery ()
@property uint32_t channelId;
@property uint32_t permissions;
@property BOOL flush;
@end

@implementation MPPermissionQuery

- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value {
  hasChannelId_ = !!value;
}
@synthesize channelId;
- (BOOL) hasPermissions {
  return !!hasPermissions_;
}
- (void) setHasPermissions:(BOOL) value {
  hasPermissions_ = !!value;
}
@synthesize permissions;
- (BOOL) hasFlush {
  return !!hasFlush_;
}
- (void) setHasFlush:(BOOL) value {
  hasFlush_ = !!value;
}
- (BOOL) flush {
  return !!flush_;
}
- (void) setFlush:(BOOL) value {
  flush_ = !!value;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.channelId = 0;
    self.permissions = 0;
    self.flush = NO;
  }
  return self;
}
static MPPermissionQuery* defaultMPPermissionQueryInstance = nil;
+ (void) initialize {
  if (self == [MPPermissionQuery class]) {
    defaultMPPermissionQueryInstance = [[MPPermissionQuery alloc] init];
  }
}
+ (MPPermissionQuery*) defaultInstance {
  return defaultMPPermissionQueryInstance;
}
- (MPPermissionQuery*) defaultInstance {
  return defaultMPPermissionQueryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelId) {
    [output writeUInt32:1 value:self.channelId];
  }
  if (self.hasPermissions) {
    [output writeUInt32:2 value:self.permissions];
  }
  if (self.hasFlush) {
    [output writeBool:3 value:self.flush];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasChannelId) {
    size += computeUInt32Size(1, self.channelId);
  }
  if (self.hasPermissions) {
    size += computeUInt32Size(2, self.permissions);
  }
  if (self.hasFlush) {
    size += computeBoolSize(3, self.flush);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPPermissionQuery*) parseFromData:(NSData*) data {
  return (MPPermissionQuery*)[[[MPPermissionQuery builder] mergeFromData:data] build];
}
+ (MPPermissionQuery*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPermissionQuery*)[[[MPPermissionQuery builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPPermissionQuery*) parseFromInputStream:(NSInputStream*) input {
  return (MPPermissionQuery*)[[[MPPermissionQuery builder] mergeFromInputStream:input] build];
}
+ (MPPermissionQuery*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPermissionQuery*)[[[MPPermissionQuery builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPermissionQuery*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPPermissionQuery*)[[[MPPermissionQuery builder] mergeFromCodedInputStream:input] build];
}
+ (MPPermissionQuery*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPermissionQuery*)[[[MPPermissionQuery builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPermissionQuery_Builder*) builder {
  return [[[MPPermissionQuery_Builder alloc] init] autorelease];
}
+ (MPPermissionQuery_Builder*) builderWithPrototype:(MPPermissionQuery*) prototype {
  return [[MPPermissionQuery builder] mergeFrom:prototype];
}
- (MPPermissionQuery_Builder*) builder {
  return [MPPermissionQuery builder];
}
- (MPPermissionQuery_Builder*) toBuilder {
  return [MPPermissionQuery builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInt:self.channelId]];
  }
  if (self.hasPermissions) {
    [output appendFormat:@"%@%@: %@\n", indent, @"permissions", [NSNumber numberWithInt:self.permissions]];
  }
  if (self.hasFlush) {
    [output appendFormat:@"%@%@: %@\n", indent, @"flush", [NSNumber numberWithBool:self.flush]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPPermissionQuery class]]) {
    return NO;
  }
  MPPermissionQuery *otherMessage = other;
  return
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasPermissions == otherMessage.hasPermissions &&
      (!self.hasPermissions || self.permissions == otherMessage.permissions) &&
      self.hasFlush == otherMessage.hasFlush &&
      (!self.hasFlush || self.flush == otherMessage.flush) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.channelId] hash];
  }
  if (self.hasPermissions) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.permissions] hash];
  }
  if (self.hasFlush) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.flush] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPPermissionQuery_Builder()
@property (retain) MPPermissionQuery* result;
@end

@implementation MPPermissionQuery_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPPermissionQuery alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPPermissionQuery_Builder*) clear {
  self.result = [[[MPPermissionQuery alloc] init] autorelease];
  return self;
}
- (MPPermissionQuery_Builder*) clone {
  return [MPPermissionQuery builderWithPrototype:result];
}
- (MPPermissionQuery*) defaultInstance {
  return [MPPermissionQuery defaultInstance];
}
- (MPPermissionQuery*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPPermissionQuery*) buildPartial {
  MPPermissionQuery* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPPermissionQuery_Builder*) mergeFrom:(MPPermissionQuery*) other {
  if (other == [MPPermissionQuery defaultInstance]) {
    return self;
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasPermissions) {
    [self setPermissions:other.permissions];
  }
  if (other.hasFlush) {
    [self setFlush:other.flush];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPPermissionQuery_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPPermissionQuery_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setPermissions:[input readUInt32]];
        break;
      }
      case 24: {
        [self setFlush:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelId {
  return result.hasChannelId;
}
- (uint32_t) channelId {
  return result.channelId;
}
- (MPPermissionQuery_Builder*) setChannelId:(uint32_t) value {
  result.hasChannelId = YES;
  result.channelId = value;
  return self;
}
- (MPPermissionQuery_Builder*) clearChannelId {
  result.hasChannelId = NO;
  result.channelId = 0;
  return self;
}
- (BOOL) hasPermissions {
  return result.hasPermissions;
}
- (uint32_t) permissions {
  return result.permissions;
}
- (MPPermissionQuery_Builder*) setPermissions:(uint32_t) value {
  result.hasPermissions = YES;
  result.permissions = value;
  return self;
}
- (MPPermissionQuery_Builder*) clearPermissions {
  result.hasPermissions = NO;
  result.permissions = 0;
  return self;
}
- (BOOL) hasFlush {
  return result.hasFlush;
}
- (BOOL) flush {
  return result.flush;
}
- (MPPermissionQuery_Builder*) setFlush:(BOOL) value {
  result.hasFlush = YES;
  result.flush = value;
  return self;
}
- (MPPermissionQuery_Builder*) clearFlush {
  result.hasFlush = NO;
  result.flush = NO;
  return self;
}
@end

@interface MPCodecVersion ()
@property int32_t alpha;
@property int32_t beta;
@property BOOL preferAlpha;
@property BOOL opus;
@end

@implementation MPCodecVersion

- (BOOL) hasAlpha {
  return !!hasAlpha_;
}
- (void) setHasAlpha:(BOOL) value {
  hasAlpha_ = !!value;
}
@synthesize alpha;
- (BOOL) hasBeta {
  return !!hasBeta_;
}
- (void) setHasBeta:(BOOL) value {
  hasBeta_ = !!value;
}
@synthesize beta;
- (BOOL) hasPreferAlpha {
  return !!hasPreferAlpha_;
}
- (void) setHasPreferAlpha:(BOOL) value {
  hasPreferAlpha_ = !!value;
}
- (BOOL) preferAlpha {
  return !!preferAlpha_;
}
- (void) setPreferAlpha:(BOOL) value {
  preferAlpha_ = !!value;
}
- (BOOL) hasOpus {
  return !!hasOpus_;
}
- (void) setHasOpus:(BOOL) value {
  hasOpus_ = !!value;
}
- (BOOL) opus {
  return !!opus_;
}
- (void) setOpus:(BOOL) value {
  opus_ = !!value;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.alpha = 0;
    self.beta = 0;
    self.preferAlpha = YES;
    self.opus = NO;
  }
  return self;
}
static MPCodecVersion* defaultMPCodecVersionInstance = nil;
+ (void) initialize {
  if (self == [MPCodecVersion class]) {
    defaultMPCodecVersionInstance = [[MPCodecVersion alloc] init];
  }
}
+ (MPCodecVersion*) defaultInstance {
  return defaultMPCodecVersionInstance;
}
- (MPCodecVersion*) defaultInstance {
  return defaultMPCodecVersionInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAlpha) {
    return NO;
  }
  if (!self.hasBeta) {
    return NO;
  }
  if (!self.hasPreferAlpha) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAlpha) {
    [output writeInt32:1 value:self.alpha];
  }
  if (self.hasBeta) {
    [output writeInt32:2 value:self.beta];
  }
  if (self.hasPreferAlpha) {
    [output writeBool:3 value:self.preferAlpha];
  }
  if (self.hasOpus) {
    [output writeBool:4 value:self.opus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAlpha) {
    size += computeInt32Size(1, self.alpha);
  }
  if (self.hasBeta) {
    size += computeInt32Size(2, self.beta);
  }
  if (self.hasPreferAlpha) {
    size += computeBoolSize(3, self.preferAlpha);
  }
  if (self.hasOpus) {
    size += computeBoolSize(4, self.opus);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPCodecVersion*) parseFromData:(NSData*) data {
  return (MPCodecVersion*)[[[MPCodecVersion builder] mergeFromData:data] build];
}
+ (MPCodecVersion*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPCodecVersion*)[[[MPCodecVersion builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPCodecVersion*) parseFromInputStream:(NSInputStream*) input {
  return (MPCodecVersion*)[[[MPCodecVersion builder] mergeFromInputStream:input] build];
}
+ (MPCodecVersion*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPCodecVersion*)[[[MPCodecVersion builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPCodecVersion*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPCodecVersion*)[[[MPCodecVersion builder] mergeFromCodedInputStream:input] build];
}
+ (MPCodecVersion*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPCodecVersion*)[[[MPCodecVersion builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPCodecVersion_Builder*) builder {
  return [[[MPCodecVersion_Builder alloc] init] autorelease];
}
+ (MPCodecVersion_Builder*) builderWithPrototype:(MPCodecVersion*) prototype {
  return [[MPCodecVersion builder] mergeFrom:prototype];
}
- (MPCodecVersion_Builder*) builder {
  return [MPCodecVersion builder];
}
- (MPCodecVersion_Builder*) toBuilder {
  return [MPCodecVersion builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAlpha) {
    [output appendFormat:@"%@%@: %@\n", indent, @"alpha", [NSNumber numberWithInt:self.alpha]];
  }
  if (self.hasBeta) {
    [output appendFormat:@"%@%@: %@\n", indent, @"beta", [NSNumber numberWithInt:self.beta]];
  }
  if (self.hasPreferAlpha) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preferAlpha", [NSNumber numberWithBool:self.preferAlpha]];
  }
  if (self.hasOpus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opus", [NSNumber numberWithBool:self.opus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPCodecVersion class]]) {
    return NO;
  }
  MPCodecVersion *otherMessage = other;
  return
      self.hasAlpha == otherMessage.hasAlpha &&
      (!self.hasAlpha || self.alpha == otherMessage.alpha) &&
      self.hasBeta == otherMessage.hasBeta &&
      (!self.hasBeta || self.beta == otherMessage.beta) &&
      self.hasPreferAlpha == otherMessage.hasPreferAlpha &&
      (!self.hasPreferAlpha || self.preferAlpha == otherMessage.preferAlpha) &&
      self.hasOpus == otherMessage.hasOpus &&
      (!self.hasOpus || self.opus == otherMessage.opus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAlpha) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.alpha] hash];
  }
  if (self.hasBeta) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.beta] hash];
  }
  if (self.hasPreferAlpha) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.preferAlpha] hash];
  }
  if (self.hasOpus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.opus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPCodecVersion_Builder()
@property (retain) MPCodecVersion* result;
@end

@implementation MPCodecVersion_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPCodecVersion alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPCodecVersion_Builder*) clear {
  self.result = [[[MPCodecVersion alloc] init] autorelease];
  return self;
}
- (MPCodecVersion_Builder*) clone {
  return [MPCodecVersion builderWithPrototype:result];
}
- (MPCodecVersion*) defaultInstance {
  return [MPCodecVersion defaultInstance];
}
- (MPCodecVersion*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPCodecVersion*) buildPartial {
  MPCodecVersion* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPCodecVersion_Builder*) mergeFrom:(MPCodecVersion*) other {
  if (other == [MPCodecVersion defaultInstance]) {
    return self;
  }
  if (other.hasAlpha) {
    [self setAlpha:other.alpha];
  }
  if (other.hasBeta) {
    [self setBeta:other.beta];
  }
  if (other.hasPreferAlpha) {
    [self setPreferAlpha:other.preferAlpha];
  }
  if (other.hasOpus) {
    [self setOpus:other.opus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPCodecVersion_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPCodecVersion_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAlpha:[input readInt32]];
        break;
      }
      case 16: {
        [self setBeta:[input readInt32]];
        break;
      }
      case 24: {
        [self setPreferAlpha:[input readBool]];
        break;
      }
      case 32: {
        [self setOpus:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasAlpha {
  return result.hasAlpha;
}
- (int32_t) alpha {
  return result.alpha;
}
- (MPCodecVersion_Builder*) setAlpha:(int32_t) value {
  result.hasAlpha = YES;
  result.alpha = value;
  return self;
}
- (MPCodecVersion_Builder*) clearAlpha {
  result.hasAlpha = NO;
  result.alpha = 0;
  return self;
}
- (BOOL) hasBeta {
  return result.hasBeta;
}
- (int32_t) beta {
  return result.beta;
}
- (MPCodecVersion_Builder*) setBeta:(int32_t) value {
  result.hasBeta = YES;
  result.beta = value;
  return self;
}
- (MPCodecVersion_Builder*) clearBeta {
  result.hasBeta = NO;
  result.beta = 0;
  return self;
}
- (BOOL) hasPreferAlpha {
  return result.hasPreferAlpha;
}
- (BOOL) preferAlpha {
  return result.preferAlpha;
}
- (MPCodecVersion_Builder*) setPreferAlpha:(BOOL) value {
  result.hasPreferAlpha = YES;
  result.preferAlpha = value;
  return self;
}
- (MPCodecVersion_Builder*) clearPreferAlpha {
  result.hasPreferAlpha = NO;
  result.preferAlpha = YES;
  return self;
}
- (BOOL) hasOpus {
  return result.hasOpus;
}
- (BOOL) opus {
  return result.opus;
}
- (MPCodecVersion_Builder*) setOpus:(BOOL) value {
  result.hasOpus = YES;
  result.opus = value;
  return self;
}
- (MPCodecVersion_Builder*) clearOpus {
  result.hasOpus = NO;
  result.opus = NO;
  return self;
}
@end

@interface MPUserStats ()
@property uint32_t session;
@property BOOL statsOnly;
@property (retain) PBAppendableArray * certificatesArray;
@property (retain) MPUserStats_Stats* fromClient;
@property (retain) MPUserStats_Stats* fromServer;
@property uint32_t udpPackets;
@property uint32_t tcpPackets;
@property Float32 udpPingAvg;
@property Float32 udpPingVar;
@property Float32 tcpPingAvg;
@property Float32 tcpPingVar;
@property (retain) MPVersion* version;
@property (retain) PBAppendableArray * celtVersionsArray;
@property (retain) NSData* address;
@property uint32_t bandwidth;
@property uint32_t onlinesecs;
@property uint32_t idlesecs;
@property BOOL strongCertificate;
@property BOOL opus;
@end

@implementation MPUserStats

- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) value {
  hasSession_ = !!value;
}
@synthesize session;
- (BOOL) hasStatsOnly {
  return !!hasStatsOnly_;
}
- (void) setHasStatsOnly:(BOOL) value {
  hasStatsOnly_ = !!value;
}
- (BOOL) statsOnly {
  return !!statsOnly_;
}
- (void) setStatsOnly:(BOOL) value {
  statsOnly_ = !!value;
}
@synthesize certificatesArray;
@dynamic certificates;
- (BOOL) hasFromClient {
  return !!hasFromClient_;
}
- (void) setHasFromClient:(BOOL) value {
  hasFromClient_ = !!value;
}
@synthesize fromClient;
- (BOOL) hasFromServer {
  return !!hasFromServer_;
}
- (void) setHasFromServer:(BOOL) value {
  hasFromServer_ = !!value;
}
@synthesize fromServer;
- (BOOL) hasUdpPackets {
  return !!hasUdpPackets_;
}
- (void) setHasUdpPackets:(BOOL) value {
  hasUdpPackets_ = !!value;
}
@synthesize udpPackets;
- (BOOL) hasTcpPackets {
  return !!hasTcpPackets_;
}
- (void) setHasTcpPackets:(BOOL) value {
  hasTcpPackets_ = !!value;
}
@synthesize tcpPackets;
- (BOOL) hasUdpPingAvg {
  return !!hasUdpPingAvg_;
}
- (void) setHasUdpPingAvg:(BOOL) value {
  hasUdpPingAvg_ = !!value;
}
@synthesize udpPingAvg;
- (BOOL) hasUdpPingVar {
  return !!hasUdpPingVar_;
}
- (void) setHasUdpPingVar:(BOOL) value {
  hasUdpPingVar_ = !!value;
}
@synthesize udpPingVar;
- (BOOL) hasTcpPingAvg {
  return !!hasTcpPingAvg_;
}
- (void) setHasTcpPingAvg:(BOOL) value {
  hasTcpPingAvg_ = !!value;
}
@synthesize tcpPingAvg;
- (BOOL) hasTcpPingVar {
  return !!hasTcpPingVar_;
}
- (void) setHasTcpPingVar:(BOOL) value {
  hasTcpPingVar_ = !!value;
}
@synthesize tcpPingVar;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value {
  hasVersion_ = !!value;
}
@synthesize version;
@synthesize celtVersionsArray;
@dynamic celtVersions;
- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) value {
  hasAddress_ = !!value;
}
@synthesize address;
- (BOOL) hasBandwidth {
  return !!hasBandwidth_;
}
- (void) setHasBandwidth:(BOOL) value {
  hasBandwidth_ = !!value;
}
@synthesize bandwidth;
- (BOOL) hasOnlinesecs {
  return !!hasOnlinesecs_;
}
- (void) setHasOnlinesecs:(BOOL) value {
  hasOnlinesecs_ = !!value;
}
@synthesize onlinesecs;
- (BOOL) hasIdlesecs {
  return !!hasIdlesecs_;
}
- (void) setHasIdlesecs:(BOOL) value {
  hasIdlesecs_ = !!value;
}
@synthesize idlesecs;
- (BOOL) hasStrongCertificate {
  return !!hasStrongCertificate_;
}
- (void) setHasStrongCertificate:(BOOL) value {
  hasStrongCertificate_ = !!value;
}
- (BOOL) strongCertificate {
  return !!strongCertificate_;
}
- (void) setStrongCertificate:(BOOL) value {
  strongCertificate_ = !!value;
}
- (BOOL) hasOpus {
  return !!hasOpus_;
}
- (void) setHasOpus:(BOOL) value {
  hasOpus_ = !!value;
}
- (BOOL) opus {
  return !!opus_;
}
- (void) setOpus:(BOOL) value {
  opus_ = !!value;
}
- (void) dealloc {
  self.certificatesArray = nil;
  self.fromClient = nil;
  self.fromServer = nil;
  self.version = nil;
  self.celtVersionsArray = nil;
  self.address = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.session = 0;
    self.statsOnly = NO;
    self.fromClient = [MPUserStats_Stats defaultInstance];
    self.fromServer = [MPUserStats_Stats defaultInstance];
    self.udpPackets = 0;
    self.tcpPackets = 0;
    self.udpPingAvg = 0;
    self.udpPingVar = 0;
    self.tcpPingAvg = 0;
    self.tcpPingVar = 0;
    self.version = [MPVersion defaultInstance];
    self.address = [NSData data];
    self.bandwidth = 0;
    self.onlinesecs = 0;
    self.idlesecs = 0;
    self.strongCertificate = NO;
    self.opus = NO;
  }
  return self;
}
static MPUserStats* defaultMPUserStatsInstance = nil;
+ (void) initialize {
  if (self == [MPUserStats class]) {
    defaultMPUserStatsInstance = [[MPUserStats alloc] init];
  }
}
+ (MPUserStats*) defaultInstance {
  return defaultMPUserStatsInstance;
}
- (MPUserStats*) defaultInstance {
  return defaultMPUserStatsInstance;
}
- (PBArray *)certificates {
  return certificatesArray;
}
- (NSData*)certificatesAtIndex:(NSUInteger)index {
  return [certificatesArray objectAtIndex:index];
}
- (PBArray *)celtVersions {
  return celtVersionsArray;
}
- (int32_t)celtVersionsAtIndex:(NSUInteger)index {
  return [celtVersionsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSession) {
    [output writeUInt32:1 value:self.session];
  }
  if (self.hasStatsOnly) {
    [output writeBool:2 value:self.statsOnly];
  }
  const NSUInteger certificatesArrayCount = self.certificatesArray.count;
  if (certificatesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.certificatesArray.data;
    for (NSUInteger i = 0; i < certificatesArrayCount; ++i) {
      [output writeData:3 value:values[i]];
    }
  }
  if (self.hasFromClient) {
    [output writeMessage:4 value:self.fromClient];
  }
  if (self.hasFromServer) {
    [output writeMessage:5 value:self.fromServer];
  }
  if (self.hasUdpPackets) {
    [output writeUInt32:6 value:self.udpPackets];
  }
  if (self.hasTcpPackets) {
    [output writeUInt32:7 value:self.tcpPackets];
  }
  if (self.hasUdpPingAvg) {
    [output writeFloat:8 value:self.udpPingAvg];
  }
  if (self.hasUdpPingVar) {
    [output writeFloat:9 value:self.udpPingVar];
  }
  if (self.hasTcpPingAvg) {
    [output writeFloat:10 value:self.tcpPingAvg];
  }
  if (self.hasTcpPingVar) {
    [output writeFloat:11 value:self.tcpPingVar];
  }
  if (self.hasVersion) {
    [output writeMessage:12 value:self.version];
  }
  const NSUInteger celtVersionsArrayCount = self.celtVersionsArray.count;
  if (celtVersionsArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.celtVersionsArray.data;
    for (NSUInteger i = 0; i < celtVersionsArrayCount; ++i) {
      [output writeInt32:13 value:values[i]];
    }
  }
  if (self.hasAddress) {
    [output writeData:14 value:self.address];
  }
  if (self.hasBandwidth) {
    [output writeUInt32:15 value:self.bandwidth];
  }
  if (self.hasOnlinesecs) {
    [output writeUInt32:16 value:self.onlinesecs];
  }
  if (self.hasIdlesecs) {
    [output writeUInt32:17 value:self.idlesecs];
  }
  if (self.hasStrongCertificate) {
    [output writeBool:18 value:self.strongCertificate];
  }
  if (self.hasOpus) {
    [output writeBool:19 value:self.opus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSession) {
    size += computeUInt32Size(1, self.session);
  }
  if (self.hasStatsOnly) {
    size += computeBoolSize(2, self.statsOnly);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.certificatesArray.count;
    const NSData* *values = (const NSData* *)self.certificatesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  if (self.hasFromClient) {
    size += computeMessageSize(4, self.fromClient);
  }
  if (self.hasFromServer) {
    size += computeMessageSize(5, self.fromServer);
  }
  if (self.hasUdpPackets) {
    size += computeUInt32Size(6, self.udpPackets);
  }
  if (self.hasTcpPackets) {
    size += computeUInt32Size(7, self.tcpPackets);
  }
  if (self.hasUdpPingAvg) {
    size += computeFloatSize(8, self.udpPingAvg);
  }
  if (self.hasUdpPingVar) {
    size += computeFloatSize(9, self.udpPingVar);
  }
  if (self.hasTcpPingAvg) {
    size += computeFloatSize(10, self.tcpPingAvg);
  }
  if (self.hasTcpPingVar) {
    size += computeFloatSize(11, self.tcpPingVar);
  }
  if (self.hasVersion) {
    size += computeMessageSize(12, self.version);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.celtVersionsArray.count;
    const int32_t *values = (const int32_t *)self.celtVersionsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  if (self.hasAddress) {
    size += computeDataSize(14, self.address);
  }
  if (self.hasBandwidth) {
    size += computeUInt32Size(15, self.bandwidth);
  }
  if (self.hasOnlinesecs) {
    size += computeUInt32Size(16, self.onlinesecs);
  }
  if (self.hasIdlesecs) {
    size += computeUInt32Size(17, self.idlesecs);
  }
  if (self.hasStrongCertificate) {
    size += computeBoolSize(18, self.strongCertificate);
  }
  if (self.hasOpus) {
    size += computeBoolSize(19, self.opus);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPUserStats*) parseFromData:(NSData*) data {
  return (MPUserStats*)[[[MPUserStats builder] mergeFromData:data] build];
}
+ (MPUserStats*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserStats*)[[[MPUserStats builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUserStats*) parseFromInputStream:(NSInputStream*) input {
  return (MPUserStats*)[[[MPUserStats builder] mergeFromInputStream:input] build];
}
+ (MPUserStats*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserStats*)[[[MPUserStats builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserStats*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUserStats*)[[[MPUserStats builder] mergeFromCodedInputStream:input] build];
}
+ (MPUserStats*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserStats*)[[[MPUserStats builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserStats_Builder*) builder {
  return [[[MPUserStats_Builder alloc] init] autorelease];
}
+ (MPUserStats_Builder*) builderWithPrototype:(MPUserStats*) prototype {
  return [[MPUserStats builder] mergeFrom:prototype];
}
- (MPUserStats_Builder*) builder {
  return [MPUserStats builder];
}
- (MPUserStats_Builder*) toBuilder {
  return [MPUserStats builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", [NSNumber numberWithInt:self.session]];
  }
  if (self.hasStatsOnly) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statsOnly", [NSNumber numberWithBool:self.statsOnly]];
  }
  for (NSData* element in self.certificatesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"certificates", element];
  }
  if (self.hasFromClient) {
    [output appendFormat:@"%@%@ {\n", indent, @"fromClient"];
    [self.fromClient writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFromServer) {
    [output appendFormat:@"%@%@ {\n", indent, @"fromServer"];
    [self.fromServer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUdpPackets) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udpPackets", [NSNumber numberWithInt:self.udpPackets]];
  }
  if (self.hasTcpPackets) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcpPackets", [NSNumber numberWithInt:self.tcpPackets]];
  }
  if (self.hasUdpPingAvg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udpPingAvg", [NSNumber numberWithFloat:self.udpPingAvg]];
  }
  if (self.hasUdpPingVar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udpPingVar", [NSNumber numberWithFloat:self.udpPingVar]];
  }
  if (self.hasTcpPingAvg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcpPingAvg", [NSNumber numberWithFloat:self.tcpPingAvg]];
  }
  if (self.hasTcpPingVar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcpPingVar", [NSNumber numberWithFloat:self.tcpPingVar]];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@ {\n", indent, @"version"];
    [self.version writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSNumber* value in self.celtVersionsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"celtVersions", value];
  }
  if (self.hasAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"address", self.address];
  }
  if (self.hasBandwidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bandwidth", [NSNumber numberWithInt:self.bandwidth]];
  }
  if (self.hasOnlinesecs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onlinesecs", [NSNumber numberWithInt:self.onlinesecs]];
  }
  if (self.hasIdlesecs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idlesecs", [NSNumber numberWithInt:self.idlesecs]];
  }
  if (self.hasStrongCertificate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strongCertificate", [NSNumber numberWithBool:self.strongCertificate]];
  }
  if (self.hasOpus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opus", [NSNumber numberWithBool:self.opus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUserStats class]]) {
    return NO;
  }
  MPUserStats *otherMessage = other;
  return
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || self.session == otherMessage.session) &&
      self.hasStatsOnly == otherMessage.hasStatsOnly &&
      (!self.hasStatsOnly || self.statsOnly == otherMessage.statsOnly) &&
      [self.certificatesArray isEqualToArray:otherMessage.certificatesArray] &&
      self.hasFromClient == otherMessage.hasFromClient &&
      (!self.hasFromClient || [self.fromClient isEqual:otherMessage.fromClient]) &&
      self.hasFromServer == otherMessage.hasFromServer &&
      (!self.hasFromServer || [self.fromServer isEqual:otherMessage.fromServer]) &&
      self.hasUdpPackets == otherMessage.hasUdpPackets &&
      (!self.hasUdpPackets || self.udpPackets == otherMessage.udpPackets) &&
      self.hasTcpPackets == otherMessage.hasTcpPackets &&
      (!self.hasTcpPackets || self.tcpPackets == otherMessage.tcpPackets) &&
      self.hasUdpPingAvg == otherMessage.hasUdpPingAvg &&
      (!self.hasUdpPingAvg || self.udpPingAvg == otherMessage.udpPingAvg) &&
      self.hasUdpPingVar == otherMessage.hasUdpPingVar &&
      (!self.hasUdpPingVar || self.udpPingVar == otherMessage.udpPingVar) &&
      self.hasTcpPingAvg == otherMessage.hasTcpPingAvg &&
      (!self.hasTcpPingAvg || self.tcpPingAvg == otherMessage.tcpPingAvg) &&
      self.hasTcpPingVar == otherMessage.hasTcpPingVar &&
      (!self.hasTcpPingVar || self.tcpPingVar == otherMessage.tcpPingVar) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      [self.celtVersionsArray isEqualToArray:otherMessage.celtVersionsArray] &&
      self.hasAddress == otherMessage.hasAddress &&
      (!self.hasAddress || [self.address isEqual:otherMessage.address]) &&
      self.hasBandwidth == otherMessage.hasBandwidth &&
      (!self.hasBandwidth || self.bandwidth == otherMessage.bandwidth) &&
      self.hasOnlinesecs == otherMessage.hasOnlinesecs &&
      (!self.hasOnlinesecs || self.onlinesecs == otherMessage.onlinesecs) &&
      self.hasIdlesecs == otherMessage.hasIdlesecs &&
      (!self.hasIdlesecs || self.idlesecs == otherMessage.idlesecs) &&
      self.hasStrongCertificate == otherMessage.hasStrongCertificate &&
      (!self.hasStrongCertificate || self.strongCertificate == otherMessage.strongCertificate) &&
      self.hasOpus == otherMessage.hasOpus &&
      (!self.hasOpus || self.opus == otherMessage.opus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSession) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.session] hash];
  }
  if (self.hasStatsOnly) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.statsOnly] hash];
  }
  for (NSData* element in self.certificatesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasFromClient) {
    hashCode = hashCode * 31 + [self.fromClient hash];
  }
  if (self.hasFromServer) {
    hashCode = hashCode * 31 + [self.fromServer hash];
  }
  if (self.hasUdpPackets) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.udpPackets] hash];
  }
  if (self.hasTcpPackets) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tcpPackets] hash];
  }
  if (self.hasUdpPingAvg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.udpPingAvg] hash];
  }
  if (self.hasUdpPingVar) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.udpPingVar] hash];
  }
  if (self.hasTcpPingAvg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.tcpPingAvg] hash];
  }
  if (self.hasTcpPingVar) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.tcpPingVar] hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  for (NSNumber* value in self.celtVersionsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasAddress) {
    hashCode = hashCode * 31 + [self.address hash];
  }
  if (self.hasBandwidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.bandwidth] hash];
  }
  if (self.hasOnlinesecs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.onlinesecs] hash];
  }
  if (self.hasIdlesecs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.idlesecs] hash];
  }
  if (self.hasStrongCertificate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.strongCertificate] hash];
  }
  if (self.hasOpus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.opus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUserStats_Stats ()
@property uint32_t good;
@property uint32_t late;
@property uint32_t lost;
@property uint32_t resync;
@end

@implementation MPUserStats_Stats

- (BOOL) hasGood {
  return !!hasGood_;
}
- (void) setHasGood:(BOOL) value {
  hasGood_ = !!value;
}
@synthesize good;
- (BOOL) hasLate {
  return !!hasLate_;
}
- (void) setHasLate:(BOOL) value {
  hasLate_ = !!value;
}
@synthesize late;
- (BOOL) hasLost {
  return !!hasLost_;
}
- (void) setHasLost:(BOOL) value {
  hasLost_ = !!value;
}
@synthesize lost;
- (BOOL) hasResync {
  return !!hasResync_;
}
- (void) setHasResync:(BOOL) value {
  hasResync_ = !!value;
}
@synthesize resync;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.good = 0;
    self.late = 0;
    self.lost = 0;
    self.resync = 0;
  }
  return self;
}
static MPUserStats_Stats* defaultMPUserStats_StatsInstance = nil;
+ (void) initialize {
  if (self == [MPUserStats_Stats class]) {
    defaultMPUserStats_StatsInstance = [[MPUserStats_Stats alloc] init];
  }
}
+ (MPUserStats_Stats*) defaultInstance {
  return defaultMPUserStats_StatsInstance;
}
- (MPUserStats_Stats*) defaultInstance {
  return defaultMPUserStats_StatsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGood) {
    [output writeUInt32:1 value:self.good];
  }
  if (self.hasLate) {
    [output writeUInt32:2 value:self.late];
  }
  if (self.hasLost) {
    [output writeUInt32:3 value:self.lost];
  }
  if (self.hasResync) {
    [output writeUInt32:4 value:self.resync];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGood) {
    size += computeUInt32Size(1, self.good);
  }
  if (self.hasLate) {
    size += computeUInt32Size(2, self.late);
  }
  if (self.hasLost) {
    size += computeUInt32Size(3, self.lost);
  }
  if (self.hasResync) {
    size += computeUInt32Size(4, self.resync);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPUserStats_Stats*) parseFromData:(NSData*) data {
  return (MPUserStats_Stats*)[[[MPUserStats_Stats builder] mergeFromData:data] build];
}
+ (MPUserStats_Stats*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserStats_Stats*)[[[MPUserStats_Stats builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUserStats_Stats*) parseFromInputStream:(NSInputStream*) input {
  return (MPUserStats_Stats*)[[[MPUserStats_Stats builder] mergeFromInputStream:input] build];
}
+ (MPUserStats_Stats*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserStats_Stats*)[[[MPUserStats_Stats builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserStats_Stats*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUserStats_Stats*)[[[MPUserStats_Stats builder] mergeFromCodedInputStream:input] build];
}
+ (MPUserStats_Stats*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserStats_Stats*)[[[MPUserStats_Stats builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserStats_Stats_Builder*) builder {
  return [[[MPUserStats_Stats_Builder alloc] init] autorelease];
}
+ (MPUserStats_Stats_Builder*) builderWithPrototype:(MPUserStats_Stats*) prototype {
  return [[MPUserStats_Stats builder] mergeFrom:prototype];
}
- (MPUserStats_Stats_Builder*) builder {
  return [MPUserStats_Stats builder];
}
- (MPUserStats_Stats_Builder*) toBuilder {
  return [MPUserStats_Stats builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGood) {
    [output appendFormat:@"%@%@: %@\n", indent, @"good", [NSNumber numberWithInt:self.good]];
  }
  if (self.hasLate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"late", [NSNumber numberWithInt:self.late]];
  }
  if (self.hasLost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lost", [NSNumber numberWithInt:self.lost]];
  }
  if (self.hasResync) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resync", [NSNumber numberWithInt:self.resync]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUserStats_Stats class]]) {
    return NO;
  }
  MPUserStats_Stats *otherMessage = other;
  return
      self.hasGood == otherMessage.hasGood &&
      (!self.hasGood || self.good == otherMessage.good) &&
      self.hasLate == otherMessage.hasLate &&
      (!self.hasLate || self.late == otherMessage.late) &&
      self.hasLost == otherMessage.hasLost &&
      (!self.hasLost || self.lost == otherMessage.lost) &&
      self.hasResync == otherMessage.hasResync &&
      (!self.hasResync || self.resync == otherMessage.resync) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasGood) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.good] hash];
  }
  if (self.hasLate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.late] hash];
  }
  if (self.hasLost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lost] hash];
  }
  if (self.hasResync) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.resync] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUserStats_Stats_Builder()
@property (retain) MPUserStats_Stats* result;
@end

@implementation MPUserStats_Stats_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPUserStats_Stats alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPUserStats_Stats_Builder*) clear {
  self.result = [[[MPUserStats_Stats alloc] init] autorelease];
  return self;
}
- (MPUserStats_Stats_Builder*) clone {
  return [MPUserStats_Stats builderWithPrototype:result];
}
- (MPUserStats_Stats*) defaultInstance {
  return [MPUserStats_Stats defaultInstance];
}
- (MPUserStats_Stats*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUserStats_Stats*) buildPartial {
  MPUserStats_Stats* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPUserStats_Stats_Builder*) mergeFrom:(MPUserStats_Stats*) other {
  if (other == [MPUserStats_Stats defaultInstance]) {
    return self;
  }
  if (other.hasGood) {
    [self setGood:other.good];
  }
  if (other.hasLate) {
    [self setLate:other.late];
  }
  if (other.hasLost) {
    [self setLost:other.lost];
  }
  if (other.hasResync) {
    [self setResync:other.resync];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUserStats_Stats_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUserStats_Stats_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGood:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLate:[input readUInt32]];
        break;
      }
      case 24: {
        [self setLost:[input readUInt32]];
        break;
      }
      case 32: {
        [self setResync:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasGood {
  return result.hasGood;
}
- (uint32_t) good {
  return result.good;
}
- (MPUserStats_Stats_Builder*) setGood:(uint32_t) value {
  result.hasGood = YES;
  result.good = value;
  return self;
}
- (MPUserStats_Stats_Builder*) clearGood {
  result.hasGood = NO;
  result.good = 0;
  return self;
}
- (BOOL) hasLate {
  return result.hasLate;
}
- (uint32_t) late {
  return result.late;
}
- (MPUserStats_Stats_Builder*) setLate:(uint32_t) value {
  result.hasLate = YES;
  result.late = value;
  return self;
}
- (MPUserStats_Stats_Builder*) clearLate {
  result.hasLate = NO;
  result.late = 0;
  return self;
}
- (BOOL) hasLost {
  return result.hasLost;
}
- (uint32_t) lost {
  return result.lost;
}
- (MPUserStats_Stats_Builder*) setLost:(uint32_t) value {
  result.hasLost = YES;
  result.lost = value;
  return self;
}
- (MPUserStats_Stats_Builder*) clearLost {
  result.hasLost = NO;
  result.lost = 0;
  return self;
}
- (BOOL) hasResync {
  return result.hasResync;
}
- (uint32_t) resync {
  return result.resync;
}
- (MPUserStats_Stats_Builder*) setResync:(uint32_t) value {
  result.hasResync = YES;
  result.resync = value;
  return self;
}
- (MPUserStats_Stats_Builder*) clearResync {
  result.hasResync = NO;
  result.resync = 0;
  return self;
}
@end

@interface MPUserStats_Builder()
@property (retain) MPUserStats* result;
@end

@implementation MPUserStats_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPUserStats alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPUserStats_Builder*) clear {
  self.result = [[[MPUserStats alloc] init] autorelease];
  return self;
}
- (MPUserStats_Builder*) clone {
  return [MPUserStats builderWithPrototype:result];
}
- (MPUserStats*) defaultInstance {
  return [MPUserStats defaultInstance];
}
- (MPUserStats*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUserStats*) buildPartial {
  MPUserStats* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPUserStats_Builder*) mergeFrom:(MPUserStats*) other {
  if (other == [MPUserStats defaultInstance]) {
    return self;
  }
  if (other.hasSession) {
    [self setSession:other.session];
  }
  if (other.hasStatsOnly) {
    [self setStatsOnly:other.statsOnly];
  }
  if (other.certificatesArray.count > 0) {
    if (result.certificatesArray == nil) {
      result.certificatesArray = [[other.certificatesArray copyWithZone:[other.certificatesArray zone]] autorelease];
    } else {
      [result.certificatesArray appendArray:other.certificatesArray];
    }
  }
  if (other.hasFromClient) {
    [self mergeFromClient:other.fromClient];
  }
  if (other.hasFromServer) {
    [self mergeFromServer:other.fromServer];
  }
  if (other.hasUdpPackets) {
    [self setUdpPackets:other.udpPackets];
  }
  if (other.hasTcpPackets) {
    [self setTcpPackets:other.tcpPackets];
  }
  if (other.hasUdpPingAvg) {
    [self setUdpPingAvg:other.udpPingAvg];
  }
  if (other.hasUdpPingVar) {
    [self setUdpPingVar:other.udpPingVar];
  }
  if (other.hasTcpPingAvg) {
    [self setTcpPingAvg:other.tcpPingAvg];
  }
  if (other.hasTcpPingVar) {
    [self setTcpPingVar:other.tcpPingVar];
  }
  if (other.hasVersion) {
    [self mergeVersion:other.version];
  }
  if (other.celtVersionsArray.count > 0) {
    if (result.celtVersionsArray == nil) {
      result.celtVersionsArray = [[other.celtVersionsArray copyWithZone:[other.celtVersionsArray zone]] autorelease];
    } else {
      [result.celtVersionsArray appendArray:other.celtVersionsArray];
    }
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.hasBandwidth) {
    [self setBandwidth:other.bandwidth];
  }
  if (other.hasOnlinesecs) {
    [self setOnlinesecs:other.onlinesecs];
  }
  if (other.hasIdlesecs) {
    [self setIdlesecs:other.idlesecs];
  }
  if (other.hasStrongCertificate) {
    [self setStrongCertificate:other.strongCertificate];
  }
  if (other.hasOpus) {
    [self setOpus:other.opus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUserStats_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUserStats_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSession:[input readUInt32]];
        break;
      }
      case 16: {
        [self setStatsOnly:[input readBool]];
        break;
      }
      case 26: {
        [self addCertificates:[input readData]];
        break;
      }
      case 34: {
        MPUserStats_Stats_Builder* subBuilder = [MPUserStats_Stats builder];
        if (self.hasFromClient) {
          [subBuilder mergeFrom:self.fromClient];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFromClient:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        MPUserStats_Stats_Builder* subBuilder = [MPUserStats_Stats builder];
        if (self.hasFromServer) {
          [subBuilder mergeFrom:self.fromServer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFromServer:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setUdpPackets:[input readUInt32]];
        break;
      }
      case 56: {
        [self setTcpPackets:[input readUInt32]];
        break;
      }
      case 69: {
        [self setUdpPingAvg:[input readFloat]];
        break;
      }
      case 77: {
        [self setUdpPingVar:[input readFloat]];
        break;
      }
      case 85: {
        [self setTcpPingAvg:[input readFloat]];
        break;
      }
      case 93: {
        [self setTcpPingVar:[input readFloat]];
        break;
      }
      case 98: {
        MPVersion_Builder* subBuilder = [MPVersion builder];
        if (self.hasVersion) {
          [subBuilder mergeFrom:self.version];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setVersion:[subBuilder buildPartial]];
        break;
      }
      case 104: {
        [self addCeltVersions:[input readInt32]];
        break;
      }
      case 114: {
        [self setAddress:[input readData]];
        break;
      }
      case 120: {
        [self setBandwidth:[input readUInt32]];
        break;
      }
      case 128: {
        [self setOnlinesecs:[input readUInt32]];
        break;
      }
      case 136: {
        [self setIdlesecs:[input readUInt32]];
        break;
      }
      case 144: {
        [self setStrongCertificate:[input readBool]];
        break;
      }
      case 152: {
        [self setOpus:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSession {
  return result.hasSession;
}
- (uint32_t) session {
  return result.session;
}
- (MPUserStats_Builder*) setSession:(uint32_t) value {
  result.hasSession = YES;
  result.session = value;
  return self;
}
- (MPUserStats_Builder*) clearSession {
  result.hasSession = NO;
  result.session = 0;
  return self;
}
- (BOOL) hasStatsOnly {
  return result.hasStatsOnly;
}
- (BOOL) statsOnly {
  return result.statsOnly;
}
- (MPUserStats_Builder*) setStatsOnly:(BOOL) value {
  result.hasStatsOnly = YES;
  result.statsOnly = value;
  return self;
}
- (MPUserStats_Builder*) clearStatsOnly {
  result.hasStatsOnly = NO;
  result.statsOnly = NO;
  return self;
}
- (PBAppendableArray *)certificates {
  return result.certificatesArray;
}
- (NSData*)certificatesAtIndex:(NSUInteger)index {
  return [result certificatesAtIndex:index];
}
- (MPUserStats_Builder *)addCertificates:(NSData*)value {
  if (result.certificatesArray == nil) {
    result.certificatesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.certificatesArray addObject:value];
  return self;
}
- (MPUserStats_Builder *)setCertificatesArray:(NSArray *)array {
  result.certificatesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MPUserStats_Builder *)setCertificatesValues:(const NSData* *)values count:(NSUInteger)count {
  result.certificatesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MPUserStats_Builder *)clearCertificates {
  result.certificatesArray = nil;
  return self;
}
- (BOOL) hasFromClient {
  return result.hasFromClient;
}
- (MPUserStats_Stats*) fromClient {
  return result.fromClient;
}
- (MPUserStats_Builder*) setFromClient:(MPUserStats_Stats*) value {
  result.hasFromClient = YES;
  result.fromClient = value;
  return self;
}
- (MPUserStats_Builder*) setFromClientBuilder:(MPUserStats_Stats_Builder*) builderForValue {
  return [self setFromClient:[builderForValue build]];
}
- (MPUserStats_Builder*) mergeFromClient:(MPUserStats_Stats*) value {
  if (result.hasFromClient &&
      result.fromClient != [MPUserStats_Stats defaultInstance]) {
    result.fromClient =
      [[[MPUserStats_Stats builderWithPrototype:result.fromClient] mergeFrom:value] buildPartial];
  } else {
    result.fromClient = value;
  }
  result.hasFromClient = YES;
  return self;
}
- (MPUserStats_Builder*) clearFromClient {
  result.hasFromClient = NO;
  result.fromClient = [MPUserStats_Stats defaultInstance];
  return self;
}
- (BOOL) hasFromServer {
  return result.hasFromServer;
}
- (MPUserStats_Stats*) fromServer {
  return result.fromServer;
}
- (MPUserStats_Builder*) setFromServer:(MPUserStats_Stats*) value {
  result.hasFromServer = YES;
  result.fromServer = value;
  return self;
}
- (MPUserStats_Builder*) setFromServerBuilder:(MPUserStats_Stats_Builder*) builderForValue {
  return [self setFromServer:[builderForValue build]];
}
- (MPUserStats_Builder*) mergeFromServer:(MPUserStats_Stats*) value {
  if (result.hasFromServer &&
      result.fromServer != [MPUserStats_Stats defaultInstance]) {
    result.fromServer =
      [[[MPUserStats_Stats builderWithPrototype:result.fromServer] mergeFrom:value] buildPartial];
  } else {
    result.fromServer = value;
  }
  result.hasFromServer = YES;
  return self;
}
- (MPUserStats_Builder*) clearFromServer {
  result.hasFromServer = NO;
  result.fromServer = [MPUserStats_Stats defaultInstance];
  return self;
}
- (BOOL) hasUdpPackets {
  return result.hasUdpPackets;
}
- (uint32_t) udpPackets {
  return result.udpPackets;
}
- (MPUserStats_Builder*) setUdpPackets:(uint32_t) value {
  result.hasUdpPackets = YES;
  result.udpPackets = value;
  return self;
}
- (MPUserStats_Builder*) clearUdpPackets {
  result.hasUdpPackets = NO;
  result.udpPackets = 0;
  return self;
}
- (BOOL) hasTcpPackets {
  return result.hasTcpPackets;
}
- (uint32_t) tcpPackets {
  return result.tcpPackets;
}
- (MPUserStats_Builder*) setTcpPackets:(uint32_t) value {
  result.hasTcpPackets = YES;
  result.tcpPackets = value;
  return self;
}
- (MPUserStats_Builder*) clearTcpPackets {
  result.hasTcpPackets = NO;
  result.tcpPackets = 0;
  return self;
}
- (BOOL) hasUdpPingAvg {
  return result.hasUdpPingAvg;
}
- (Float32) udpPingAvg {
  return result.udpPingAvg;
}
- (MPUserStats_Builder*) setUdpPingAvg:(Float32) value {
  result.hasUdpPingAvg = YES;
  result.udpPingAvg = value;
  return self;
}
- (MPUserStats_Builder*) clearUdpPingAvg {
  result.hasUdpPingAvg = NO;
  result.udpPingAvg = 0;
  return self;
}
- (BOOL) hasUdpPingVar {
  return result.hasUdpPingVar;
}
- (Float32) udpPingVar {
  return result.udpPingVar;
}
- (MPUserStats_Builder*) setUdpPingVar:(Float32) value {
  result.hasUdpPingVar = YES;
  result.udpPingVar = value;
  return self;
}
- (MPUserStats_Builder*) clearUdpPingVar {
  result.hasUdpPingVar = NO;
  result.udpPingVar = 0;
  return self;
}
- (BOOL) hasTcpPingAvg {
  return result.hasTcpPingAvg;
}
- (Float32) tcpPingAvg {
  return result.tcpPingAvg;
}
- (MPUserStats_Builder*) setTcpPingAvg:(Float32) value {
  result.hasTcpPingAvg = YES;
  result.tcpPingAvg = value;
  return self;
}
- (MPUserStats_Builder*) clearTcpPingAvg {
  result.hasTcpPingAvg = NO;
  result.tcpPingAvg = 0;
  return self;
}
- (BOOL) hasTcpPingVar {
  return result.hasTcpPingVar;
}
- (Float32) tcpPingVar {
  return result.tcpPingVar;
}
- (MPUserStats_Builder*) setTcpPingVar:(Float32) value {
  result.hasTcpPingVar = YES;
  result.tcpPingVar = value;
  return self;
}
- (MPUserStats_Builder*) clearTcpPingVar {
  result.hasTcpPingVar = NO;
  result.tcpPingVar = 0;
  return self;
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (MPVersion*) version {
  return result.version;
}
- (MPUserStats_Builder*) setVersion:(MPVersion*) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (MPUserStats_Builder*) setVersionBuilder:(MPVersion_Builder*) builderForValue {
  return [self setVersion:[builderForValue build]];
}
- (MPUserStats_Builder*) mergeVersion:(MPVersion*) value {
  if (result.hasVersion &&
      result.version != [MPVersion defaultInstance]) {
    result.version =
      [[[MPVersion builderWithPrototype:result.version] mergeFrom:value] buildPartial];
  } else {
    result.version = value;
  }
  result.hasVersion = YES;
  return self;
}
- (MPUserStats_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = [MPVersion defaultInstance];
  return self;
}
- (PBAppendableArray *)celtVersions {
  return result.celtVersionsArray;
}
- (int32_t)celtVersionsAtIndex:(NSUInteger)index {
  return [result celtVersionsAtIndex:index];
}
- (MPUserStats_Builder *)addCeltVersions:(int32_t)value {
  if (result.celtVersionsArray == nil) {
    result.celtVersionsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [result.celtVersionsArray addInt32:value];
  return self;
}
- (MPUserStats_Builder *)setCeltVersionsArray:(NSArray *)array {
  result.celtVersionsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (MPUserStats_Builder *)setCeltVersionsValues:(const int32_t *)values count:(NSUInteger)count {
  result.celtVersionsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (MPUserStats_Builder *)clearCeltVersions {
  result.celtVersionsArray = nil;
  return self;
}
- (BOOL) hasAddress {
  return result.hasAddress;
}
- (NSData*) address {
  return result.address;
}
- (MPUserStats_Builder*) setAddress:(NSData*) value {
  result.hasAddress = YES;
  result.address = value;
  return self;
}
- (MPUserStats_Builder*) clearAddress {
  result.hasAddress = NO;
  result.address = [NSData data];
  return self;
}
- (BOOL) hasBandwidth {
  return result.hasBandwidth;
}
- (uint32_t) bandwidth {
  return result.bandwidth;
}
- (MPUserStats_Builder*) setBandwidth:(uint32_t) value {
  result.hasBandwidth = YES;
  result.bandwidth = value;
  return self;
}
- (MPUserStats_Builder*) clearBandwidth {
  result.hasBandwidth = NO;
  result.bandwidth = 0;
  return self;
}
- (BOOL) hasOnlinesecs {
  return result.hasOnlinesecs;
}
- (uint32_t) onlinesecs {
  return result.onlinesecs;
}
- (MPUserStats_Builder*) setOnlinesecs:(uint32_t) value {
  result.hasOnlinesecs = YES;
  result.onlinesecs = value;
  return self;
}
- (MPUserStats_Builder*) clearOnlinesecs {
  result.hasOnlinesecs = NO;
  result.onlinesecs = 0;
  return self;
}
- (BOOL) hasIdlesecs {
  return result.hasIdlesecs;
}
- (uint32_t) idlesecs {
  return result.idlesecs;
}
- (MPUserStats_Builder*) setIdlesecs:(uint32_t) value {
  result.hasIdlesecs = YES;
  result.idlesecs = value;
  return self;
}
- (MPUserStats_Builder*) clearIdlesecs {
  result.hasIdlesecs = NO;
  result.idlesecs = 0;
  return self;
}
- (BOOL) hasStrongCertificate {
  return result.hasStrongCertificate;
}
- (BOOL) strongCertificate {
  return result.strongCertificate;
}
- (MPUserStats_Builder*) setStrongCertificate:(BOOL) value {
  result.hasStrongCertificate = YES;
  result.strongCertificate = value;
  return self;
}
- (MPUserStats_Builder*) clearStrongCertificate {
  result.hasStrongCertificate = NO;
  result.strongCertificate = NO;
  return self;
}
- (BOOL) hasOpus {
  return result.hasOpus;
}
- (BOOL) opus {
  return result.opus;
}
- (MPUserStats_Builder*) setOpus:(BOOL) value {
  result.hasOpus = YES;
  result.opus = value;
  return self;
}
- (MPUserStats_Builder*) clearOpus {
  result.hasOpus = NO;
  result.opus = NO;
  return self;
}
@end

@interface MPSuggestConfig ()
@property uint32_t version;
@property BOOL positional;
@property BOOL pushToTalk;
@end

@implementation MPSuggestConfig

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value {
  hasVersion_ = !!value;
}
@synthesize version;
- (BOOL) hasPositional {
  return !!hasPositional_;
}
- (void) setHasPositional:(BOOL) value {
  hasPositional_ = !!value;
}
- (BOOL) positional {
  return !!positional_;
}
- (void) setPositional:(BOOL) value {
  positional_ = !!value;
}
- (BOOL) hasPushToTalk {
  return !!hasPushToTalk_;
}
- (void) setHasPushToTalk:(BOOL) value {
  hasPushToTalk_ = !!value;
}
- (BOOL) pushToTalk {
  return !!pushToTalk_;
}
- (void) setPushToTalk:(BOOL) value {
  pushToTalk_ = !!value;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.version = 0;
    self.positional = NO;
    self.pushToTalk = NO;
  }
  return self;
}
static MPSuggestConfig* defaultMPSuggestConfigInstance = nil;
+ (void) initialize {
  if (self == [MPSuggestConfig class]) {
    defaultMPSuggestConfigInstance = [[MPSuggestConfig alloc] init];
  }
}
+ (MPSuggestConfig*) defaultInstance {
  return defaultMPSuggestConfigInstance;
}
- (MPSuggestConfig*) defaultInstance {
  return defaultMPSuggestConfigInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeUInt32:1 value:self.version];
  }
  if (self.hasPositional) {
    [output writeBool:2 value:self.positional];
  }
  if (self.hasPushToTalk) {
    [output writeBool:3 value:self.pushToTalk];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasVersion) {
    size += computeUInt32Size(1, self.version);
  }
  if (self.hasPositional) {
    size += computeBoolSize(2, self.positional);
  }
  if (self.hasPushToTalk) {
    size += computeBoolSize(3, self.pushToTalk);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPSuggestConfig*) parseFromData:(NSData*) data {
  return (MPSuggestConfig*)[[[MPSuggestConfig builder] mergeFromData:data] build];
}
+ (MPSuggestConfig*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPSuggestConfig*)[[[MPSuggestConfig builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPSuggestConfig*) parseFromInputStream:(NSInputStream*) input {
  return (MPSuggestConfig*)[[[MPSuggestConfig builder] mergeFromInputStream:input] build];
}
+ (MPSuggestConfig*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPSuggestConfig*)[[[MPSuggestConfig builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPSuggestConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPSuggestConfig*)[[[MPSuggestConfig builder] mergeFromCodedInputStream:input] build];
}
+ (MPSuggestConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPSuggestConfig*)[[[MPSuggestConfig builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPSuggestConfig_Builder*) builder {
  return [[[MPSuggestConfig_Builder alloc] init] autorelease];
}
+ (MPSuggestConfig_Builder*) builderWithPrototype:(MPSuggestConfig*) prototype {
  return [[MPSuggestConfig builder] mergeFrom:prototype];
}
- (MPSuggestConfig_Builder*) builder {
  return [MPSuggestConfig builder];
}
- (MPSuggestConfig_Builder*) toBuilder {
  return [MPSuggestConfig builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInt:self.version]];
  }
  if (self.hasPositional) {
    [output appendFormat:@"%@%@: %@\n", indent, @"positional", [NSNumber numberWithBool:self.positional]];
  }
  if (self.hasPushToTalk) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pushToTalk", [NSNumber numberWithBool:self.pushToTalk]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPSuggestConfig class]]) {
    return NO;
  }
  MPSuggestConfig *otherMessage = other;
  return
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      self.hasPositional == otherMessage.hasPositional &&
      (!self.hasPositional || self.positional == otherMessage.positional) &&
      self.hasPushToTalk == otherMessage.hasPushToTalk &&
      (!self.hasPushToTalk || self.pushToTalk == otherMessage.pushToTalk) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.version] hash];
  }
  if (self.hasPositional) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.positional] hash];
  }
  if (self.hasPushToTalk) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.pushToTalk] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPSuggestConfig_Builder()
@property (retain) MPSuggestConfig* result;
@end

@implementation MPSuggestConfig_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPSuggestConfig alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPSuggestConfig_Builder*) clear {
  self.result = [[[MPSuggestConfig alloc] init] autorelease];
  return self;
}
- (MPSuggestConfig_Builder*) clone {
  return [MPSuggestConfig builderWithPrototype:result];
}
- (MPSuggestConfig*) defaultInstance {
  return [MPSuggestConfig defaultInstance];
}
- (MPSuggestConfig*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPSuggestConfig*) buildPartial {
  MPSuggestConfig* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPSuggestConfig_Builder*) mergeFrom:(MPSuggestConfig*) other {
  if (other == [MPSuggestConfig defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasPositional) {
    [self setPositional:other.positional];
  }
  if (other.hasPushToTalk) {
    [self setPushToTalk:other.pushToTalk];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPSuggestConfig_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPSuggestConfig_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setVersion:[input readUInt32]];
        break;
      }
      case 16: {
        [self setPositional:[input readBool]];
        break;
      }
      case 24: {
        [self setPushToTalk:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (uint32_t) version {
  return result.version;
}
- (MPSuggestConfig_Builder*) setVersion:(uint32_t) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (MPSuggestConfig_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = 0;
  return self;
}
- (BOOL) hasPositional {
  return result.hasPositional;
}
- (BOOL) positional {
  return result.positional;
}
- (MPSuggestConfig_Builder*) setPositional:(BOOL) value {
  result.hasPositional = YES;
  result.positional = value;
  return self;
}
- (MPSuggestConfig_Builder*) clearPositional {
  result.hasPositional = NO;
  result.positional = NO;
  return self;
}
- (BOOL) hasPushToTalk {
  return result.hasPushToTalk;
}
- (BOOL) pushToTalk {
  return result.pushToTalk;
}
- (MPSuggestConfig_Builder*) setPushToTalk:(BOOL) value {
  result.hasPushToTalk = YES;
  result.pushToTalk = value;
  return self;
}
- (MPSuggestConfig_Builder*) clearPushToTalk {
  result.hasPushToTalk = NO;
  result.pushToTalk = NO;
  return self;
}
@end

@interface MPRequestBlob ()
@property (retain) PBAppendableArray * sessionTextureArray;
@property (retain) PBAppendableArray * sessionCommentArray;
@property (retain) PBAppendableArray * channelDescriptionArray;
@end

@implementation MPRequestBlob

@synthesize sessionTextureArray;
@dynamic sessionTexture;
@synthesize sessionCommentArray;
@dynamic sessionComment;
@synthesize channelDescriptionArray;
@dynamic channelDescription;
- (void) dealloc {
  self.sessionTextureArray = nil;
  self.sessionCommentArray = nil;
  self.channelDescriptionArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MPRequestBlob* defaultMPRequestBlobInstance = nil;
+ (void) initialize {
  if (self == [MPRequestBlob class]) {
    defaultMPRequestBlobInstance = [[MPRequestBlob alloc] init];
  }
}
+ (MPRequestBlob*) defaultInstance {
  return defaultMPRequestBlobInstance;
}
- (MPRequestBlob*) defaultInstance {
  return defaultMPRequestBlobInstance;
}
- (PBArray *)sessionTexture {
  return sessionTextureArray;
}
- (uint32_t)sessionTextureAtIndex:(NSUInteger)index {
  return [sessionTextureArray uint32AtIndex:index];
}
- (PBArray *)sessionComment {
  return sessionCommentArray;
}
- (uint32_t)sessionCommentAtIndex:(NSUInteger)index {
  return [sessionCommentArray uint32AtIndex:index];
}
- (PBArray *)channelDescription {
  return channelDescriptionArray;
}
- (uint32_t)channelDescriptionAtIndex:(NSUInteger)index {
  return [channelDescriptionArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger sessionTextureArrayCount = self.sessionTextureArray.count;
  if (sessionTextureArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.sessionTextureArray.data;
    for (NSUInteger i = 0; i < sessionTextureArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  const NSUInteger sessionCommentArrayCount = self.sessionCommentArray.count;
  if (sessionCommentArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.sessionCommentArray.data;
    for (NSUInteger i = 0; i < sessionCommentArrayCount; ++i) {
      [output writeUInt32:2 value:values[i]];
    }
  }
  const NSUInteger channelDescriptionArrayCount = self.channelDescriptionArray.count;
  if (channelDescriptionArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.channelDescriptionArray.data;
    for (NSUInteger i = 0; i < channelDescriptionArrayCount; ++i) {
      [output writeUInt32:3 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.sessionTextureArray.count;
    const uint32_t *values = (const uint32_t *)self.sessionTextureArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.sessionCommentArray.count;
    const uint32_t *values = (const uint32_t *)self.sessionCommentArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.channelDescriptionArray.count;
    const uint32_t *values = (const uint32_t *)self.channelDescriptionArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MPRequestBlob*) parseFromData:(NSData*) data {
  return (MPRequestBlob*)[[[MPRequestBlob builder] mergeFromData:data] build];
}
+ (MPRequestBlob*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPRequestBlob*)[[[MPRequestBlob builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPRequestBlob*) parseFromInputStream:(NSInputStream*) input {
  return (MPRequestBlob*)[[[MPRequestBlob builder] mergeFromInputStream:input] build];
}
+ (MPRequestBlob*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPRequestBlob*)[[[MPRequestBlob builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPRequestBlob*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPRequestBlob*)[[[MPRequestBlob builder] mergeFromCodedInputStream:input] build];
}
+ (MPRequestBlob*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPRequestBlob*)[[[MPRequestBlob builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPRequestBlob_Builder*) builder {
  return [[[MPRequestBlob_Builder alloc] init] autorelease];
}
+ (MPRequestBlob_Builder*) builderWithPrototype:(MPRequestBlob*) prototype {
  return [[MPRequestBlob builder] mergeFrom:prototype];
}
- (MPRequestBlob_Builder*) builder {
  return [MPRequestBlob builder];
}
- (MPRequestBlob_Builder*) toBuilder {
  return [MPRequestBlob builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* value in self.sessionTextureArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionTexture", value];
  }
  for (NSNumber* value in self.sessionCommentArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionComment", value];
  }
  for (NSNumber* value in self.channelDescriptionArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelDescription", value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPRequestBlob class]]) {
    return NO;
  }
  MPRequestBlob *otherMessage = other;
  return
      [self.sessionTextureArray isEqualToArray:otherMessage.sessionTextureArray] &&
      [self.sessionCommentArray isEqualToArray:otherMessage.sessionCommentArray] &&
      [self.channelDescriptionArray isEqualToArray:otherMessage.channelDescriptionArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* value in self.sessionTextureArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.sessionCommentArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.channelDescriptionArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPRequestBlob_Builder()
@property (retain) MPRequestBlob* result;
@end

@implementation MPRequestBlob_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MPRequestBlob alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MPRequestBlob_Builder*) clear {
  self.result = [[[MPRequestBlob alloc] init] autorelease];
  return self;
}
- (MPRequestBlob_Builder*) clone {
  return [MPRequestBlob builderWithPrototype:result];
}
- (MPRequestBlob*) defaultInstance {
  return [MPRequestBlob defaultInstance];
}
- (MPRequestBlob*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPRequestBlob*) buildPartial {
  MPRequestBlob* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MPRequestBlob_Builder*) mergeFrom:(MPRequestBlob*) other {
  if (other == [MPRequestBlob defaultInstance]) {
    return self;
  }
  if (other.sessionTextureArray.count > 0) {
    if (result.sessionTextureArray == nil) {
      result.sessionTextureArray = [[other.sessionTextureArray copyWithZone:[other.sessionTextureArray zone]] autorelease];
    } else {
      [result.sessionTextureArray appendArray:other.sessionTextureArray];
    }
  }
  if (other.sessionCommentArray.count > 0) {
    if (result.sessionCommentArray == nil) {
      result.sessionCommentArray = [[other.sessionCommentArray copyWithZone:[other.sessionCommentArray zone]] autorelease];
    } else {
      [result.sessionCommentArray appendArray:other.sessionCommentArray];
    }
  }
  if (other.channelDescriptionArray.count > 0) {
    if (result.channelDescriptionArray == nil) {
      result.channelDescriptionArray = [[other.channelDescriptionArray copyWithZone:[other.channelDescriptionArray zone]] autorelease];
    } else {
      [result.channelDescriptionArray appendArray:other.channelDescriptionArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPRequestBlob_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPRequestBlob_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addSessionTexture:[input readUInt32]];
        break;
      }
      case 16: {
        [self addSessionComment:[input readUInt32]];
        break;
      }
      case 24: {
        [self addChannelDescription:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)sessionTexture {
  return result.sessionTextureArray;
}
- (uint32_t)sessionTextureAtIndex:(NSUInteger)index {
  return [result sessionTextureAtIndex:index];
}
- (MPRequestBlob_Builder *)addSessionTexture:(uint32_t)value {
  if (result.sessionTextureArray == nil) {
    result.sessionTextureArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.sessionTextureArray addUint32:value];
  return self;
}
- (MPRequestBlob_Builder *)setSessionTextureArray:(NSArray *)array {
  result.sessionTextureArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPRequestBlob_Builder *)setSessionTextureValues:(const uint32_t *)values count:(NSUInteger)count {
  result.sessionTextureArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPRequestBlob_Builder *)clearSessionTexture {
  result.sessionTextureArray = nil;
  return self;
}
- (PBAppendableArray *)sessionComment {
  return result.sessionCommentArray;
}
- (uint32_t)sessionCommentAtIndex:(NSUInteger)index {
  return [result sessionCommentAtIndex:index];
}
- (MPRequestBlob_Builder *)addSessionComment:(uint32_t)value {
  if (result.sessionCommentArray == nil) {
    result.sessionCommentArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.sessionCommentArray addUint32:value];
  return self;
}
- (MPRequestBlob_Builder *)setSessionCommentArray:(NSArray *)array {
  result.sessionCommentArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPRequestBlob_Builder *)setSessionCommentValues:(const uint32_t *)values count:(NSUInteger)count {
  result.sessionCommentArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPRequestBlob_Builder *)clearSessionComment {
  result.sessionCommentArray = nil;
  return self;
}
- (PBAppendableArray *)channelDescription {
  return result.channelDescriptionArray;
}
- (uint32_t)channelDescriptionAtIndex:(NSUInteger)index {
  return [result channelDescriptionAtIndex:index];
}
- (MPRequestBlob_Builder *)addChannelDescription:(uint32_t)value {
  if (result.channelDescriptionArray == nil) {
    result.channelDescriptionArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.channelDescriptionArray addUint32:value];
  return self;
}
- (MPRequestBlob_Builder *)setChannelDescriptionArray:(NSArray *)array {
  result.channelDescriptionArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPRequestBlob_Builder *)setChannelDescriptionValues:(const uint32_t *)values count:(NSUInteger)count {
  result.channelDescriptionArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPRequestBlob_Builder *)clearChannelDescription {
  result.channelDescriptionArray = nil;
  return self;
}
@end

